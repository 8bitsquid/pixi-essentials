{"version":3,"file":"cull.js","sources":["../src/Cull.ts"],"sourcesContent":["import { DisplayObject, Container, Rectangle } from 'pixi.js';\n\nconst tempRect = new Rectangle();\n\n/**\n * The culling options for {@code Cull}\n *\n * @public\n */\nexport interface ICullOptions\n{\n    recursive: boolean;\n    toggle: 'visible' | 'renderable';\n}\n\n/**\n * Provides a simple, configurable mechanism for culling a subtree of your scene graph.\n *\n * If your scene graph is not static, culling needs to be done before rendering. You\n * can run it on the `prerender` event fired by the renderer.\n *\n * @public\n */\nexport class Cull\n{\n    private _recursive: boolean;\n    private _toggle: 'visible' | 'renderable';\n    private _targetList: Set<DisplayObject>;\n\n    /**\n     * @param options\n     * @param [options.recursive] - whether culling should be recursive\n     * @param [options.toggle='renderable'] - which property of display-object was be set to indicate\n     *      its culling state. It should be one of `renderable`, `visible`.\n     */\n    constructor(options: Partial<ICullOptions> = {})\n    {\n        this._recursive = typeof options.recursive === 'boolean' ? options.recursive : true;\n        this._toggle = options.toggle || 'visible';\n        this._targetList = new Set<DisplayObject>();\n    }\n\n    /**\n     * Adds a display-object to the culling list\n     *\n     * @param target - the display-object to be culled\n     * @return this\n     */\n    add(target: DisplayObject): this\n    {\n        this._targetList.add(target);\n\n        return this;\n    }\n\n    /**\n     * Adds all the display-objects to the culling list\n     *\n     * @param targets - the display-objects to be culled\n     * @return this\n     */\n    addAll(targets: DisplayObject[]): this\n    {\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this._targetList.add(targets[i]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the display-object from the culling list\n     *\n     * @param target - the display-object to be removed\n     * @return this\n     */\n    remove(target: DisplayObject): this\n    {\n        this._targetList.delete(target);\n\n        return this;\n    }\n\n    /**\n     * Removes all the passed display-objects from the culling list\n     *\n     * @param targets - the display-objects to be removed\n     * @return this\n     */\n    removeAll(targets: DisplayObject[]): this\n    {\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this._targetList.delete(targets[i]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the culling list\n     *\n     * @return this\n     */\n    clear(): this\n    {\n        this._targetList.clear();\n\n        return this;\n    }\n\n    /**\n     * @param rect - the rectangle outside of which display-objects should be culled\n     * @param skipUpdate - whether to skip transform update\n     * @return this\n     */\n    cull(rect: Rectangle, skipUpdate = false): this\n    {\n        this.uncull();\n\n        this._targetList.forEach((target) =>\n        {\n            if (!skipUpdate)\n            {\n                // Update the transforms of display-objects in this target's subtree\n                target.getBounds(false, tempRect);\n            }\n\n            if (this._recursive)\n            {\n                this.cullRecursive(rect, target);\n            }\n            else\n            {\n                // NOTE: If skip-update is false, then tempRect already contains the bounds of the target\n                if (skipUpdate)\n                {\n                    target.getBounds(true, tempRect);\n                }\n\n                target[this._toggle] = tempRect.right > rect.left\n                    && tempRect.left < rect.right\n                    && tempRect.bottom > rect.top\n                    && tempRect.top < rect.bottom;\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets all display-objects to the unculled state.\n     *\n     * @return this\n     */\n    uncull(): this\n    {\n        this._targetList.forEach((target) =>\n        {\n            if (this._recursive)\n            {\n                this.uncullRecursive(target);\n            }\n            else\n            {\n                target[this._toggle] = false;\n            }\n        });\n\n        return this;\n    }\n\n    protected cullRecursive(rect: Rectangle, displayObject: DisplayObject): void\n    {\n        // NOTE: getBounds can skipUpdate because updateTransform is invoked before culling.\n        const bounds = displayObject.getBounds(true, tempRect);\n\n        displayObject[this._toggle] = bounds.right > rect.left\n            && bounds.left < rect.right\n            && bounds.bottom > rect.top\n            && bounds.top < rect.bottom;\n\n        const fullyVisible = bounds.left >= rect.left\n            && bounds.top >= rect.top\n            && bounds.right <= rect.right\n            && bounds.bottom >= rect.bottom;\n\n        // Only cull children if this display-object is fully-visible. It is expected that the bounds\n        // of children lie inside of its own. Hence, further culling is only required if the display-object\n        // intersects with the boundaries of \"rect\".\n        if (!fullyVisible\n                && (displayObject as Container).children\n                && (displayObject as Container).children.length)\n        {\n            const children = (displayObject as Container).children;\n\n            for (let i = 0, j = children.length; i < j; i++)\n            {\n                this.cullRecursive(rect, children[i]);\n            }\n        }\n    }\n\n    protected uncullRecursive(displayObject: DisplayObject): void\n    {\n        displayObject[this._toggle] = true;\n\n        if ((displayObject as Container).children && (displayObject as Container).children.length)\n        {\n            const children = (displayObject as Container).children;\n\n            for (let i = 0, j = children.length; i < j; i++)\n            {\n                this.uncullRecursive(children[i]);\n            }\n        }\n    }\n}\n"],"names":["tempRect","[object Object]","options","this","_recursive","recursive","_toggle","toggle","_targetList","Set","target","add","targets","i","j","length","delete","clear","rect","skipUpdate","uncull","forEach","getBounds","cullRecursive","right","left","bottom","top","uncullRecursive","displayObject","bounds","children"],"mappings":";;;;;;;;;;6EAEA,MAAMA,EAAW,uCAiCbC,YAAYC,EAAiC,IAEzCC,KAAKC,WAA0C,kBAAtBF,EAAQG,WAA0BH,EAAQG,UACnEF,KAAKG,QAAUJ,EAAQK,QAAU,UACjCJ,KAAKK,YAAc,IAAIC,IAS3BR,IAAIS,GAIA,OAFAP,KAAKK,YAAYG,IAAID,GAEdP,KASXF,OAAOW,GAEH,IAAK,IAAIC,EAAI,EAAGC,EAAIF,EAAQG,OAAQF,EAAIC,EAAGD,IAEvCV,KAAKK,YAAYG,IAAIC,EAAQC,IAGjC,OAAOV,KASXF,OAAOS,GAIH,OAFAP,KAAKK,YAAYQ,OAAON,GAEjBP,KASXF,UAAUW,GAEN,IAAK,IAAIC,EAAI,EAAGC,EAAIF,EAAQG,OAAQF,EAAIC,EAAGD,IAEvCV,KAAKK,YAAYQ,OAAOJ,EAAQC,IAGpC,OAAOV,KAQXF,QAII,OAFAE,KAAKK,YAAYS,QAEVd,KAQXF,KAAKiB,EAAiBC,GAAa,GA+B/B,OA7BAhB,KAAKiB,SAELjB,KAAKK,YAAYa,QAASX,IAEjBS,GAGDT,EAAOY,WAAU,EAAOtB,GAGxBG,KAAKC,WAELD,KAAKoB,cAAcL,EAAMR,IAKrBS,GAEAT,EAAOY,WAAU,EAAMtB,GAG3BU,EAAOP,KAAKG,SAAWN,EAASwB,MAAQN,EAAKO,MACtCzB,EAASyB,KAAOP,EAAKM,OACrBxB,EAAS0B,OAASR,EAAKS,KACvB3B,EAAS2B,IAAMT,EAAKQ,UAI5BvB,KAQXF,SAcI,OAZAE,KAAKK,YAAYa,QAASX,IAElBP,KAAKC,WAELD,KAAKyB,gBAAgBlB,GAIrBA,EAAOP,KAAKG,UAAW,IAIxBH,KAGDF,cAAciB,EAAiBW,GAGrC,MAAMC,EAASD,EAAcP,WAAU,EAAMtB,GAE7C6B,EAAc1B,KAAKG,SAAWwB,EAAON,MAAQN,EAAKO,MAC3CK,EAAOL,KAAOP,EAAKM,OACnBM,EAAOJ,OAASR,EAAKS,KACrBG,EAAOH,IAAMT,EAAKQ,OAUzB,KARqBI,EAAOL,MAAQP,EAAKO,MAClCK,EAAOH,KAAOT,EAAKS,KACnBG,EAAON,OAASN,EAAKM,OACrBM,EAAOJ,QAAUR,EAAKQ,SAMjBG,EAA4BE,UAC5BF,EAA4BE,SAAShB,OACjD,CACI,MAAMgB,EAAYF,EAA4BE,SAE9C,IAAK,IAAIlB,EAAI,EAAGC,EAAIiB,EAAShB,OAAQF,EAAIC,EAAGD,IAExCV,KAAKoB,cAAcL,EAAMa,EAASlB,KAKpCZ,gBAAgB4B,GAItB,GAFAA,EAAc1B,KAAKG,UAAW,EAEzBuB,EAA4BE,UAAaF,EAA4BE,SAAShB,OACnF,CACI,MAAMgB,EAAYF,EAA4BE,SAE9C,IAAK,IAAIlB,EAAI,EAAGC,EAAIiB,EAAShB,OAAQF,EAAIC,EAAGD,IAExCV,KAAKyB,gBAAgBG,EAASlB"}