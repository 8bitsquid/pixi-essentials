{"version":3,"file":"bounds.js","sources":["../src/AxisAlignedBounds.ts","../src/OrientedBounds.ts"],"sourcesContent":["/// <reference path=\"../node_modules/pixi.js/pixi.js.d.ts\" />\nimport { Point } from '@pixi/math';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport class AxisAlignedBounds\n{\n    public currentID: number;\n    public dirtyID: number;\n\n    protected _x: number;\n    protected _y: number;\n    protected _width: number;\n    protected _height: number;\n    protected _hull: [Point, Point, Point, Point];\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        this._x = Number(x);\n        this._y = Number(y);\n        this._width = Number(width);\n        this._height = Number(height);\n        this._hull = [new Point(), new Point(), new Point(), new Point()];\n\n        this.currentID = -1;\n        this.dirtyID = 0;\n    }\n\n    get x(): number\n    {\n        return this._x;\n    }\n    set x(value: number)\n    {\n        this._x = value;\n        this.dirtyID++;\n    }\n\n    get y(): number\n    {\n        return this._y;\n    }\n    set y(value: number)\n    {\n        this._y = value;\n        this.dirtyID++;\n    }\n\n    get width(): number\n    {\n        return this._width;\n    }\n    set width(value: number)\n    {\n        this._width = value;\n        this.dirtyID++;\n    }\n\n    get height(): number\n    {\n        return this._height;\n    }\n    set height(value: number)\n    {\n        this._height = value;\n        this.dirtyID++;\n    }\n\n    get hull(): Point[]\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull;\n    }\n\n    get topLeft(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[0];\n    }\n\n    get topRight(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[1];\n    }\n\n    get bottomRight(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[2];\n    }\n\n    get bottomLeft(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[3];\n    }\n\n    protected isDirty(): boolean\n    {\n        return this.currentID !== this.dirtyID;\n    }\n\n    protected update(): void\n    {\n        const [topLeft, topRight, bottomRight, bottomLeft] = this._hull;\n\n        topLeft.set(this._x, this._y);\n        topRight.set(this._x + this._width, this._y);\n        bottomRight.set(this._x + this._width, this._y + this._height);\n        bottomLeft.set(this._x, this._y + this._height);\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone(): AxisAlignedBounds\n    {\n        return new AxisAlignedBounds(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param rectangle - The rectangle to copy from.\n     * @return Returns itself.\n     */\n    copyFrom(rectangle: AxisAlignedBounds): AxisAlignedBounds\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param rectangle - The rectangle to copy to.\n     * @return Returns given parameter.\n     */\n    copyTo(rectangle: AxisAlignedBounds): AxisAlignedBounds\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @return Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the given {@link bounds} are equal to this.\n     *\n     * @param bounds\n     */\n    equals(bounds: AxisAlignedBounds): boolean\n    {\n        if (!bounds) return false;\n\n        return bounds.x === this.x\n            && bounds.y === this.y\n            && bounds.width === this.width\n            && bounds.height === this.height;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param [paddingX=0] - The horizontal padding amount.\n     * @param [paddingY=0] - The vertical padding amount.\n     * @return Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param rectangle - The rectangle to fit.\n     * @return Returns itself.\n     */\n    fit(rectangle: AxisAlignedBounds): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param [resolution=1] resolution\n     * @param [eps=0.001] precision\n     * @return Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param rectangle - The rectangle to include.\n     * @return Returns itself.\n     */\n    enlarge(rectangle: AxisAlignedBounds): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n}\n","/// <reference path=\"../node_modules/pixi.js/pixi.js.d.ts\" />\nimport { AxisAlignedBounds } from './AxisAlignedBounds';\nimport { Matrix, ObservablePoint, Point } from '@pixi/math';\n\n/**\n * An oriented bounding box is a rotated rectangle.\n *\n * An oriented bounding box is modelled by rotating its (axis-aligned) {@link OrientedBounds#innerBounds}\n * by an angle {@link OrientedBounds#angle} around its center. The center of an oriented bounding box and\n * its axis-aligned inner-bounds coincide.\n */\nexport class OrientedBounds\n{\n    public innerBounds: AxisAlignedBounds;\n    public currentID: number;\n    public dirtyID: number;\n\n    protected _rotation: number;\n    protected _center: Point;\n    protected _hull: [Point, Point, Point, Point];\n    protected _matrix: Matrix;\n\n    /**\n     * @param innerBounds\n     * @param angle\n     */\n    constructor(innerBounds: AxisAlignedBounds, angle?: number);\n\n    /**\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     * @param angle\n     */\n    constructor(x?: number, y?: number, width?: number, height?: number, angle?: number);\n\n    constructor(x: number | AxisAlignedBounds = 0, y = 0, width = 0, height = 0, angle = 0)\n    {\n        if (x instanceof AxisAlignedBounds)\n        {\n            angle = y || 0;\n\n            y = x.y;\n            width = x.width;\n            height = x.height;\n\n            x = x.x;\n        }\n\n        /**\n         * The unrotated version of this bounding box.\n         */\n        this.innerBounds = new AxisAlignedBounds(x, y, width, height);\n\n        this._rotation = angle;\n        this._center = new ObservablePoint<OrientedBounds>(this.updateCenter, this);\n        this._hull = [new Point(), new Point(), new Point(), new Point()];\n        this._matrix = new Matrix();\n\n        this.currentID = -1;\n        this.dirtyID = 0;\n    }\n\n    /**\n     * The angle, in radians, by which this bounding box is tilted.\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        this._rotation = value;\n        this.dirtyID++;\n    }\n\n    /**\n     * The center of this bounding box.\n     *\n     * The center of this and {@code this.innerBounds} will always coincide.\n     */\n    get center(): ObservablePoint\n    {\n        if (this.isDirty()) this.update();\n\n        return this._center;\n    }\n\n    set center(value: Point)\n    {\n        // this.updateCenter will automatically be fired!\n        this.center.copyFrom(value);\n    }\n\n    /**\n     * The four-corners of this bounding, in clockwise order starting from the top-left.\n     *\n     * @readonly\n     */\n    get hull(): [Point, Point, Point, Point]\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull;\n    }\n\n    /**\n     * The top-left corner of this bounding box. The returned instance should not be modified directly.\n     *\n     * @readonly\n     */\n    get topLeft(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[0];\n    }\n\n    /**\n     * The top-right corner of this bounding box. The returned instance should not be modified directly.\n     *\n     * @readonly\n     */\n    get topRight(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[1];\n    }\n\n    /**\n     * The bottom-right corner of this bounding box. The returned instance should not be modified directly.\n     */\n    get bottomRight(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[2];\n    }\n\n    /**\n     * The bottom-left corner of this bounding box. The returned instance should not be modified directly.\n     */\n    get bottomLeft(): Point\n    {\n        if (this.isDirty()) this.update();\n\n        return this._hull[3];\n    }\n\n    /**\n     * Checks whether the given {@code bounds} are equal to this.\n     *\n     * @param bounds\n     */\n    equals(bounds: OrientedBounds): boolean\n    {\n        if (!bounds) return false;\n\n        return this.innerBounds.equals(bounds.innerBounds)\n            && this.rotation === bounds.rotation;\n    }\n\n    /**\n     * Copies {@code bounds} into this instance.\n     *\n     * @param bounds\n     */\n    copyFrom(bounds: OrientedBounds): this\n    {\n        this.innerBounds.copyFrom(bounds.innerBounds);\n        this.rotation = bounds.rotation;\n        this.dirtyID++;\n\n        return this;\n    }\n\n    /**\n     * Whether any internal state needs to be recalculated.\n     */\n    protected isDirty(): boolean\n    {\n        return this.currentID !== this.dirtyID + this.innerBounds.dirtyID;\n    }\n\n    /**\n     * This will recalculate the center, orientation matrix, and the hull vertices. It should be called only if\n     * {@code this.isDirty} returns true.\n     */\n    protected update(): void\n    {\n        const innerBounds = this.innerBounds;\n        const angle = this._rotation;\n\n        const center = this._center;\n        const [topLeft, topRight, bottomRight, bottomLeft] = this._hull;\n        const matrix = this._matrix;\n\n        // Calculate center\n        // Do not set [x|y] so to prevent this.updateCenter from being fired!\n        center._x = innerBounds.x + (innerBounds.width / 2);\n        center._y = innerBounds.y + (innerBounds.height / 2);\n\n        // Calculate orientation matrix\n        matrix.identity()\n            .translate(-center.x, -center.y)\n            .rotate(angle)\n            .translate(center.x, center.y);\n\n        // Calculate hull vertices\n        matrix.apply(innerBounds.topLeft, topLeft);\n        matrix.apply(innerBounds.topRight, topRight);\n        matrix.apply(innerBounds.bottomRight, bottomRight);\n        matrix.apply(innerBounds.bottomLeft, bottomLeft);\n\n        // Update currentID so isDirty() is false\n        this.currentID = this.dirtyID + this.innerBounds.dirtyID;\n    }\n\n    /**\n     * This will translate {@link this.innerBounds} after {@link this.center} is changed to ensure consistency.\n     */\n    private updateCenter(): void\n    {\n        const center = this.center;\n        const innerBounds = this.innerBounds;\n\n        innerBounds.x = center.x - (innerBounds.width / 2);\n        innerBounds.y = center.y - (innerBounds.height / 2);\n    }\n}\n"],"names":["Point","ObservablePoint","Matrix"],"mappings":"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"}