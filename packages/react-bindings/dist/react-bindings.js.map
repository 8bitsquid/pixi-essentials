{"version":3,"file":"react-bindings.js","sources":["../src/Transformer.ts","../src/utils/applyEventProps.ts"],"sourcesContent":["import { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { PixiComponent } from '@inlet/react-pixi';\nimport { Transformer as TransformerImpl, TransformerHandle as TransformerHandleImpl } from '@pixi-essentials/transformer';\nimport { applyEventProps } from './utils/applyEventProps';\n\nimport type { ITransformerStyle, ITransformerHandleStyle } from '@pixi-essentials/transformer';\nimport type React from 'react';\n\nconst EMPTY: any = {};\n\nconst IDENTITY_MATRIX = Matrix.IDENTITY;// Prevent reinstantation each time\n\n/**\n * @internal\n */\nexport type TransformerProps = {\n    centeredScaling?: boolean;\n    enabledHandles?: Array<string>;\n    group?: DisplayObject[];\n    handleConstructor?: typeof TransformerHandleImpl;\n    handleStyle?: Partial<ITransformerHandleStyle>;\n    projectionTransform?: Matrix;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    transformchange?: () => void;\n    wireframeStyle?: Partial<ITransformerStyle>;\n};\n\n/**\n * @ignore\n */\nconst HANDLER_TO_EVENT = {\n    transformchange: 'transformchange',\n    transformcommit: 'transformcommit',\n};\n\n/**\n * Transformer component\n *\n * @see https://github.com/SukantPal/pixi-essentials/tree/master/packages/transformer\n */\nexport const Transformer: React.FC<TransformerProps> = PixiComponent<TransformerProps, TransformerImpl>('Transformer', {\n    create: (props: TransformerProps): TransformerImpl => new TransformerImpl(props as any),\n    applyProps(instance: TransformerImpl, oldProps: TransformerProps, newProps: TransformerProps): void\n    {\n        applyEventProps(instance, HANDLER_TO_EVENT, oldProps, newProps);\n\n        instance.group = newProps.group || [];\n\n        instance.centeredScaling = newProps.centeredScaling;\n        instance.enabledHandles = newProps.enabledHandles as any;\n        instance.projectionTransform.copyFrom(newProps.projectionTransform || IDENTITY_MATRIX);\n        instance.skewRadius = newProps.skewRadius || instance.skewRadius;\n        instance.rotateEnabled = newProps.rotateEnabled !== false;\n        instance.scaleEnabled = newProps.scaleEnabled !== false;\n        instance.skewEnabled = newProps.skewEnabled === true;\n        instance.translateEnabled = newProps.translateEnabled !== false;\n        instance.transientGroupTilt = newProps.transientGroupTilt;\n\n        if (oldProps.handleConstructor !== newProps.handleConstructor)\n        {\n            throw new Error('Transformer does not support changing the TransformerHandleConstructor!');\n        }\n\n        if (oldProps.rotationSnaps !== newProps.rotationSnaps)\n        {\n            instance.rotationSnaps = newProps.rotationSnaps;\n        }\n        if (oldProps.rotationSnapTolerance !== newProps.rotationSnapTolerance)\n        {\n            instance.rotationSnapTolerance = newProps.rotationSnapTolerance;\n        }\n        if (oldProps.skewSnaps !== newProps.skewSnaps)\n        {\n            instance.skewSnaps = newProps.skewSnaps;\n        }\n        if (oldProps.skewSnapTolerance !== newProps.skewSnapTolerance)\n        {\n            instance.skewSnapTolerance = newProps.skewSnapTolerance;\n        }\n\n        const oldHandleStyle = oldProps.handleStyle || EMPTY;\n        const newHandleStyle = newProps.handleStyle || EMPTY;\n\n        if (oldHandleStyle.color !== newHandleStyle.color\n                || oldHandleStyle.outlineColor !== newHandleStyle.outlineColor\n                || oldHandleStyle.outlineThickness !== newHandleStyle.outlineThickness\n                || oldHandleStyle.radius !== newHandleStyle.radius\n                || oldHandleStyle.shape !== newHandleStyle.shape)\n        {\n            instance.handleStyle = newHandleStyle;\n        }\n\n        const oldWireframeStyle = oldProps.wireframeStyle || EMPTY;\n        const newWireframeStyle = newProps.wireframeStyle || EMPTY;\n\n        if (oldWireframeStyle.color !== newWireframeStyle.color\n            || oldWireframeStyle.thickness !== newWireframeStyle.thickness)\n        {\n            instance.wireframeStyle = newWireframeStyle;\n        }\n    },\n});\n","import type { DisplayObject } from '@pixi/display';\n\n/**\n * Removes old listeners and applies the new ones passed in the props\n *\n * @param displayObject - display-object emitting events\n * @param events - object mapping handler prop-names to the fired events\n * @param oldProps - old props. If calling on first props being passed, this should be `{}`.\n * @param newProps - new props.\n */\nexport function applyEventProps(\n    displayObject: DisplayObject,\n    events: Record<string, string>,\n    oldProps: any,\n    newProps: any,\n): void\n{\n    for (const handlerName in events)\n    {\n        const oldHandler = oldProps[handlerName];\n        const newHandler = newProps[handlerName];\n        const event = events[handlerName];\n\n        if (oldHandler !== newHandler)\n        {\n            if (oldHandler)\n            {\n                displayObject.off(event, oldHandler);\n            }\n\n            if (newHandler)\n            {\n                displayObject.on(event, newHandler);\n            }\n        }\n    }\n}\n"],"names":["EMPTY","IDENTITY_MATRIX","Matrix","IDENTITY","HANDLER_TO_EVENT","transformchange","transformcommit","Transformer","PixiComponent","create","props","TransformerImpl","[object Object]","instance","oldProps","newProps","displayObject","events","handlerName","oldHandler","newHandler","event","off","on","applyEventProps","group","centeredScaling","enabledHandles","projectionTransform","copyFrom","skewRadius","rotateEnabled","scaleEnabled","skewEnabled","translateEnabled","transientGroupTilt","handleConstructor","Error","rotationSnaps","rotationSnapTolerance","skewSnaps","skewSnapTolerance","oldHandleStyle","handleStyle","newHandleStyle","color","outlineColor","outlineThickness","radius","shape","oldWireframeStyle","wireframeStyle","newWireframeStyle","thickness"],"mappings":";;;;;;;;;qGASA,MAAMA,EAAa,GAEbC,EAAkBC,SAAOC,SA6BzBC,EAAmB,CACrBC,gBAAiB,kBACjBC,gBAAiB,mBAQRC,EAA0CC,gBAAiD,cAAe,CACnHC,OAASC,GAA6C,IAAIC,cAAgBD,GAC1EE,WAAWC,EAA2BC,EAA4BC,GAgB9D,YCzDJC,EACAC,EACAH,EACAC,GAGA,IAAK,MAAMG,KAAeD,EAC1B,CACI,MAAME,EAAaL,EAASI,GACtBE,EAAaL,EAASG,GACtBG,EAAQJ,EAAOC,GAEjBC,IAAeC,IAEXD,GAEAH,EAAcM,IAAID,EAAOF,GAGzBC,GAEAJ,EAAcO,GAAGF,EAAOD,KDsBhCI,CAAgBX,EAAUT,EAAkBU,EAAUC,GAEtDF,EAASY,MAAQV,EAASU,OAAS,GAEnCZ,EAASa,gBAAkBX,EAASW,gBACpCb,EAASc,eAAiBZ,EAASY,eACnCd,EAASe,oBAAoBC,SAASd,EAASa,qBAAuB3B,GACtEY,EAASiB,WAAaf,EAASe,YAAcjB,EAASiB,WACtDjB,EAASkB,eAA2C,IAA3BhB,EAASgB,cAClClB,EAASmB,cAAyC,IAA1BjB,EAASiB,aACjCnB,EAASoB,aAAuC,IAAzBlB,EAASkB,YAChCpB,EAASqB,kBAAiD,IAA9BnB,EAASmB,iBACrCrB,EAASsB,mBAAqBpB,EAASoB,mBAEnCrB,EAASsB,oBAAsBrB,EAASqB,kBAExC,MAAM,IAAIC,MAAM,2EAGhBvB,EAASwB,gBAAkBvB,EAASuB,gBAEpCzB,EAASyB,cAAgBvB,EAASuB,eAElCxB,EAASyB,wBAA0BxB,EAASwB,wBAE5C1B,EAAS0B,sBAAwBxB,EAASwB,uBAE1CzB,EAAS0B,YAAczB,EAASyB,YAEhC3B,EAAS2B,UAAYzB,EAASyB,WAE9B1B,EAAS2B,oBAAsB1B,EAAS0B,oBAExC5B,EAAS4B,kBAAoB1B,EAAS0B,mBAG1C,MAAMC,EAAiB5B,EAAS6B,aAAe3C,EACzC4C,EAAiB7B,EAAS4B,aAAe3C,EAE3C0C,EAAeG,QAAUD,EAAeC,OACjCH,EAAeI,eAAiBF,EAAeE,cAC/CJ,EAAeK,mBAAqBH,EAAeG,kBACnDL,EAAeM,SAAWJ,EAAeI,QACzCN,EAAeO,QAAUL,EAAeK,QAE/CpC,EAAS8B,YAAcC,GAG3B,MAAMM,EAAoBpC,EAASqC,gBAAkBnD,EAC/CoD,EAAoBrC,EAASoC,gBAAkBnD,EAEjDkD,EAAkBL,QAAUO,EAAkBP,OAC3CK,EAAkBG,YAAcD,EAAkBC,YAErDxC,EAASsC,eAAiBC"}