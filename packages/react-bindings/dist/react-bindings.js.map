{"version":3,"file":"react-bindings.js","sources":["../src/Transformer.ts"],"sourcesContent":["import { DisplayObject } from '@pixi/display';\nimport { PixiComponent } from '@inlet/react-pixi';\nimport { Transformer as TransformerImpl, TransformerHandle as TransformerHandleImpl } from '@pixi-essentials/transformer';\n\nimport type { ITransformerStyle, ITransformerHandleStyle } from '@pixi-essentials/transformer';\nimport type React from 'react';\n\nconst EMPTY: any = {};\n\n/**\n * @internal\n */\nexport type TransformerProps = {\n    centeredScaling?: boolean;\n    enabledHandles?: Array<string>;\n    group?: DisplayObject[];\n    handleConstructor?: typeof TransformerHandleImpl;\n    handleStyle?: Partial<ITransformerHandleStyle>;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    wireframeStyle?: Partial<ITransformerStyle>;\n};\n\n/**\n * Transformer component\n *\n * @see https://github.com/SukantPal/pixi-essentials/tree/master/packages/transformer\n */\nexport const Transformer: React.FC<TransformerProps> = PixiComponent<TransformerProps, TransformerImpl>('Transformer', {\n    create: (props: TransformerProps): TransformerImpl => new TransformerImpl(props as any),\n    applyProps(instance: TransformerImpl, oldProps: TransformerProps, newProps: TransformerProps): void\n    {\n        instance.group = newProps.group || [];\n\n        instance.centeredScaling = newProps.centeredScaling;\n        instance.enabledHandles = newProps.enabledHandles as any;\n        instance.skewRadius = newProps.skewRadius || instance.skewRadius;\n        instance.rotateEnabled = newProps.rotateEnabled !== false;\n        instance.scaleEnabled = newProps.scaleEnabled !== false;\n        instance.skewEnabled = newProps.skewEnabled === true;\n        instance.translateEnabled = newProps.translateEnabled !== false;\n        instance.transientGroupTilt = newProps.transientGroupTilt;\n\n        if (oldProps.handleConstructor !== newProps.handleConstructor)\n        {\n            throw new Error('Transformer does not support changing the TransformerHandleConstructor!');\n        }\n\n        if (oldProps.rotationSnaps !== newProps.rotationSnaps)\n        {\n            instance.rotationSnaps = newProps.rotationSnaps;\n        }\n        if (oldProps.rotationSnapTolerance !== newProps.rotationSnapTolerance)\n        {\n            instance.rotationSnapTolerance = newProps.rotationSnapTolerance;\n        }\n        if (oldProps.skewSnaps !== newProps.skewSnaps)\n        {\n            instance.skewSnaps = newProps.skewSnaps;\n        }\n        if (oldProps.skewSnapTolerance !== newProps.skewSnapTolerance)\n        {\n            instance.skewSnapTolerance = newProps.skewSnapTolerance;\n        }\n\n        const oldHandleStyle = oldProps.handleStyle || EMPTY;\n        const newHandleStyle = newProps.handleStyle || EMPTY;\n\n        if (oldHandleStyle.color !== newHandleStyle.color\n                || oldHandleStyle.outlineColor !== newHandleStyle.outlineColor\n                || oldHandleStyle.outlineThickness !== newHandleStyle.outlineThickness\n                || oldHandleStyle.radius !== newHandleStyle.radius\n                || oldHandleStyle.shape !== newHandleStyle.shape)\n        {\n            instance.handleStyle = newHandleStyle;\n        }\n\n        const oldWireframeStyle = oldProps.wireframeStyle || EMPTY;\n        const newWireframeStyle = newProps.wireframeStyle || EMPTY;\n\n        if (oldWireframeStyle.color !== newWireframeStyle.color\n            || oldWireframeStyle.thickness !== newWireframeStyle.thickness)\n        {\n            instance.wireframeStyle = newWireframeStyle;\n        }\n    },\n});\n"],"names":["EMPTY","Transformer","PixiComponent","create","props","TransformerImpl","[object Object]","instance","oldProps","newProps","group","centeredScaling","enabledHandles","skewRadius","rotateEnabled","scaleEnabled","skewEnabled","translateEnabled","transientGroupTilt","handleConstructor","Error","rotationSnaps","rotationSnapTolerance","skewSnaps","skewSnapTolerance","oldHandleStyle","handleStyle","newHandleStyle","color","outlineColor","outlineThickness","radius","shape","oldWireframeStyle","wireframeStyle","newWireframeStyle","thickness"],"mappings":";;;;;;;;;mGAOA,MAAMA,EAAa,GA6BNC,EAA0CC,gBAAiD,cAAe,CACnHC,OAASC,GAA6C,IAAIC,cAAgBD,GAC1EE,WAAWC,EAA2BC,EAA4BC,GAa9D,GAXAF,EAASG,MAAQD,EAASC,OAAS,GAEnCH,EAASI,gBAAkBF,EAASE,gBACpCJ,EAASK,eAAiBH,EAASG,eACnCL,EAASM,WAAaJ,EAASI,YAAcN,EAASM,WACtDN,EAASO,eAA2C,IAA3BL,EAASK,cAClCP,EAASQ,cAAyC,IAA1BN,EAASM,aACjCR,EAASS,aAAuC,IAAzBP,EAASO,YAChCT,EAASU,kBAAiD,IAA9BR,EAASQ,iBACrCV,EAASW,mBAAqBT,EAASS,mBAEnCV,EAASW,oBAAsBV,EAASU,kBAExC,MAAM,IAAIC,MAAM,2EAGhBZ,EAASa,gBAAkBZ,EAASY,gBAEpCd,EAASc,cAAgBZ,EAASY,eAElCb,EAASc,wBAA0Bb,EAASa,wBAE5Cf,EAASe,sBAAwBb,EAASa,uBAE1Cd,EAASe,YAAcd,EAASc,YAEhChB,EAASgB,UAAYd,EAASc,WAE9Bf,EAASgB,oBAAsBf,EAASe,oBAExCjB,EAASiB,kBAAoBf,EAASe,mBAG1C,MAAMC,EAAiBjB,EAASkB,aAAe1B,EACzC2B,EAAiBlB,EAASiB,aAAe1B,EAE3CyB,EAAeG,QAAUD,EAAeC,OACjCH,EAAeI,eAAiBF,EAAeE,cAC/CJ,EAAeK,mBAAqBH,EAAeG,kBACnDL,EAAeM,SAAWJ,EAAeI,QACzCN,EAAeO,QAAUL,EAAeK,QAE/CzB,EAASmB,YAAcC,GAG3B,MAAMM,EAAoBzB,EAAS0B,gBAAkBlC,EAC/CmC,EAAoB1B,EAASyB,gBAAkBlC,EAEjDiC,EAAkBL,QAAUO,EAAkBP,OAC3CK,EAAkBG,YAAcD,EAAkBC,YAErD7B,EAAS2B,eAAiBC"}