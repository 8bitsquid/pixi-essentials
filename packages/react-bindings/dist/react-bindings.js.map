{"version":3,"file":"react-bindings.js","sources":["../src/utils/applyEventProps.ts","../src/Transformer.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\n/**\n * Removes old listeners and applies the new ones passed in the props\n *\n * @param displayObject - display-object emitting events\n * @param events - object mapping handler prop-names to the fired events\n * @param oldProps - old props. If calling on first props being passed, this should be `{}`.\n * @param newProps - new props.\n */\nexport function applyEventProps(\n    displayObject: DisplayObject,\n    events: Record<string, string>,\n    oldProps: any,\n    newProps: any,\n): void\n{\n    for (const handlerName in events)\n    {\n        const oldHandler = oldProps[handlerName];\n        const newHandler = newProps[handlerName];\n        const event = events[handlerName];\n\n        if (oldHandler !== newHandler)\n        {\n            if (oldHandler)\n            {\n                displayObject.off(event, oldHandler);\n            }\n\n            if (newHandler)\n            {\n                displayObject.on(event, newHandler);\n            }\n        }\n    }\n}\n","import { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { PixiComponent } from '@inlet/react-pixi';\nimport { Transformer as TransformerImpl, TransformerHandle as TransformerHandleImpl } from '@pixi-essentials/transformer';\nimport { applyEventProps } from './utils/applyEventProps';\n\nimport type { ITransformerStyle, ITransformerHandleStyle } from '@pixi-essentials/transformer';\nimport type React from 'react';\n\nconst EMPTY: any = {};\n\nconst IDENTITY_MATRIX = Matrix.IDENTITY;// Prevent reinstantation each time\n\n/**\n * @internal\n */\nexport type TransformerProps = {\n    centeredScaling?: boolean;\n    enabledHandles?: Array<string>;\n    group?: DisplayObject[];\n    handleConstructor?: typeof TransformerHandleImpl;\n    handleStyle?: Partial<ITransformerHandleStyle>;\n    projectionTransform?: Matrix;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    transformchange?: () => void;\n    wireframeStyle?: Partial<ITransformerStyle>;\n};\n\n/**\n * @ignore\n */\nconst HANDLER_TO_EVENT = {\n    transformchange: 'transformchange',\n};\n\n/**\n * Transformer component\n *\n * @see https://github.com/SukantPal/pixi-essentials/tree/master/packages/transformer\n */\nexport const Transformer: React.FC<TransformerProps> = PixiComponent<TransformerProps, TransformerImpl>('Transformer', {\n    create: (props: TransformerProps): TransformerImpl =>\n    {\n        const transformerImpl = new TransformerImpl(props as any);\n\n        applyEventProps(transformerImpl, HANDLER_TO_EVENT, {}, props);\n\n        return transformerImpl;\n    },\n    applyProps(instance: TransformerImpl, oldProps: TransformerProps, newProps: TransformerProps): void\n    {\n        applyEventProps(instance, HANDLER_TO_EVENT, oldProps, newProps);\n\n        instance.group = newProps.group || [];\n\n        instance.centeredScaling = newProps.centeredScaling;\n        instance.enabledHandles = newProps.enabledHandles as any;\n        instance.projectionTransform.copyFrom(newProps.projectionTransform || IDENTITY_MATRIX);\n        instance.skewRadius = newProps.skewRadius || instance.skewRadius;\n        instance.rotateEnabled = newProps.rotateEnabled !== false;\n        instance.scaleEnabled = newProps.scaleEnabled !== false;\n        instance.skewEnabled = newProps.skewEnabled === true;\n        instance.translateEnabled = newProps.translateEnabled !== false;\n        instance.transientGroupTilt = newProps.transientGroupTilt;\n\n        if (oldProps.handleConstructor !== newProps.handleConstructor)\n        {\n            throw new Error('Transformer does not support changing the TransformerHandleConstructor!');\n        }\n\n        if (oldProps.rotationSnaps !== newProps.rotationSnaps)\n        {\n            instance.rotationSnaps = newProps.rotationSnaps;\n        }\n        if (oldProps.rotationSnapTolerance !== newProps.rotationSnapTolerance)\n        {\n            instance.rotationSnapTolerance = newProps.rotationSnapTolerance;\n        }\n        if (oldProps.skewSnaps !== newProps.skewSnaps)\n        {\n            instance.skewSnaps = newProps.skewSnaps;\n        }\n        if (oldProps.skewSnapTolerance !== newProps.skewSnapTolerance)\n        {\n            instance.skewSnapTolerance = newProps.skewSnapTolerance;\n        }\n\n        const oldHandleStyle = oldProps.handleStyle || EMPTY;\n        const newHandleStyle = newProps.handleStyle || EMPTY;\n\n        if (oldHandleStyle.color !== newHandleStyle.color\n                || oldHandleStyle.outlineColor !== newHandleStyle.outlineColor\n                || oldHandleStyle.outlineThickness !== newHandleStyle.outlineThickness\n                || oldHandleStyle.radius !== newHandleStyle.radius\n                || oldHandleStyle.shape !== newHandleStyle.shape)\n        {\n            instance.handleStyle = newHandleStyle;\n        }\n\n        const oldWireframeStyle = oldProps.wireframeStyle || EMPTY;\n        const newWireframeStyle = newProps.wireframeStyle || EMPTY;\n\n        if (oldWireframeStyle.color !== newWireframeStyle.color\n            || oldWireframeStyle.thickness !== newWireframeStyle.thickness)\n        {\n            instance.wireframeStyle = newWireframeStyle;\n        }\n    },\n});\n"],"names":["applyEventProps","displayObject","events","oldProps","newProps","handlerName","oldHandler","newHandler","event","off","on","EMPTY","IDENTITY_MATRIX","Matrix","IDENTITY","HANDLER_TO_EVENT","transformchange","Transformer","PixiComponent","create","props","transformerImpl","TransformerImpl","[object Object]","instance","group","centeredScaling","enabledHandles","projectionTransform","copyFrom","skewRadius","rotateEnabled","scaleEnabled","skewEnabled","translateEnabled","transientGroupTilt","handleConstructor","Error","rotationSnaps","rotationSnapTolerance","skewSnaps","skewSnapTolerance","oldHandleStyle","handleStyle","newHandleStyle","color","outlineColor","outlineThickness","radius","shape","oldWireframeStyle","wireframeStyle","newWireframeStyle","thickness"],"mappings":";;;;;;;;;8GAUgBA,EACZC,EACAC,EACAC,EACAC,GAGA,IAAK,MAAMC,KAAeH,EAC1B,CACI,MAAMI,EAAaH,EAASE,GACtBE,EAAaH,EAASC,GACtBG,EAAQN,EAAOG,GAEjBC,IAAeC,IAEXD,GAEAL,EAAcQ,IAAID,EAAOF,GAGzBC,GAEAN,EAAcS,GAAGF,EAAOD,KCvBxC,MAAMI,EAAa,GAEbC,EAAkBC,SAAOC,SA6BzBC,EAAmB,CACrBC,gBAAiB,mBAQRC,EAA0CC,gBAAiD,cAAe,CACnHC,OAASC,IAEL,MAAMC,EAAkB,IAAIC,cAAgBF,GAI5C,OAFApB,EAAgBqB,EAAiBN,EAAkB,GAAIK,GAEhDC,GAEXE,WAAWC,EAA2BrB,EAA4BC,GAgB9D,GAdAJ,EAAgBwB,EAAUT,EAAkBZ,EAAUC,GAEtDoB,EAASC,MAAQrB,EAASqB,OAAS,GAEnCD,EAASE,gBAAkBtB,EAASsB,gBACpCF,EAASG,eAAiBvB,EAASuB,eACnCH,EAASI,oBAAoBC,SAASzB,EAASwB,qBAAuBhB,GACtEY,EAASM,WAAa1B,EAAS0B,YAAcN,EAASM,WACtDN,EAASO,eAA2C,IAA3B3B,EAAS2B,cAClCP,EAASQ,cAAyC,IAA1B5B,EAAS4B,aACjCR,EAASS,aAAuC,IAAzB7B,EAAS6B,YAChCT,EAASU,kBAAiD,IAA9B9B,EAAS8B,iBACrCV,EAASW,mBAAqB/B,EAAS+B,mBAEnChC,EAASiC,oBAAsBhC,EAASgC,kBAExC,MAAM,IAAIC,MAAM,2EAGhBlC,EAASmC,gBAAkBlC,EAASkC,gBAEpCd,EAASc,cAAgBlC,EAASkC,eAElCnC,EAASoC,wBAA0BnC,EAASmC,wBAE5Cf,EAASe,sBAAwBnC,EAASmC,uBAE1CpC,EAASqC,YAAcpC,EAASoC,YAEhChB,EAASgB,UAAYpC,EAASoC,WAE9BrC,EAASsC,oBAAsBrC,EAASqC,oBAExCjB,EAASiB,kBAAoBrC,EAASqC,mBAG1C,MAAMC,EAAiBvC,EAASwC,aAAehC,EACzCiC,EAAiBxC,EAASuC,aAAehC,EAE3C+B,EAAeG,QAAUD,EAAeC,OACjCH,EAAeI,eAAiBF,EAAeE,cAC/CJ,EAAeK,mBAAqBH,EAAeG,kBACnDL,EAAeM,SAAWJ,EAAeI,QACzCN,EAAeO,QAAUL,EAAeK,QAE/CzB,EAASmB,YAAcC,GAG3B,MAAMM,EAAoB/C,EAASgD,gBAAkBxC,EAC/CyC,EAAoBhD,EAAS+C,gBAAkBxC,EAEjDuC,EAAkBL,QAAUO,EAAkBP,OAC3CK,EAAkBG,YAAcD,EAAkBC,YAErD7B,EAAS2B,eAAiBC"}