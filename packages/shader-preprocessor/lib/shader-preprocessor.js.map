{"version":3,"file":"shader-preprocessor.js","sources":["../src/ProgramTemplate.ts","../src/ShaderPreprocessor.ts"],"sourcesContent":["import { Program } from '@pixi/core';\n\ntype TemplateData = Array<{\n    id: string;\n    args: string[];\n    position: { start: number; end: number };\n    type: 'field' | 'function';\n}>;\n\nexport type MacroData = {\n    [id: string]: string | ((...args: string[]) => string);\n};\n\nconst MACRO_PATTERN = /%([\\w$]+)(\\([\\w$, ]*\\))?%/g;\n\n/**\n * Helper class to create and manage a program template.\n *\n * @public\n */\nexport class ProgramTemplate\n{\n    public vertexTemplateSrc: string;\n    public fragmentTemplateSrc: string;\n    public name: string;\n\n    protected programCache: Map<string, Program>;\n    protected vertexMacroData: TemplateData;\n    protected fragmentMacroData: TemplateData;\n\n    /**\n     * @param vertexTemplateSrc - vertex shader template\n     * @param fragmentTemplateSrc - fragment shader template\n     * @param name - name of the shader template. This is used to generate the names for generated programs.\n     */\n    constructor(vertexTemplateSrc?: string, fragmentTemplateSrc?: string, name = 'pixi-shader-template')\n    {\n        /**\n         * The vertex shader template\n         */\n        this.vertexTemplateSrc = vertexTemplateSrc || Program.defaultVertexSrc;\n\n        /**\n         * The fragment shader template\n         */\n        this.fragmentTemplateSrc = fragmentTemplateSrc || Program.defaultFragmentSrc;\n\n        /**\n         * The name for generated programs\n         */\n        this.name = name;\n\n        /**\n         * The cache of generated programs for each passed macro value.\n         */\n        this.programCache = new Map<string, Program>();\n\n        /**\n         * The macros used in the vertex shader\n         */\n        this.vertexMacroData = this.extractData(this.vertexTemplateSrc);\n\n        /**\n         * The macros used in the fragment shader\n         */\n        this.fragmentMacroData = this.extractData(this.fragmentTemplateSrc);\n    }\n\n    /**\n     * Generates a shader program from this template and passed macro-data.\n     *\n     * @param data - data providing the values of the macros in the shader template\n     * @param name - optional name, if another name is desired\n     * @return the generated shader program\n     */\n    generateProgram(data: MacroData, name: string): Program\n    {\n        const vertexSrc = this.processData(this.vertexTemplateSrc, this.vertexMacroData, data);\n        const fragmentSrc = this.processData(this.fragmentTemplateSrc, this.fragmentMacroData, data);\n        const key = vertexSrc + fragmentSrc;\n        const memo = this.programCache.get(key);\n\n        if (memo)\n        {\n            return memo;\n        }\n\n        const program = new Program(vertexSrc, fragmentSrc, name || this.name || 'pixi-processed-shader');\n\n        this.programCache.set(key, program);\n\n        return program;\n    }\n\n    /**\n     * Extracts the macros used in the template source.\n     *\n     * @param templateSrc - the shader template source\n     */\n    protected extractData(templateSrc: string): TemplateData\n    {\n        const data = [];\n        const pattern = new RegExp(MACRO_PATTERN);\n\n        let macroMatch;\n\n        while ((macroMatch = pattern.exec(templateSrc)) !== null)\n        {\n            const id = macroMatch[1];\n            let args = macroMatch[2];\n\n            if (args)\n            {\n                args = args.slice(1, -1).split(',').map((arg) => arg.trim());\n            }\n\n            data.push({\n                id,\n                args,\n                position: { start: macroMatch.index, end: macroMatch.index + macroMatch[0].length },\n                type: args ? 'function' : 'field',\n            });\n        }\n\n        return data;\n    }\n\n    /**\n     * Evaluates the macros in the template and generates the shader's source.\n     *\n     * @param templateSrc - template source\n     * @param macros - data defining the macros in the template source\n     * @param data - data providing the values for the macros\n     * @return the generated shader source\n     */\n    protected processData(templateSrc: string, macros: TemplateData, data: MacroData): string\n    {\n        let generatedSrc = templateSrc;\n\n        // Process the last macros first so that positions of the unevaluated macros don't change\n        for (let i = macros.length - 1; i >= 0; i--)\n        {\n            const macro = macros[i];\n            const id = macro.id;\n            const value = data[id];\n\n            let macroValue = '';\n\n            if (typeof value === 'function')\n            {\n                macroValue = value(...macro.args);\n            }\n            else\n            {\n                // Coerce the value to a string\n                macroValue = `${value}`;\n            }\n\n            generatedSrc = generatedSrc.slice(0, macro.position.start)\n                + macroValue\n                + generatedSrc.slice(macro.position.end);\n        }\n\n        return generatedSrc;\n    }\n}\n","import { MacroData, ProgramTemplate } from './ProgramTemplate';\nimport { Shader } from '@pixi/core';\n\n/**\n * Provides a high-level API to manage program template and generate shaders by passing macro data\n * for the shader templates.\n *\n * @public\n */\nexport class ShaderPreprocessor\n{\n    /**\n     * @param vertexTemplateSrc - the vertex shader template source\n     * @param fragmentTemplateSrc  - the fragment shader template source\n     * @param name - custom name of the shader, if desired\n     */\n    static generateShader(vertexTemplateSrc: string,\n        fragmentTemplateSrc: string,\n        uniforms: Record<string, any>,\n        data: MacroData, name?: string): Shader\n    {\n        const programTemplate = ShaderPreprocessor.from(vertexTemplateSrc, fragmentTemplateSrc, name);\n        const program = programTemplate.generateProgram(data, name);\n\n        return new Shader(program, uniforms);\n    }\n\n    /**\n     * Creates a program template for given shader template sources. It will return a memoized instance if\n     * the same sources are used together twice.\n     *\n     * @param vertexTemplateSrc - vertex template source\n     * @param fragmentTemplateSrc - fragment template source\n     * @param name - the name of the template\n     */\n    static from(vertexTemplateSrc: string, fragmentTemplateSrc: string, name?: string): ProgramTemplate\n    {\n        const key = vertexTemplateSrc + fragmentTemplateSrc;\n        let template = ShaderPreprocessor.managedTemplates[key];\n\n        if (!template)\n        {\n            template\n                = ShaderPreprocessor.managedTemplates[key]\n                = new ProgramTemplate(vertexTemplateSrc, fragmentTemplateSrc, name);\n        }\n\n        return template;\n    }\n\n    static managedTemplates: { [id: string]: ProgramTemplate } = {};\n}\n"],"names":["Program","Shader"],"mappings":"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"}