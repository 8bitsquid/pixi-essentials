{"version":3,"file":"instanced-renderer.mjs","sources":["../src/InstancedRenderer.ts","../src/InstancedRendererPluginFactory.ts"],"sourcesContent":["import { Buffer, ObjectRenderer, Renderer, Geometry, Shader, State, ViewableBuffer } from '@pixi/core';\nimport { TYPES, DRAW_MODES } from '@pixi/constants';\nimport { log2, nextPow2 } from '@pixi/utils';\n\nconst _instanceID = 0;\nlet _instanceRendererID = 0;\n\n/**\n * {@code InstancedRenderer} is an object-renderer for drawing meshes/shapes/display-objects\n * that have a common geometry and some \"instanced\" attributes.\n *\n * @class\n * @extends PIXI.ObjectRenderer\n */\nexport class InstancedRenderer extends ObjectRenderer\n{\n    public renderer: Renderer;// @pixi/core doesn't have types yet :<\n    public readonly instanceRendererID: string;\n\n    protected _instanceBuilder: Record<string, string>;\n    protected _geometry: Geometry;\n    protected _shader: Shader;\n    protected _state: State;\n\n    protected _objectBuffer: Array<{[id: string]: string}>;\n    protected _objectCount: number;\n\n    protected _instanceBuffer: Buffer;\n    protected _instanceBufferHash: number;\n\n    protected readonly _instanceAttribSizes: Record<string, number>;\n    protected readonly _instanceSize: number;\n    private _aBuffers: ViewableBuffer[] = [];\n    private _instanceAttribViews: Record<string, string> ;\n\n    /**\n     * @param {PIXI.Renderer} renderer - the WebGL renderer to attach to\n     * @param {PIXI.IInstancedRendererOptions} options - the pipeline description\n     */\n    constructor(renderer: Renderer, options: IInstancedRendererOptions)\n    {\n        super(renderer);\n\n        /**\n         * Unique ID for this instance renderer.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this.instanceRendererID = `instanceRenderer-${_instanceRendererID++}-ID`;\n\n        /**\n         * Maps display-object property names holding instanced attribute data to their attribute\n         * names.\n         *\n         * @protected\n         * @member {Object<string, string>}\n         */\n        this._instanceBuilder = options.instanceBuilder;\n\n        /**\n         * The reference geometry specifying the \"attribute style\".\n         *\n         * @protected\n         * @member {PIXI.Geometry}\n         */\n        this._geometry = options.geometry;\n\n        /**\n         * The shader used to draw all instances.\n         *\n         * @member {PIXI.Shader}\n         */\n        this._shader = options.shader;\n\n        /**\n         * The WebGL state required for using the shader.\n         *\n         * @default PIXI.State.for2d()\n         * @member {PIXI.State}\n         */\n        this._state = options.state || State.for2d();\n\n        /**\n         * Object mapping (instanced) attribute IDs to their sizes in bytes.\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, number>}\n         */\n        this._instanceAttribSizes = {};\n\n        /**\n         * Object mapping (instanced) attribute IDs to their data type views (i.e. `uint32View`,\n         * `float32View`, `uint8View`, etc. in `PIXI.ViewableBuffer`).\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, string>}\n         */\n        this._instanceAttribViews = {};\n\n        /**\n         * The bytes used per instance/display-object.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this._instanceSize = this._calculateInstanceSizesAndViews();\n\n        /**\n         * Buffered display-objects\n         *\n         * @protected\n         * @member {PIXI.DisplayObject[]}\n         */\n        this._objectBuffer = [];\n\n        /**\n         * The number of display-objects buffered. This is different from the buffer's capacity\n         * {@code this._objectBuffer.length}.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._objectCount = 0;\n\n        // NOTE: _initInstanceBuffer() also clones this._geometry and replaces it.\n        this._initInstanceBuffer();\n    }\n\n    /**\n     * @override\n     */\n    start()\n    {\n        this._objectCount = 0;\n    }\n\n    /**\n     * @override\n     * @param {PIXI.DisplayObject} displayObject\n     */\n    render(displayObject: { [id: string]: string }): void\n    {\n        this._objectBuffer[this._objectCount] = displayObject;\n        ++this._objectCount;\n    }\n\n    /**\n     * Flushes/draws all pending display-objects.\n     *\n     * @override\n     */\n    flush(): void\n    {\n        const instanceBuilder = this._instanceBuilder;\n        const instanceSize = this._instanceSize;\n        const instanceBuffer = this._getBuffer(this._objectCount * this._instanceSize);\n\n        // TODO: Optimize this by compiling a function that doesn't loop through each attribute\n        // by rolling the loop\n        for (let i = 0; i < this._objectCount; i++)\n        {\n            let rsize = 0;\n            const object = this._objectBuffer[i];\n\n            for (const attribID in this._instanceBuilder)\n            {\n                const attribute = this._geometry.attributes[attribID];\n\n                if (!attribute.instance)\n                {\n                    continue;\n                }\n\n                const attribSize = attribute.size;\n                const view = instanceBuffer[this._instanceAttribViews[attribID]];\n                const size = this._instanceAttribSizes[attribID];\n\n                const index = (i * instanceSize + rsize) / size;\n                const prop = instanceBuilder[attribID];\n\n                if (attribSize === 1)\n                {\n                    view[index] = object[prop];\n                }\n                else\n                {\n                    for (let j = 0; j < attribSize; j++)\n                    {\n                        view[index + j] = object[prop][j];\n                    }\n                }\n\n                rsize += size;\n            }\n        }\n\n        this._instanceBuffer.update(instanceBuffer.rawBinaryData);\n\n        const renderer = this.renderer;\n\n        renderer.shader.bind(this._shader);\n        renderer.geometry.bind(this._geometry);\n        renderer.state.set(this._state);\n\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, undefined, undefined, this._objectCount);\n\n        this._objectCount = 0;\n    }\n\n    /**\n     * Returns a (cached) buffer that can hold {@code size} bytes.\n     *\n     * @param {number} size - required capacity in bytes\n     * @return {ViewableBuffer} - buffer than can hold atleast `size` floats\n     * @private\n     */\n    protected _getBuffer(size: number): ViewableBuffer\n    {\n        const roundedP2 = nextPow2(Math.ceil(size));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Returns the no. of bytes used for each instance.\n     *\n     * @private\n     * @returns {number}\n     */\n    private _calculateInstanceSizesAndViews(): number\n    {\n        let totalSize = 0;\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n\n            if (!attribute.instance)\n            {\n                continue;\n            }\n\n            let typeSize = 0;\n            let view;\n\n            switch (attribute.type)\n            {\n                case TYPES.UNSIGNED_BYTE:\n                    typeSize = 1;\n                    view = 'uint8View';\n                    break;\n                case TYPES.UNSIGNED_SHORT:\n                case TYPES.UNSIGNED_SHORT_5_6_5:\n                case TYPES.UNSIGNED_SHORT_4_4_4_4:\n                case TYPES.UNSIGNED_SHORT_5_5_5_1:\n                case TYPES.HALF_FLOAT:\n                    typeSize = 2;\n                    view = 'uint16View';// TODO: HALF_FLOAT will not work\n                    break;\n                case TYPES.FLOAT:\n                    typeSize = 4;\n                    view = 'float32View';\n                    break;\n            }\n\n            const byteSize = attribute.size * typeSize;\n\n            this._instanceAttribViews[attribID] = view;\n            this._instanceAttribSizes[attribID] = byteSize;\n            totalSize += byteSize;\n        }\n\n        return totalSize;\n    }\n\n    /**\n     * Replaces {@code this._geometry} with a new geometry such that each instanced attribute\n     * points to the same buffer. Uninstanced attributes refer to their original buffers.\n     */\n    private _initInstanceBuffer(): void\n    {\n        /**\n         * The instance buffer holds all instanced attributes in an interleaved fashion.\n         *\n         * @member {PIXI.Buffer}\n         */\n        this._instanceBuffer = new Buffer();\n\n        const clonedGeometry = new Geometry();\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n            const instance = attribute.instance;\n\n            console.log(attribID);\n            console.log(this._geometry.buffers[attribute.buffer]);\n\n            clonedGeometry.addAttribute(\n                attribID,\n                instance ? this._instanceBuffer : this._geometry.buffers[attribute.buffer],\n                attribute.size,\n                attribute.normalized,\n                attribute.type,\n                instance ? attribute.start : undefined,\n                instance ? attribute.stride : undefined,\n                attribute.instance,\n            );\n        }\n\n        this._geometry = clonedGeometry;\n    }\n}\n\nexport interface IInstancedRendererOptions\n{\n    instanceBuilder: Record<string, string>;\n    geometry: Geometry;\n    shader: Shader;\n    state?: State;\n}\n\n/**\n * This options define how display-objects are rendered by the instanced renderer.\n *\n * NOTE:\n *\n * + Make sure your instanceBuilder is in the order you want attributes to be packed\n * in the same buffer. Also, make sure that floats are aligned at 4-byte boundaries and\n * shorts are aligned at 2-byte boundaries.\n *\n * + PixiJS Bug: Make sure the first attribute is **not** instanced.\n *\n * @memberof PIXI\n * @interface IInstancedRendererOptions\n * @property {Object<string, string>} instanceBuilder - an object mapping display-object\n *      properties holding \"instance attributes\" from their attribute name.\n * @property {Geometry} geometry - the geometry style used to render the display-objects\n * @property {Shader} shader - the shader used to render display-objects\n * @property {State}[state] - the WebGL state used to run the shader\n * @example\n * {\n *     instanceBuilder: {\n *         aVertexPosition: '_vertexData'\n *     },\n *     geometry: new PIXI.Geometry()\n *              .addAttribute('aVertexPosition', null, 2, false, TYPES.FLOAT, 0, 0, false)\n *              .addAttribute('aWorldTransform', null, 2, false, TYPES.FLOAT, 0, 0, true)\n *     shader: new PIXI.Shader(<vertexShaderSrc>, <fragmentShaderSrc>, <uniformData>),\n *     state: PIXI.State.for2d() // that's the default\n * }\n */\n","import { InstancedRenderer, IInstancedRendererOptions } from './InstancedRenderer';\nimport { Renderer } from '@pixi/core';\n\n/**\n * @class\n * @example\n * import { InstancedRendererPluginFactory } from '[at]pixi-essentials/instanced-renderer';\n * import { Renderer, Shader, Geometry, TYPES } from 'pixi.js';\n *\n * const spriteRenderer = InstancedRendererPluginFactory.from({\n *     instanceBuilder: {\n *         aVertexPosition: \"_vertexData\"\n *     },\n *     geometry: new Geometry().\n *         addAttribute(\"aVertexPosition\", new Float32Array(\n *             0, 0,\n *             100, 0,\n *             100, 100,\n *             100, 100,\n *             0, 100,\n *             0, 0\n *         ), 2, false, TYPES.FLOAT, 0, 0, true),\n *     shader: new Shader(\n *       `\n * attribute vec2 aVertexPosition;\n * uniform mat3 projectionMatrix;\n *\n * void main(void)\n * {\n *     gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1)).xy, 0, 1);\n * }\n * `,\n * `\n * void main(void)\n * {\n *     gl_FragColor = vec4(.5, 1, .2, 1);// some random color\n * }\n * `,\n * {} // you can add uniforms\n *     )\n * });\n */\nexport class InstancedRendererPluginFactory\n{\n    /**\n     * Returns a plugin wrapping an instanced renderer that can be registered.\n     *\n     * @param {IInstancedRendererOptions} options\n     * @returns {PIXI.PluginConstructor}\n     */\n    public static from(options: IInstancedRendererOptions): typeof InstancedRenderer\n    {\n        return class extends InstancedRenderer\n        {\n            constructor(renderer: Renderer)\n            {\n                super(renderer, options);\n            }\n        };\n    }\n}\n"],"names":[],"mappings":"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"}