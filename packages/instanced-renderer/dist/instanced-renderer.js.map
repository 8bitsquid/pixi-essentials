{"version":3,"file":"instanced-renderer.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/InstancedRenderer.ts","../src/InstancedRendererPluginFactory.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Buffer, ObjectRenderer, Renderer, Geometry, Shader, State, ViewableBuffer } from '@pixi/core';\nimport { TYPES, DRAW_MODES } from '@pixi/constants';\nimport { log2, nextPow2 } from '@pixi/utils';\n\nconst _instanceID = 0;\nlet _instanceRendererID = 0;\n\n/**\n * {@code InstancedRenderer} is an object-renderer for drawing meshes/shapes/display-objects\n * that have a common geometry and some \"instanced\" attributes.\n *\n * @class\n * @extends PIXI.ObjectRenderer\n */\nexport class InstancedRenderer extends ObjectRenderer\n{\n    public renderer: Renderer;// @pixi/core doesn't have types yet :<\n    public readonly instanceRendererID: string;\n\n    protected _instanceBuilder: Record<string, string>;\n    protected _geometry: Geometry;\n    protected _shader: Shader;\n    protected _state: State;\n\n    protected _objectBuffer: Array<{[id: string]: string}>;\n    protected _objectCount: number;\n\n    protected _instanceBuffer: Buffer;\n    protected _instanceBufferHash: number;\n\n    protected readonly _instanceAttribSizes: Record<string, number>;\n    protected readonly _instanceSize: number;\n    private _aBuffers: ViewableBuffer[] = [];\n    private _instanceAttribViews: Record<string, string> ;\n\n    /**\n     * @param {PIXI.Renderer} renderer - the WebGL renderer to attach to\n     * @param {PIXI.IInstancedRendererOptions} options - the pipeline description\n     */\n    constructor(renderer: Renderer, options: IInstancedRendererOptions)\n    {\n        super(renderer);\n\n        /**\n         * Unique ID for this instance renderer.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this.instanceRendererID = `instanceRenderer-${_instanceRendererID++}-ID`;\n\n        /**\n         * Maps display-object property names holding instanced attribute data to their attribute\n         * names.\n         *\n         * @protected\n         * @member {Object<string, string>}\n         */\n        this._instanceBuilder = options.instanceBuilder;\n\n        /**\n         * The reference geometry specifying the \"attribute style\".\n         *\n         * @protected\n         * @member {PIXI.Geometry}\n         */\n        this._geometry = options.geometry;\n\n        /**\n         * The shader used to draw all instances.\n         *\n         * @member {PIXI.Shader}\n         */\n        this._shader = options.shader;\n\n        /**\n         * The WebGL state required for using the shader.\n         *\n         * @default PIXI.State.for2d()\n         * @member {PIXI.State}\n         */\n        this._state = options.state || State.for2d();\n\n        /**\n         * Object mapping (instanced) attribute IDs to their sizes in bytes.\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, number>}\n         */\n        this._instanceAttribSizes = {};\n\n        /**\n         * Object mapping (instanced) attribute IDs to their data type views (i.e. `uint32View`,\n         * `float32View`, `uint8View`, etc. in `PIXI.ViewableBuffer`).\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, string>}\n         */\n        this._instanceAttribViews = {};\n\n        /**\n         * The bytes used per instance/display-object.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this._instanceSize = this._calculateInstanceSizesAndViews();\n\n        /**\n         * Buffered display-objects\n         *\n         * @protected\n         * @member {PIXI.DisplayObject[]}\n         */\n        this._objectBuffer = [];\n\n        /**\n         * The number of display-objects buffered. This is different from the buffer's capacity\n         * {@code this._objectBuffer.length}.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._objectCount = 0;\n\n        // NOTE: _initInstanceBuffer() also clones this._geometry and replaces it.\n        this._initInstanceBuffer();\n    }\n\n    /**\n     * @override\n     */\n    start()\n    {\n        this._objectCount = 0;\n    }\n\n    /**\n     * @override\n     * @param {PIXI.DisplayObject} displayObject\n     */\n    render(displayObject: { [id: string]: string }): void\n    {\n        this._objectBuffer[this._objectCount] = displayObject;\n        ++this._objectCount;\n    }\n\n    /**\n     * Flushes/draws all pending display-objects.\n     *\n     * @override\n     */\n    flush(): void\n    {\n        const instanceBuilder = this._instanceBuilder;\n        const instanceSize = this._instanceSize;\n        const instanceBuffer = this._getBuffer(this._objectCount * this._instanceSize);\n\n        // TODO: Optimize this by compiling a function that doesn't loop through each attribute\n        // by rolling the loop\n        for (let i = 0; i < this._objectCount; i++)\n        {\n            let rsize = 0;\n            const object = this._objectBuffer[i];\n\n            for (const attribID in this._instanceBuilder)\n            {\n                const attribute = this._geometry.attributes[attribID];\n\n                if (!attribute.instance)\n                {\n                    continue;\n                }\n\n                const attribSize = attribute.size;\n                const view = instanceBuffer[this._instanceAttribViews[attribID]];\n                const size = this._instanceAttribSizes[attribID];\n\n                const index = (i * instanceSize + rsize) / size;\n                const prop = instanceBuilder[attribID];\n\n                if (attribSize === 1)\n                {\n                    view[index] = object[prop];\n                }\n                else\n                {\n                    for (let j = 0; j < attribSize; j++)\n                    {\n                        view[index + j] = object[prop][j];\n                    }\n                }\n\n                rsize += size;\n            }\n        }\n\n        this._instanceBuffer.update(instanceBuffer.rawBinaryData);\n\n        const renderer = this.renderer;\n\n        renderer.shader.bind(this._shader);\n        renderer.geometry.bind(this._geometry);\n        renderer.state.set(this._state);\n\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, undefined, undefined, this._objectCount);\n\n        this._objectCount = 0;\n    }\n\n    /**\n     * Returns a (cached) buffer that can hold {@code size} bytes.\n     *\n     * @param {number} size - required capacity in bytes\n     * @return {ViewableBuffer} - buffer than can hold atleast `size` floats\n     * @private\n     */\n    protected _getBuffer(size: number): ViewableBuffer\n    {\n        const roundedP2 = nextPow2(Math.ceil(size));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Returns the no. of bytes used for each instance.\n     *\n     * @private\n     * @returns {number}\n     */\n    private _calculateInstanceSizesAndViews(): number\n    {\n        let totalSize = 0;\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n\n            if (!attribute.instance)\n            {\n                continue;\n            }\n\n            let typeSize = 0;\n            let view;\n\n            switch (attribute.type)\n            {\n                case TYPES.UNSIGNED_BYTE:\n                    typeSize = 1;\n                    view = 'uint8View';\n                    break;\n                case TYPES.UNSIGNED_SHORT:\n                case TYPES.UNSIGNED_SHORT_5_6_5:\n                case TYPES.UNSIGNED_SHORT_4_4_4_4:\n                case TYPES.UNSIGNED_SHORT_5_5_5_1:\n                case TYPES.HALF_FLOAT:\n                    typeSize = 2;\n                    view = 'uint16View';// TODO: HALF_FLOAT will not work\n                    break;\n                case TYPES.FLOAT:\n                    typeSize = 4;\n                    view = 'float32View';\n                    break;\n            }\n\n            const byteSize = attribute.size * typeSize;\n\n            this._instanceAttribViews[attribID] = view;\n            this._instanceAttribSizes[attribID] = byteSize;\n            totalSize += byteSize;\n        }\n\n        return totalSize;\n    }\n\n    /**\n     * Replaces {@code this._geometry} with a new geometry such that each instanced attribute\n     * points to the same buffer. Uninstanced attributes refer to their original buffers.\n     */\n    private _initInstanceBuffer(): void\n    {\n        /**\n         * The instance buffer holds all instanced attributes in an interleaved fashion.\n         *\n         * @member {PIXI.Buffer}\n         */\n        this._instanceBuffer = new Buffer();\n\n        const clonedGeometry = new Geometry();\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n            const instance = attribute.instance;\n\n            console.log(attribID);\n            console.log(this._geometry.buffers[attribute.buffer]);\n\n            clonedGeometry.addAttribute(\n                attribID,\n                instance ? this._instanceBuffer : this._geometry.buffers[attribute.buffer],\n                attribute.size,\n                attribute.normalized,\n                attribute.type,\n                instance ? attribute.start : undefined,\n                instance ? attribute.stride : undefined,\n                attribute.instance,\n            );\n        }\n\n        this._geometry = clonedGeometry;\n    }\n}\n\nexport interface IInstancedRendererOptions\n{\n    instanceBuilder: Record<string, string>;\n    geometry: Geometry;\n    shader: Shader;\n    state?: State;\n}\n\n/**\n * This options define how display-objects are rendered by the instanced renderer.\n *\n * NOTE:\n *\n * + Make sure your instanceBuilder is in the order you want attributes to be packed\n * in the same buffer. Also, make sure that floats are aligned at 4-byte boundaries and\n * shorts are aligned at 2-byte boundaries.\n *\n * + PixiJS Bug: Make sure the first attribute is **not** instanced.\n *\n * @memberof PIXI\n * @interface IInstancedRendererOptions\n * @property {Object<string, string>} instanceBuilder - an object mapping display-object\n *      properties holding \"instance attributes\" from their attribute name.\n * @property {Geometry} geometry - the geometry style used to render the display-objects\n * @property {Shader} shader - the shader used to render display-objects\n * @property {State}[state] - the WebGL state used to run the shader\n * @example\n * {\n *     instanceBuilder: {\n *         aVertexPosition: '_vertexData'\n *     },\n *     geometry: new PIXI.Geometry()\n *              .addAttribute('aVertexPosition', null, 2, false, TYPES.FLOAT, 0, 0, false)\n *              .addAttribute('aWorldTransform', null, 2, false, TYPES.FLOAT, 0, 0, true)\n *     shader: new PIXI.Shader(<vertexShaderSrc>, <fragmentShaderSrc>, <uniformData>),\n *     state: PIXI.State.for2d() // that's the default\n * }\n */\n","import { InstancedRenderer, IInstancedRendererOptions } from './InstancedRenderer';\nimport { Renderer } from '@pixi/core';\n\n/**\n * @class\n * @example\n * import { InstancedRendererPluginFactory } from '[at]pixi-essentials/instanced-renderer';\n * import { Renderer, Shader, Geometry, TYPES } from 'pixi.js';\n *\n * const spriteRenderer = InstancedRendererPluginFactory.from({\n *     instanceBuilder: {\n *         aVertexPosition: \"_vertexData\"\n *     },\n *     geometry: new Geometry().\n *         addAttribute(\"aVertexPosition\", new Float32Array(\n *             0, 0,\n *             100, 0,\n *             100, 100,\n *             100, 100,\n *             0, 100,\n *             0, 0\n *         ), 2, false, TYPES.FLOAT, 0, 0, true),\n *     shader: new Shader(\n *       `\n * attribute vec2 aVertexPosition;\n * uniform mat3 projectionMatrix;\n *\n * void main(void)\n * {\n *     gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1)).xy, 0, 1);\n * }\n * `,\n * `\n * void main(void)\n * {\n *     gl_FragColor = vec4(.5, 1, .2, 1);// some random color\n * }\n * `,\n * {} // you can add uniforms\n *     )\n * });\n */\nexport class InstancedRendererPluginFactory\n{\n    /**\n     * Returns a plugin wrapping an instanced renderer that can be registered.\n     *\n     * @param {IInstancedRendererOptions} options\n     * @returns {PIXI.PluginConstructor}\n     */\n    public static from(options: IInstancedRendererOptions): typeof InstancedRenderer\n    {\n        return class extends InstancedRenderer\n        {\n            constructor(renderer: Renderer)\n            {\n                super(renderer, options);\n            }\n        };\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","_instanceRendererID","renderer","options","_super","_this","instanceRendererID","_instanceBuilder","instanceBuilder","_geometry","geometry","_shader","shader","_state","state","State","for2d","_instanceAttribSizes","_instanceAttribViews","_instanceSize","_calculateInstanceSizesAndViews","_objectBuffer","_objectCount","_initInstanceBuffer","InstancedRenderer","displayObject","instanceSize","instanceBuffer","_getBuffer","i","rsize","object","attribID","attribute","attributes","instance","attribSize","size","view","index","prop","j","_instanceBuffer","update","rawBinaryData","bind","set","draw","DRAW_MODES","TRIANGLES","undefined","roundedP2","nextPow2","Math","ceil","roundedSizeIndex","log2","roundedSize","_aBuffers","length","buffer","ViewableBuffer","totalSize","typeSize","type","TYPES","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","HALF_FLOAT","FLOAT","byteSize","Buffer","clonedGeometry","Geometry","console","log","buffers","addAttribute","normalized","start","stride","ObjectRenderer","InstancedRendererPluginFactory"],"mappings":"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"}