{"version":3,"file":"instanced-renderer.js","sources":["../src/InstancedRenderer.ts","../src/InstancedRendererPluginFactory.ts"],"sourcesContent":["import { Buffer, ObjectRenderer, Renderer, Geometry, Shader, State, ViewableBuffer } from '@pixi/core';\nimport { TYPES, DRAW_MODES } from '@pixi/constants';\nimport { log2, nextPow2 } from '@pixi/utils';\n\nconst _instanceID = 0;\nlet _instanceRendererID = 0;\n\n/**\n * {@code InstancedRenderer} is an object-renderer for drawing meshes/shapes/display-objects\n * that have a common geometry and some \"instanced\" attributes.\n *\n * @class\n * @extends PIXI.ObjectRenderer\n */\nexport class InstancedRenderer extends ObjectRenderer\n{\n    public renderer: Renderer;// @pixi/core doesn't have types yet :<\n    public readonly instanceRendererID: string;\n\n    protected _instanceBuilder: Record<string, string>;\n    protected _geometry: Geometry;\n    protected _shader: Shader;\n    protected _state: State;\n\n    protected _objectBuffer: Array<{[id: string]: string}>;\n    protected _objectCount: number;\n\n    protected _instanceBuffer: Buffer;\n    protected _instanceBufferHash: number;\n\n    protected readonly _instanceAttribSizes: Record<string, number>;\n    protected readonly _instanceSize: number;\n    private _aBuffers: ViewableBuffer[] = [];\n    private _instanceAttribViews: Record<string, string> ;\n\n    /**\n     * @param {PIXI.Renderer} renderer - the WebGL renderer to attach to\n     * @param {PIXI.IInstancedRendererOptions} options - the pipeline description\n     */\n    constructor(renderer: Renderer, options: IInstancedRendererOptions)\n    {\n        super(renderer);\n\n        /**\n         * Unique ID for this instance renderer.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this.instanceRendererID = `instanceRenderer-${_instanceRendererID++}-ID`;\n\n        /**\n         * Maps display-object property names holding instanced attribute data to their attribute\n         * names.\n         *\n         * @protected\n         * @member {Object<string, string>}\n         */\n        this._instanceBuilder = options.instanceBuilder;\n\n        /**\n         * The reference geometry specifying the \"attribute style\".\n         *\n         * @protected\n         * @member {PIXI.Geometry}\n         */\n        this._geometry = options.geometry;\n\n        /**\n         * The shader used to draw all instances.\n         *\n         * @member {PIXI.Shader}\n         */\n        this._shader = options.shader;\n\n        /**\n         * The WebGL state required for using the shader.\n         *\n         * @default PIXI.State.for2d()\n         * @member {PIXI.State}\n         */\n        this._state = options.state || State.for2d();\n\n        /**\n         * Object mapping (instanced) attribute IDs to their sizes in bytes.\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, number>}\n         */\n        this._instanceAttribSizes = {};\n\n        /**\n         * Object mapping (instanced) attribute IDs to their data type views (i.e. `uint32View`,\n         * `float32View`, `uint8View`, etc. in `PIXI.ViewableBuffer`).\n         *\n         * @protected\n         * @readonly\n         * @member {Object<string, string>}\n         */\n        this._instanceAttribViews = {};\n\n        /**\n         * The bytes used per instance/display-object.\n         *\n         * @protected\n         * @readonly\n         * @member {number}\n         */\n        this._instanceSize = this._calculateInstanceSizesAndViews();\n\n        /**\n         * Buffered display-objects\n         *\n         * @protected\n         * @member {PIXI.DisplayObject[]}\n         */\n        this._objectBuffer = [];\n\n        /**\n         * The number of display-objects buffered. This is different from the buffer's capacity\n         * {@code this._objectBuffer.length}.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._objectCount = 0;\n\n        // NOTE: _initInstanceBuffer() also clones this._geometry and replaces it.\n        this._initInstanceBuffer();\n    }\n\n    /**\n     * @override\n     */\n    start()\n    {\n        this._objectCount = 0;\n    }\n\n    /**\n     * @override\n     * @param {PIXI.DisplayObject} displayObject\n     */\n    render(displayObject: { [id: string]: string }): void\n    {\n        this._objectBuffer[this._objectCount] = displayObject;\n        ++this._objectCount;\n    }\n\n    /**\n     * Flushes/draws all pending display-objects.\n     *\n     * @override\n     */\n    flush(): void\n    {\n        const instanceBuilder = this._instanceBuilder;\n        const instanceSize = this._instanceSize;\n        const instanceBuffer = this._getBuffer(this._objectCount * this._instanceSize);\n\n        // TODO: Optimize this by compiling a function that doesn't loop through each attribute\n        // by rolling the loop\n        for (let i = 0; i < this._objectCount; i++)\n        {\n            let rsize = 0;\n            const object = this._objectBuffer[i];\n\n            for (const attribID in this._instanceBuilder)\n            {\n                const attribute = this._geometry.attributes[attribID];\n\n                if (!attribute.instance)\n                {\n                    continue;\n                }\n\n                const attribSize = attribute.size;\n                const view = instanceBuffer[this._instanceAttribViews[attribID]];\n                const size = this._instanceAttribSizes[attribID];\n\n                const index = (i * instanceSize + rsize) / size;\n                const prop = instanceBuilder[attribID];\n\n                if (attribSize === 1)\n                {\n                    view[index] = object[prop];\n                }\n                else\n                {\n                    for (let j = 0; j < attribSize; j++)\n                    {\n                        view[index + j] = object[prop][j];\n                    }\n                }\n\n                rsize += size;\n            }\n        }\n\n        this._instanceBuffer.update(instanceBuffer.rawBinaryData);\n\n        const renderer = this.renderer;\n\n        renderer.shader.bind(this._shader);\n        renderer.geometry.bind(this._geometry);\n        renderer.state.set(this._state);\n\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, undefined, undefined, this._objectCount);\n\n        this._objectCount = 0;\n    }\n\n    /**\n     * Returns a (cached) buffer that can hold {@code size} bytes.\n     *\n     * @param {number} size - required capacity in bytes\n     * @return {ViewableBuffer} - buffer than can hold atleast `size` floats\n     * @private\n     */\n    protected _getBuffer(size: number): ViewableBuffer\n    {\n        const roundedP2 = nextPow2(Math.ceil(size));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._aBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Returns the no. of bytes used for each instance.\n     *\n     * @private\n     * @returns {number}\n     */\n    private _calculateInstanceSizesAndViews(): number\n    {\n        let totalSize = 0;\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n\n            if (!attribute.instance)\n            {\n                continue;\n            }\n\n            let typeSize = 0;\n            let view;\n\n            switch (attribute.type)\n            {\n                case TYPES.UNSIGNED_BYTE:\n                    typeSize = 1;\n                    view = 'uint8View';\n                    break;\n                case TYPES.UNSIGNED_SHORT:\n                case TYPES.UNSIGNED_SHORT_5_6_5:\n                case TYPES.UNSIGNED_SHORT_4_4_4_4:\n                case TYPES.UNSIGNED_SHORT_5_5_5_1:\n                case TYPES.HALF_FLOAT:\n                    typeSize = 2;\n                    view = 'uint16View';// TODO: HALF_FLOAT will not work\n                    break;\n                case TYPES.FLOAT:\n                    typeSize = 4;\n                    view = 'float32View';\n                    break;\n            }\n\n            const byteSize = attribute.size * typeSize;\n\n            this._instanceAttribViews[attribID] = view;\n            this._instanceAttribSizes[attribID] = byteSize;\n            totalSize += byteSize;\n        }\n\n        return totalSize;\n    }\n\n    /**\n     * Replaces {@code this._geometry} with a new geometry such that each instanced attribute\n     * points to the same buffer. Uninstanced attributes refer to their original buffers.\n     */\n    private _initInstanceBuffer(): void\n    {\n        /**\n         * The instance buffer holds all instanced attributes in an interleaved fashion.\n         *\n         * @member {PIXI.Buffer}\n         */\n        this._instanceBuffer = new Buffer();\n\n        const clonedGeometry = new Geometry();\n\n        for (const attribID in this._geometry.attributes)\n        {\n            const attribute = this._geometry.attributes[attribID];\n            const instance = attribute.instance;\n\n            console.log(attribID);\n            console.log(this._geometry.buffers[attribute.buffer]);\n\n            clonedGeometry.addAttribute(\n                attribID,\n                instance ? this._instanceBuffer : this._geometry.buffers[attribute.buffer],\n                attribute.size,\n                attribute.normalized,\n                attribute.type,\n                instance ? attribute.start : undefined,\n                instance ? attribute.stride : undefined,\n                attribute.instance,\n            );\n        }\n\n        this._geometry = clonedGeometry;\n    }\n}\n\nexport interface IInstancedRendererOptions\n{\n    instanceBuilder: Record<string, string>;\n    geometry: Geometry;\n    shader: Shader;\n    state?: State;\n}\n\n/**\n * This options define how display-objects are rendered by the instanced renderer.\n *\n * NOTE:\n *\n * + Make sure your instanceBuilder is in the order you want attributes to be packed\n * in the same buffer. Also, make sure that floats are aligned at 4-byte boundaries and\n * shorts are aligned at 2-byte boundaries.\n *\n * + PixiJS Bug: Make sure the first attribute is **not** instanced.\n *\n * @memberof PIXI\n * @interface IInstancedRendererOptions\n * @property {Object<string, string>} instanceBuilder - an object mapping display-object\n *      properties holding \"instance attributes\" from their attribute name.\n * @property {Geometry} geometry - the geometry style used to render the display-objects\n * @property {Shader} shader - the shader used to render display-objects\n * @property {State}[state] - the WebGL state used to run the shader\n * @example\n * {\n *     instanceBuilder: {\n *         aVertexPosition: '_vertexData'\n *     },\n *     geometry: new PIXI.Geometry()\n *              .addAttribute('aVertexPosition', null, 2, false, TYPES.FLOAT, 0, 0, false)\n *              .addAttribute('aWorldTransform', null, 2, false, TYPES.FLOAT, 0, 0, true)\n *     shader: new PIXI.Shader(<vertexShaderSrc>, <fragmentShaderSrc>, <uniformData>),\n *     state: PIXI.State.for2d() // that's the default\n * }\n */\n","import { InstancedRenderer, IInstancedRendererOptions } from './InstancedRenderer';\nimport { Renderer } from '@pixi/core';\n\n/**\n * @class\n * @example\n * import { InstancedRendererPluginFactory } from '[at]pixi-essentials/instanced-renderer';\n * import { Renderer, Shader, Geometry, TYPES } from 'pixi.js';\n *\n * const spriteRenderer = InstancedRendererPluginFactory.from({\n *     instanceBuilder: {\n *         aVertexPosition: \"_vertexData\"\n *     },\n *     geometry: new Geometry().\n *         addAttribute(\"aVertexPosition\", new Float32Array(\n *             0, 0,\n *             100, 0,\n *             100, 100,\n *             100, 100,\n *             0, 100,\n *             0, 0\n *         ), 2, false, TYPES.FLOAT, 0, 0, true),\n *     shader: new Shader(\n *       `\n * attribute vec2 aVertexPosition;\n * uniform mat3 projectionMatrix;\n *\n * void main(void)\n * {\n *     gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1)).xy, 0, 1);\n * }\n * `,\n * `\n * void main(void)\n * {\n *     gl_FragColor = vec4(.5, 1, .2, 1);// some random color\n * }\n * `,\n * {} // you can add uniforms\n *     )\n * });\n */\nexport class InstancedRendererPluginFactory\n{\n    /**\n     * Returns a plugin wrapping an instanced renderer that can be registered.\n     *\n     * @param {IInstancedRendererOptions} options\n     * @returns {PIXI.PluginConstructor}\n     */\n    public static from(options: IInstancedRendererOptions): typeof InstancedRenderer\n    {\n        return class extends InstancedRenderer\n        {\n            constructor(renderer: Renderer)\n            {\n                super(renderer, options);\n            }\n        };\n    }\n}\n"],"names":["_instanceRendererID","renderer","options","_super","_this","instanceRendererID","_instanceBuilder","instanceBuilder","_geometry","geometry","_shader","shader","_state","state","State","for2d","_instanceAttribSizes","_instanceAttribViews","_instanceSize","_calculateInstanceSizesAndViews","_objectBuffer","_objectCount","_initInstanceBuffer","__extends","InstancedRenderer","this","displayObject","instanceSize","instanceBuffer","_getBuffer","i","rsize","object","attribID","attribute","attributes","instance","attribSize","size","view","index","prop","j","_instanceBuffer","update","rawBinaryData","bind","set","draw","DRAW_MODES","TRIANGLES","undefined","roundedP2","nextPow2","Math","ceil","roundedSizeIndex","log2","roundedSize","_aBuffers","length","buffer","ViewableBuffer","totalSize","typeSize","type","TYPES","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","HALF_FLOAT","FLOAT","byteSize","Buffer","clonedGeometry","Geometry","console","log","buffers","addAttribute","normalized","start","stride","ObjectRenderer","InstancedRendererPluginFactory"],"mappings":"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"}