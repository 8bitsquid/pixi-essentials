{"version":3,"file":"types.js","sources":["../src/LinkedList.ts"],"sourcesContent":["export interface ILinkedListNode\n{\n    next: this;\n    previous: this;\n}\n\n/**\n * Iterator for circular linked-lists\n *\n * @example\n * const iterator = new CircularLinkedListIterator<Node>(startNode);\n *\n * while (!iterator.done)\n * {\n *      // Each node will be assigned to \"value\", including startNode\n *      const { value } = iterator.next();\n * }\n */\nexport class CircularLinkedListIterator<Node extends ILinkedListNode> implements Iterator<Node, Node, Node>\n{\n    public current: Node;\n    public done: boolean;\n\n    protected start: Node;\n\n    constructor(node: Node)\n    {\n        /**\n         * The last node returned by {@code this.next}.\n         */\n        this.current = null;\n\n        /**\n         * Whether the iterator has finished iterating over all elements.\n         */\n        this.done = false;\n\n        /**\n         * The first node occurring in this iteration.\n         */\n        this.start = node;\n    }\n\n    next(): IteratorResult<Node, Node>\n    {\n        if (this.current === null)\n        {\n            this.current = this.start;\n        }\n        else if (this.current.next !== this.start)\n        {\n            this.current = this.current.next;\n        }\n        else\n        {\n            // this.current.next === this.start, so we are done here\n            this.current = null;\n            this.done = true;\n        }\n\n        return {\n            value: this.current,\n            done: this.done,\n        };\n    }\n}\n"],"names":["node","this","current","done","start","CircularLinkedListIterator","next","value"],"mappings":";;;;;;;;;;6FAyBI,WAAYA,GAKRC,KAAKC,QAAU,KAKfD,KAAKE,MAAO,EAKZF,KAAKG,MAAQJ,EAyBrB,OAtBIK,iBAAA,WAiBI,OAfqB,OAAjBJ,KAAKC,QAELD,KAAKC,QAAUD,KAAKG,MAEfH,KAAKC,QAAQI,OAASL,KAAKG,MAEhCH,KAAKC,QAAUD,KAAKC,QAAQI,MAK5BL,KAAKC,QAAU,KACfD,KAAKE,MAAO,GAGT,CACHI,MAAON,KAAKC,QACZC,KAAMF,KAAKE"}