{"version":3,"file":"types.es.js","sources":["../src/LinkedList.ts"],"sourcesContent":["/**\n * A node in a linked-list data-structure.\n */\nexport interface ILinkedListNode\n{\n    /**\n     * The next node in the linked-list.\n     */\n    next: this;\n}\n\n/**\n * A node in a doubly linked-list data structure.\n */\nexport interface IDoublyLinkedListNode extends ILinkedListNode\n{\n    previous: this;\n}\n\n/**\n * Iterator for circular linked-lists\n *\n * @example\n * const iterator = new CircularLinkedListIterator<Node>(startNode);\n *\n * while (!iterator.done)\n * {\n *      // Each node will be assigned to \"value\", including startNode\n *      const { value } = iterator.next();\n * }\n */\nexport class CircularLinkedListIterator<Node extends ILinkedListNode> implements Iterator<Node, Node, Node>\n{\n    public current: Node;\n    public done: boolean;\n\n    protected start: Node;\n\n    constructor(node: Node)\n    {\n        /**\n         * The last node returned by {@code this.next}.\n         */\n        this.current = null;\n\n        /**\n         * Whether the iterator has finished iterating over all elements.\n         */\n        this.done = false;\n\n        /**\n         * The first node occurring in this iteration.\n         */\n        this.start = node;\n    }\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators\n     */\n    next(): IteratorResult<Node, Node>\n    {\n        if (this.current === null)\n        {\n            this.current = this.start;\n        }\n        else if (this.current.next !== this.start)\n        {\n            this.current = this.current.next;\n        }\n        else\n        {\n            // this.current.next === this.start, so we are done here\n            this.current = null;\n            this.done = true;\n        }\n\n        return {\n            value: this.current,\n            done: this.done,\n        };\n    }\n\n    /**\n     * Reset the iterator so it can be used again.\n     */\n    reset(start: Node = this.start): this\n    {\n        this.current = null;\n        this.done = false;\n        this.start = start;\n\n        return this;\n    }\n}\n\n/**\n * An iterable circular linked-list data structure.\n */\nexport class CircularLinkedList<Node extends ILinkedListNode> implements Iterable<Node>\n{\n    public head: Node;\n\n    private _sharedIterator: CircularLinkedListIterator<Node>;\n\n    constructor(head: Node)\n    {\n        this.head = head;\n    }\n\n    [Symbol.iterator](): Iterator<Node, Node, Node>\n    {\n        if (!this._sharedIterator)\n        {\n            this._sharedIterator = new CircularLinkedListIterator(this.head);\n        }\n\n        this._sharedIterator.reset(this.head);\n\n        return this._sharedIterator;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAmBA;;;;;;;;;;;;MAYa,0BAA0B;IAOnC,YAAY,IAAU;;;;QAKlB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;;;QAKpB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;;;;QAKlB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;;;;IAKD,IAAI;QAEA,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EACzB;YACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;SAC7B;aACI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,EACzC;YACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SACpC;aAED;;YAEI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB;QAED,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,OAAO;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;SAClB,CAAC;KACL;;;;IAKD,KAAK,CAAC,QAAc,IAAI,CAAC,KAAK;QAE1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,OAAO,IAAI,CAAC;KACf;CACJ;AAED;;;MAGa,kBAAkB;IAM3B,YAAY,IAAU;QAElB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KACpB;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEb,IAAI,CAAC,IAAI,CAAC,eAAe,EACzB;YACI,IAAI,CAAC,eAAe,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpE;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtC,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;;;;;"}