{"version":3,"file":"transformer.js","sources":["../src/TransformerHandle.ts","../src/utils/skewTransform.ts","../src/utils/decomposeTransform.ts","../src/utils/multiplyTransform.ts","../src/Transformer.ts"],"sourcesContent":["/// <reference path=\"./types.d.ts\" />\n\nimport { Graphics } from '@pixi/graphics';\nimport { Point } from '@pixi/math';\n\nimport { InteractionEvent } from '@pixi/interaction';\n\n/**\n * @ignore\n */\nexport interface ITransformerHandleStyle\n{\n    color: number;\n    outlineColor: number;\n    outlineThickness: number;\n    radius: number;\n    shape: string;\n}\n\n/**\n * The default transformer handle style.\n *\n * @ignore\n */\nconst DEFAULT_HANDLE_STYLE = {\n    color: 0xffffff,\n    outlineColor: 0x000000,\n    outlineThickness: 1,\n    radius: 8,\n    shape: 'square',\n};\n\nconst tempPoint = new Point();\nconst tempDelta = new Point();\n\n/**\n * The transfomer handle base implementation.\n */\nexport class TransformerHandle extends Graphics\n{\n    onHandleDelta: (origin: Point, delta: Point) => void;\n    onHandleCommit: () => void;\n\n    protected _style: ITransformerHandleStyle;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    constructor(styleOpts: Partial<ITransformerHandleStyle> = {},\n        handler?: (origin: Point, delta: Point) => void,\n        commit?: () => void,\n        cursor?: string)\n    {\n        super();\n\n        const style: ITransformerHandleStyle = Object.assign({}, DEFAULT_HANDLE_STYLE, styleOpts);\n\n        this._style = style;\n        this.cursor = cursor || 'move';\n        this.onHandleDelta = handler;\n        this.onHandleCommit = commit;\n\n        this.lineStyle(style.outlineThickness, style.outlineColor)\n            .beginFill(style.color);\n\n        if (style.shape === 'square')\n        {\n            this.drawRect(-style.radius / 2, -style.radius / 2, style.radius, style.radius);\n        }\n        else\n        {\n            this.drawCircle(0, 0, style.radius);\n        }\n\n        this.endFill();\n\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n\n        this.interactive = true;\n\n        this.on('mousedown', this.onPointerDown, this);\n        this.on('mousemove', this.onPointerMove, this);\n        this.on('mouseup', this.onPointerUp, this);\n        this.on('mouseupoutside', this.onPointerUp, this);\n    }\n\n    get style(): Partial<ITransformerHandleStyle>\n    {\n        return this._style;\n    }\n    set style(value: Partial<ITransformerHandleStyle>)\n    {\n        this._style = Object.assign({}, DEFAULT_HANDLE_STYLE, value);\n    }\n\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        if (this._pointerDragging)\n        {\n            this.onDrag(e);\n        }\n        else\n        {\n            this.onDragStart(e);\n        }\n\n        e.stopPropagation();\n    }\n\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        if (this._pointerDragging)\n        {\n            this.onDragEnd(e);\n        }\n\n        this._pointerDown = false;\n    }\n\n    protected onDragStart(e: InteractionEvent): void\n    {\n        e.data.getLocalPosition(this.parent, this._pointerPosition);\n\n        this._pointerDragging = true;\n    }\n\n    protected onDrag(e: InteractionEvent): void\n    {\n        const lastPosition = this._pointerPosition;\n        const currentPosition = e.data.getLocalPosition(this.parent, tempPoint);\n\n        // Callback handles the rest!\n        if (this.onHandleDelta)\n        {\n            tempDelta.x = currentPosition.x - lastPosition.x;\n            tempDelta.y = currentPosition.y - lastPosition.y;\n\n            this.onHandleDelta(lastPosition, tempDelta);\n        }\n\n        this._pointerPosition.copyFrom(tempPoint);\n    }\n\n    protected onDragEnd(_: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n\n        if (this.onHandleCommit)\n        {\n            this.onHandleCommit();\n        }\n    }\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * @param angle\n * @returns a horizontal skew matrix\n */\nexport function createHorizontalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.c = Math.tan(angle);\n\n    return matrix;\n}\n\n/**\n * @param angle\n * @returns a vertical skew matrix\n */\nexport function createVerticalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.b = Math.tan(angle);\n\n    return matrix;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport type { Transform, Matrix } from '@pixi/math';\n\n/**\n * Decomposes the matrix into transform, while preserving rotation & the pivot.\n *\n * @ignore\n * @param transform\n * @param matrix\n * @param rotation\n * @param pivot\n */\nexport function decomposeTransform(\n    transform: Transform,\n    matrix: Matrix,\n    rotation?: number,\n    pivot = transform.pivot,\n): Transform\n{\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    rotation = rotation !== undefined && rotation !== null ? rotation : skewY;\n\n    // set pivot\n    transform.pivot.set(pivot.x, pivot.y);\n\n    // next set rotation, skew angles\n    transform.rotation = rotation;\n    transform.skew.x = rotation + skewX;\n    transform.skew.y = -rotation + skewY;\n\n    // next set scale\n    transform.scale.x = Math.sqrt((a * a) + (b * b));\n    transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n    // next set position\n    transform.position.x = matrix.tx + ((pivot.x * matrix.a) + (pivot.y * matrix.c));\n    transform.position.y = matrix.ty + ((pivot.x * matrix.b) + (pivot.y * matrix.d));\n\n    return transform;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\nimport { decomposeTransform } from './decomposeTransform';\n\nimport type { DisplayObject } from '@pixi/display';\n\nconst tempMatrix = new Matrix();\nconst tempParentMatrix = new Matrix();\n\n/**\n * Multiplies the transformation matrix {@code transform} to the display-object's transform.\n *\n * @param displayObject\n * @param transform\n * @param skipUpdate\n */\nexport function multiplyTransform(displayObject: DisplayObject, transform: Matrix, skipUpdate?: boolean): void\n{\n    if (!skipUpdate)\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n    }\n\n    const worldTransform = displayObject.worldTransform;\n    const parentTransform = displayObject.parent\n        ? tempParentMatrix.copyFrom(displayObject.parent.worldTransform)\n        : Matrix.IDENTITY;\n\n    tempMatrix.copyFrom(worldTransform);\n    tempMatrix.prepend(transform);\n    tempMatrix.prepend(parentTransform.invert());// gets new \"local\" transform\n\n    decomposeTransform(displayObject.transform, tempMatrix);\n}\n","/// <reference path=\"./types.d.ts\" />\n\nimport { Renderer } from '@pixi/core';\nimport { DisplayObject, Container } from '@pixi/display';\nimport { Point, Matrix, Transform, Rectangle } from '@pixi/math';\nimport { Graphics } from '@pixi/graphics';\nimport { AxisAlignedBounds, OrientedBounds } from '@pixi-essentials/bounds';\nimport { ObjectPoolFactory } from '@pixi-essentials/object-pool';\nimport { TransformerHandle } from './TransformerHandle';\nimport { createHorizontalSkew, createVerticalSkew } from './utils/skewTransform';\nimport { decomposeTransform } from './utils/decomposeTransform';\nimport { multiplyTransform } from './utils/multiplyTransform';\n\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { ITransformerHandleStyle } from './TransformerHandle';\n\n// Preallocated objects\nconst tempTransform = new Transform();\nconst tempCorners: [Point, Point, Point, Point] = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempBounds = new OrientedBounds();\nconst tempRect = new Rectangle();\n\n// Pool for allocating an arbitrary number of points\nconst pointPool = ObjectPoolFactory.build(Point as any);\n\n/**\n * The handles used for rotation.\n *\n * @internal\n * @ignore\n */\ntype RotatorHandle = 'rotator';\n\n/**\n * The handles used for scaling.\n *\n * @internal\n * @ignore\n */\ntype ScaleHandle = 'topLeft' |\n    'topCenter' |\n    'topRight' |\n    'middleLeft' |\n    'middleCenter' |\n    'middleRight' |\n    'bottomLeft' |\n    'bottomCenter' |\n    'bottomRight';\n/**\n * The handles used for skewing\n *\n * @internal\n * @ignore\n */\ntype SkewHandle = 'skewHorizontal' | 'skewVertical';\n\n/**\n * All the handles provided by {@link Transformer}.\n *\n * @internal\n * @ignore\n */\ntype Handle = RotatorHandle | ScaleHandle | SkewHandle;\n\n/**\n * Specific cursors for each handle\n *\n * @internal\n * @ignore\n */\nconst HANDLE_TO_CURSOR: { [H in Handle]?: string } = {\n    topLeft: 'nw-resize',\n    topCenter: 'n-resize',\n    topRight: 'ne-resize',\n    middleLeft: 'w-resize',\n    middleRight: 'e-resize',\n    bottomLeft: 'sw-resize',\n    bottomCenter: 's-resize',\n    bottomRight: 'se-resize',\n};\n\n/**\n * An array of all {@link ScaleHandle} values.\n *\n * @internal\n * @ignore\n */\nconst SCALE_HANDLES = [\n    'topLeft',\n    'topCenter',\n    'topRight',\n    'middleLeft',\n    'middleCenter',\n    'middleRight',\n    'bottomLeft',\n    'bottomCenter',\n    'bottomRight',\n];\n\n/**\n * This maps each scaling handle to the directions in which the x, y components are outward. A value of\n * zero means that no scaling occurs along that component's axis.\n *\n * @internal\n * @ignore\n */\nconst SCALE_COMPONENTS: {\n    [H in ScaleHandle]: { x: (-1 | 0 | 1); y: (-1 | 0 | 1) };\n } = {\n     topLeft: { x: -1, y: -1 },\n     topCenter: { x: 0, y: -1 },\n     topRight: { x: 1, y: -1 },\n     middleLeft: { x: -1, y: 0 },\n     middleCenter: { x: 0, y: 0 },\n     middleRight: { x: 1, y: 0 },\n     bottomLeft: { x: -1, y: 1 },\n     bottomCenter: { x: 0, y: 1 },\n     bottomRight: { x: 1, y: 1 },\n };\n\n/**\n * @ignore\n */\nexport interface ITransformerStyle\n{\n    color: number;\n    thickness: number;\n}\n\n/**\n * The default wireframe style for {@link Transformer}.\n *\n * @ignore\n */\nconst DEFAULT_WIREFRAME_STYLE: ITransformerStyle = {\n    color: 0x000000,\n    thickness: 2,\n};\n\n/**\n * @ignore\n */\nexport interface ITransformerOptions\n{\n    group: DisplayObject[];\n    handleConstructor: typeof DisplayObject;\n    handleStyle: Partial<ITransformerHandleStyle>;\n    skewRadius: number;\n    skewTransform: boolean;\n    transientGroupTilt: boolean;\n    wireframeStyle: Partial<ITransformerStyle>;\n}\n\n/**\n * {@code Transformer} provides an interactive interface for editing the transforms in a group. It supports translating,\n * scaling, rotating, and skewing display-objects both through interaction and code.\n *\n * NOTE: The transformer needs to capture all interaction events that would otherwise go to the display-objects in the\n * group. Hence, it must be placed after them in the scene graph.\n */\nexport class Transformer extends Container\n{\n    public group: DisplayObject[];\n    public skewRadius: number;\n    public transientGroupTilt: boolean;\n\n    protected groupBounds: OrientedBounds;\n    protected handles: { [H in Handle]: TransformerHandle };\n    protected wireframe: Graphics;\n    protected _skewTransform: boolean;\n    protected _skewX: number;\n    protected _skewY: number;\n    protected _handleStyle: Partial<ITransformerHandleStyle>;\n    protected _wireframeStyle: Partial<ITransformerStyle>;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /**\n     * @param {object}[options]\n     * @param {DisplayObject[]}[options.group] - the group of display-objects being transformed\n     * @param {typeof TransformerHandle}[options.handleConstructor] - a custom transformer-handle class\n     * @param {object}[options.handleStyle] - styling options for the handle. These cannot be modified afterwards!\n     * @param {number}[options.handleStyle.color] - handle color\n     * @param {string}[options.handleStyle.outlineColor] - color of the handle outline (stroke)\n     * @param {string}[options.handleStyle.outlineThickness] - thickness of the handle outline (stroke)\n     * @param {number}[options.handleStyle.radius] - dimensions of the handle\n     * @param {string}[options.handleStyle.shape] - 'circle' or 'square'\n     * @param {number}[options.skewRadius] - distance of skew handles from center of transformer box\n     *  (`skewTransform` should be enabled)\n     * @param {number}[options.skewTransform] - whether to enable skewing\n     * @param {boolean}[options.transientGroupTilt=true] - whether the transformer should reset the wireframe's rotation\n     *      after a rotator handle is \"defocused\".\n     * @param {object}[options.wireframeStyle] - styling options for the wireframe.\n     * @param {number}[options.wireframeStyle.color] - color of the lines\n     * @param {number}[options.wireframeStyle.thickness] - thickness of the lines\n     */\n    constructor(options: Partial<ITransformerOptions> = {})\n    {\n        super();\n\n        this.interactive = true;\n        this.cursor = 'move';\n\n        this.group = options.group || [];\n        this.skewRadius = options.skewRadius || 64;\n        this._skewTransform = options.skewTransform !== undefined ? options.skewTransform : false;\n        this.transientGroupTilt = options.transientGroupTilt !== undefined ? options.transientGroupTilt : true;\n\n        /**\n         * Draws the bounding boxes\n         */\n        this.wireframe = this.addChild(new Graphics());\n\n        /**\n         * The horizontal skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewX = 0;\n\n        /**\n         * The vertical skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewY = 0;\n\n        /**\n         * The wireframe style applied on the transformer\n         */\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, options.wireframeStyle || {});\n\n        const HandleConstructor = options.handleConstructor || TransformerHandle;\n        const handleStyle = options.handleStyle || {};\n\n        this._handleStyle = handleStyle;\n\n        // Initialize transformer handles\n        const rotatorHandles = {\n            rotator: this.addChild(\n                new HandleConstructor(\n                    handleStyle,\n                    (origin: Point, delta: Point) => { this.rotateGroup('rotator', origin, delta); },\n                    this.commitGroup,\n                )),\n        };\n        const scaleHandles = SCALE_HANDLES.reduce((scaleHandles, handleKey) =>\n        {\n            const handleDelta = (_: Point, delta: Point): void =>\n            {\n                this.scaleGroup(handleKey as ScaleHandle, delta);\n            };\n\n            scaleHandles[handleKey] = new HandleConstructor(\n                handleStyle,\n                handleDelta,\n                this.commitGroup,\n                HANDLE_TO_CURSOR[handleKey]);\n            this.addChild(scaleHandles[handleKey]);\n\n            return scaleHandles;\n        }, {});\n        const skewHandles = {\n            skewHorizontal: this.addChild(\n                new HandleConstructor(\n                    handleStyle,\n                    (origin: Point, delta: Point) => { this.skewGroup('skewHorizontal', origin, delta); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n            skewVertical: this.addChild(\n                new HandleConstructor(\n                    handleStyle,\n                    (origin: Point, delta: Point) => { this.skewGroup('skewVertical', origin, delta); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n        };\n\n        this.handles = Object.assign({}, rotatorHandles, scaleHandles, skewHandles) as { [H in Handle]: TransformerHandle };\n        this.handles.middleCenter.visible = false;\n        this.handles.skewHorizontal.visible = this._skewTransform;\n        this.handles.skewVertical.visible = this._skewTransform;\n\n        // Update groupBounds immediately. This is because mouse events can propagate before the next animation frame.\n        this.groupBounds = new OrientedBounds();\n        this.updateGroupBounds();\n\n        // Pointer events\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('pointerdown', this.onPointerDown, this);\n        this.on('pointermove', this.onPointerMove, this);\n        this.on('pointerup', this.onPointerUp, this);\n        this.on('pointerupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The currently applied handle style. If you have edited the transformer handles directly, this may be inaccurate.\n     */\n    get handleStyle(): Partial<ITransformerHandleStyle>\n    {\n        return this._handleStyle;\n    }\n    set handleStyle(value: Partial<ITransformerHandleStyle>)\n    {\n        const handles = this.handles;\n\n        for (const handleKey in handles)\n        {\n            (handles[handleKey] as TransformerHandle).style = value;\n        }\n\n        this._handleStyle = value;\n    }\n\n    /**\n     * This will enable the skewing handles.\n     */\n    get skewTransform(): boolean\n    {\n        return this._skewTransform;\n    }\n    set skewTransform(value: boolean)\n    {\n        if (this._skewTransform !== value)\n        {\n            this._skewTransform = value;\n\n            this.handles.skewHorizontal.visible = value;\n            this.handles.skewVertical.visible = value;\n        }\n    }\n\n    /**\n     * The currently applied wireframe style.\n     */\n    get wireframeStyle(): Partial<ITransformerStyle>\n    {\n        return this._wireframeStyle;\n    }\n    set wireframeStyle(value: Partial<ITransformerStyle>)\n    {\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, value);\n    }\n\n    /**\n     * This will translate the group by {@code delta}.\n     *\n     * NOTE: There is no handle that provides translation. The user drags the transformer directly.\n     *\n     * @param delta\n     */\n    translateGroup = (delta: Point): void =>\n    {\n        // Translation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(delta.x, delta.y);\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will rotate the group such that the {@code origin} point will move by {@code delta}.\n     *\n     * @param handle - the rotator handle was dragged\n     * @param origin - the original pointer position (before dragging)\n     * @param delta - the difference in pointer position (after dragging)\n     */\n    rotateGroup = (_: RotatorHandle, origin: Point, delta: Point): void =>\n    {\n        const bounds = this.groupBounds;\n        const destination = tempPoint.set(origin.x + delta.x, origin.y + delta.y);\n\n        // Center of rotation - does not change in transformation\n        const rOrigin = bounds.center;\n\n        // Original angle subtended by pointer\n        const orgAngle = Math.atan2(origin.y - rOrigin.y, origin.x - rOrigin.x);\n\n        // Final angle subtended by pointer\n        const dstAngle = Math.atan2(destination.y - rOrigin.y, destination.x - rOrigin.x);\n\n        // The angle by which bounds should be rotated\n        const deltaAngle = dstAngle - orgAngle;\n\n        // Rotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-rOrigin.x, -rOrigin.y)\n            .rotate(deltaAngle)\n            .translate(rOrigin.x, rOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(bounds.rotation + deltaAngle);\n\n        // Rotation moves both skew.x & skew.y\n        this._skewX += deltaAngle;\n        this._skewY += deltaAngle;\n    };\n\n    /**\n     * This will scale the group such that the handle will move by {@code delta}.\n     *\n     * @param handle - the scaling handle that was dragged\n     * @param delta - the change in pointer position since the last event\n     */\n    scaleGroup = (handle: ScaleHandle, delta: Point): void =>\n    {\n        // Directions along x,y axes that will produce positive scaling\n        const xDir = SCALE_COMPONENTS[handle].x;\n        const yDir = SCALE_COMPONENTS[handle].y;\n\n        const bounds = this.groupBounds;\n        const angle = bounds.rotation;\n        const innerBounds = bounds.innerBounds;\n\n        // Delta vector in world frame\n        const dx = delta.x;\n        const dy = delta.y;\n\n        // Unit vector along u-axis (horizontal axis after rotation) of bounds\n        const uxvec = (bounds.topRight.x - bounds.topLeft.x) / innerBounds.width;\n        const uyvec = (bounds.topRight.y - bounds.topLeft.y) / innerBounds.width;\n\n        // Unit vector along v-axis (vertical axis after rotation) of bounds\n        const vxvec = (bounds.bottomLeft.x - bounds.topLeft.x) / innerBounds.height;\n        const vyvec = (bounds.bottomLeft.y - bounds.topLeft.y) / innerBounds.height;\n\n        // Delta vector in rotated frame of bounds\n        const du = (dx * uxvec) + (dy * uyvec);\n        const dv = (dx * vxvec) + (dy * vyvec);\n\n        // Scaling factors along x,y axes\n        const sx = 1 + (du * xDir / innerBounds.width);\n        const sy = 1 + (dv * yDir / innerBounds.height);\n\n        const matrix = tempMatrix.identity();\n\n        if (xDir !== 0)\n        {\n            // Origin of horizontal scaling - a point which does not move after applying the transform\n            const hsOrigin = xDir === 1 ? bounds.topLeft : bounds.topRight;\n\n            matrix.translate(-hsOrigin.x, -hsOrigin.y)\n                .rotate(-angle)\n                .scale(sx, 1)\n                .rotate(angle)\n                .translate(hsOrigin.x, hsOrigin.y);\n        }\n\n        if (yDir !== 0)\n        {\n            // Origin of vertical scaling - a point which does not move after applying the transform\n            const vsOrigin = yDir === 1 ? bounds.topLeft : bounds.bottomLeft;\n\n            matrix.translate(-vsOrigin.x, -vsOrigin.y)\n                .rotate(-angle)\n                .scale(1, sy)\n                .rotate(angle)\n                .translate(vsOrigin.x, vsOrigin.y);\n        }\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will skew the group such that the skew handle would move to the destination {@code origin + delta}.\n     *\n     * @param handle\n     * @param delta\n     */\n    skewGroup = (handle: SkewHandle, origin: Point, delta: Point): void =>\n    {\n        const bounds = this.groupBounds;\n\n        // Destination point\n        const dst = tempPoint.set(origin.x + delta.x, origin.y + delta.y);\n\n        // Center of skew (same as center of rotation!)\n        const sOrigin = bounds.center;\n\n        // Skew matrix\n        const matrix = tempMatrix.identity()\n            .translate(-sOrigin.x, -sOrigin.y);\n        let rotation = this.groupBounds.rotation;\n\n        if (handle === 'skewHorizontal')\n        {\n            const oldSkew = this._skewX;\n\n            // Calculate new skew\n            this._skewX = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x);\n\n            // Skew by new skew.x\n            matrix.prepend(createVerticalSkew(-oldSkew));\n            matrix.prepend(createVerticalSkew(this._skewX));\n        }\n        else // skewVertical\n        {\n            const oldSkew = this._skewY;\n\n            // Calculate new skew\n            const newSkew = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x) - (Math.PI / 2);\n\n            this._skewY = newSkew;\n\n            // HINT: skewY is applied negatively b/c y-axis is flipped\n            matrix.prepend(createHorizontalSkew(oldSkew));\n            matrix.prepend(createHorizontalSkew(-this._skewY));\n\n            rotation -= newSkew - oldSkew;\n        }\n\n        matrix.translate(sOrigin.x, sOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(rotation);\n    };\n\n    /**\n     * This is called after the user finishes dragging a handle. If {@link this.transientGroupTilt} is enabled, it will\n     * reset the rotation of this group (if more than one display-object is grouped).\n     */\n    commitGroup = (): void =>\n    {\n        if (this.transientGroupTilt !== false && this.group.length > 1)\n        {\n            this.updateGroupBounds(0);\n        }\n    };\n\n    /**\n     * This will update the transformer's geometry and render it to the canvas.\n     *\n     * @override\n     * @param renderer\n     */\n    render(renderer: Renderer): void\n    {\n        this.draw();\n\n        super.render(renderer);\n    }\n\n    /**\n     * Recalculates the transformer's geometry. This is called on each render.\n     */\n    protected draw(): void\n    {\n        const targets = this.group;\n        const { color, thickness } = this._wireframeStyle;\n\n        // Updates occur right here!\n        this.wireframe.clear()\n            .lineStyle(thickness, color);\n\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this.drawBounds(Transformer.calculateOrientedBounds(targets[i], tempBounds));\n        }\n\n        // groupBounds may change on each render-loop b/c of any ongoing animation\n        const groupBounds = targets.length !== 1\n            ? Transformer.calculateGroupOrientedBounds(targets, this.groupBounds.rotation, tempBounds, true)\n            : Transformer.calculateOrientedBounds(targets[0], tempBounds);// Auto-detect rotation\n\n        // Redraw skeleton and position handles\n        this.drawBounds(groupBounds);\n        this.drawHandles(groupBounds);\n\n        // Update cached groupBounds\n        this.groupBounds.copyFrom(groupBounds);\n    }\n\n    /**\n     * Draws the bounding box into {@code this.skeleton}.\n     *\n     * @param bounds\n     */\n    protected drawBounds(bounds: OrientedBounds | AxisAlignedBounds): void\n    {\n        // Fill polygon with ultra-low alpha to capture pointer events.\n        this.wireframe\n            .beginFill(0xffffff, 1e-4)\n            .drawPolygon(bounds.hull)\n            .endFill();\n    }\n\n    /**\n     * Draw the handles and any remaining parts of the skeleton\n     *\n     * @param groupBounds\n     */\n    protected drawHandles(groupBounds: OrientedBounds): void\n    {\n        const handles = this.handles;\n\n        const { topLeft, topRight, bottomLeft, bottomRight, center } = groupBounds;\n\n        // Scale handles\n        handles.topLeft.position.copyFrom(topLeft);\n        handles.topCenter.position.set((topLeft.x + topRight.x) / 2, (topLeft.y + topRight.y) / 2);\n        handles.topRight.position.copyFrom(topRight);\n        handles.middleLeft.position.set((topLeft.x + bottomLeft.x) / 2, (topLeft.y + bottomLeft.y) / 2);\n        handles.middleCenter.position.set((topLeft.x + bottomRight.x) / 2, (topLeft.y + bottomRight.y) / 2);\n        handles.middleRight.position.set((topRight.x + bottomRight.x) / 2, (topRight.y + bottomRight.y) / 2);\n        handles.bottomLeft.position.copyFrom(bottomLeft);\n        handles.bottomCenter.position.set((bottomLeft.x + bottomRight.x) / 2, (bottomLeft.y + bottomRight.y) / 2);\n        handles.bottomRight.position.copyFrom(bottomRight);\n\n        // Skew handles\n        handles.skewHorizontal.position.set(\n            center.x + (Math.cos(this._skewX) * this.skewRadius),\n            center.y + (Math.sin(this._skewX) * this.skewRadius));\n        // HINT: Slope = skew.y + Math.PI / 2\n        handles.skewVertical.position.set(\n            center.x + (-Math.sin(this._skewY) * this.skewRadius),\n            center.y + (Math.cos(this._skewY) * this.skewRadius));\n\n        groupBounds.innerBounds.pad(32);\n\n        handles.rotator.position.x = (groupBounds.topLeft.x + groupBounds.topRight.x) / 2;\n        handles.rotator.position.y = (groupBounds.topLeft.y + groupBounds.topRight.y) / 2;\n\n        groupBounds.innerBounds.pad(-32);\n\n        const bx = (groupBounds.topLeft.x + groupBounds.topRight.x) / 2;\n        const by = (groupBounds.topLeft.y + groupBounds.topRight.y) / 2;\n\n        this.wireframe.moveTo(bx, by)\n            .lineTo(handles.rotator.position.x, handles.rotator.position.y);\n\n        if (this._skewTransform)\n        {\n            this.wireframe\n                .beginFill(this.wireframeStyle.color)\n                .drawCircle(center.x, center.y, this.wireframeStyle.thickness * 2)\n                .endFill();\n            this.wireframe\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewHorizontal.x, handles.skewHorizontal.y)\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewVertical.x, handles.skewVertical.y);\n        }\n\n        // Update transforms\n        for (const handleName in handles)\n        {\n            let rotation = this.groupBounds.rotation;\n\n            if (handleName === 'skewHorizontal')\n            {\n                rotation = this._skewX;\n            }\n            else if (handleName === 'skewVertical')\n            {\n                rotation = this._skewY;\n            }\n\n            const handle: TransformerHandle = handles[handleName];\n\n            handle.rotation = rotation;\n            handle.getBounds(false, tempRect);\n        }\n    }\n\n    /**\n     * Called on the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        const lastPointerPosition = this._pointerPosition;\n        const currentPointerPosition = e.data.getLocalPosition(this, tempPoint);\n\n        const cx = currentPointerPosition.x;\n        const cy = currentPointerPosition.y;\n\n        // Translate group by difference\n        if (this._pointerDragging)\n        {\n            const delta = currentPointerPosition;\n\n            delta.x -= lastPointerPosition.x;\n            delta.y -= lastPointerPosition.y;\n\n            this.translateGroup(delta);\n        }\n\n        this._pointerPosition.x = cx;\n        this._pointerPosition.y = cy;\n        this._pointerDragging = true;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointerup` and `pointerupoutside` events. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n        this._pointerDown = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Applies the given transformation matrix {@code delta} to all the display-objects in the group.\n     *\n     * @param delta - transformation matrix\n     * @param skipUpdate - whether to skip updating the group-bounds after applying the transform\n     */\n    private prependTransform(delta: Matrix, skipUpdate = false): void\n    {\n        const group = this.group;\n\n        for (let i = 0, j = group.length; i < j; i++)\n        {\n            multiplyTransform(group[i], delta, false);\n        }\n\n        if (!skipUpdate)\n        {\n            this.updateGroupBounds();\n        }\n    }\n\n    /**\n     * Recalculates {@code this.groupBounds} at the same angle.\n     *\n     * @param rotation - override the group's rotation\n     */\n    private updateGroupBounds(rotation: number = this.groupBounds.rotation): void\n    {\n        Transformer.calculateGroupOrientedBounds(this.group, rotation, this.groupBounds);\n    }\n\n    /**\n     * Calculates the positions of the four corners of the display-object. The quadrilateral formed by\n     * these points will be the tightest fit around it.\n     *\n     * @param displayObject - The display object whose corners are to be calculated\n     * @param transform - The transform applied on the display-object. By default, this is its world-transform\n     * @param corners - Optional array of four points to put the result into\n     * @param index - Optional index into \"corners\"\n     */\n    static calculateTransformedCorners(\n        displayObject: DisplayObject,\n        transform: Matrix = displayObject.worldTransform,\n        corners?: Point[],\n        index = 0,\n    ): Point[]\n    {\n        const localBounds = displayObject.getLocalBounds();\n\n        // Don't modify transforms\n        displayObject.getBounds();\n\n        corners = corners || [new Point(), new Point(), new Point(), new Point()];\n        corners[index].set(localBounds.x, localBounds.y);\n        corners[index + 1].set(localBounds.x + localBounds.width, localBounds.y);\n        corners[index + 2].set(localBounds.x + localBounds.width, localBounds.y + localBounds.height);\n        corners[index + 3].set(localBounds.x, localBounds.y + localBounds.height);\n\n        transform.apply(corners[index], corners[index]);\n        transform.apply(corners[index + 1], corners[index + 1]);\n        transform.apply(corners[index + 2], corners[index + 2]);\n        transform.apply(corners[index + 3], corners[index + 3]);\n\n        return corners;\n    }\n\n    /**\n     * Calculates the oriented bounding box of the display-object. This would not bending with any skew\n     * applied on the display-object, i.e. it is guaranteed to be rectangular.\n     *\n     * @param displayObject\n     * @param bounds - the bounds instance to set\n     */\n    static calculateOrientedBounds(displayObject: DisplayObject, bounds?: OrientedBounds): OrientedBounds\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n\n        // Decompose displayObject.worldTransform to get its (world) rotation\n        decomposeTransform(tempTransform, displayObject.worldTransform);\n\n        tempTransform.updateLocalTransform();\n\n        const angle = tempTransform.rotation;\n        const corners = Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, tempCorners);\n\n        // Calculate centroid, which is our center of rotatation\n        const cx = (corners[0].x + corners[1].x + corners[2].x + corners[3].x) / 4;\n        const cy = (corners[0].y + corners[1].y + corners[2].y + corners[3].y) / 4;\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-cx, -cy)\n            .rotate(-tempTransform.rotation)\n            .translate(cx, cy);\n\n        // Calculate unrotated corners\n        matrix.apply(corners[0], corners[0]);\n        matrix.apply(corners[1], corners[1]);\n        matrix.apply(corners[2], corners[2]);\n        matrix.apply(corners[3], corners[3]);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.rotation = angle;\n        bounds.innerBounds.x = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        bounds.innerBounds.y = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        bounds.innerBounds.width = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x) - bounds.innerBounds.x;\n        bounds.innerBounds.height = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y) - bounds.innerBounds.y;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the oriented bounding box of a group of display-objects at a specific angle.\n     *\n     * @param group\n     * @param rotation\n     * @param bounds\n     * @param skipUpdate\n     */\n    static calculateGroupOrientedBounds(\n        group: DisplayObject[],\n        rotation: number,\n        bounds?: OrientedBounds,\n        skipUpdate = false,\n    ): OrientedBounds\n    {\n        const groupLength = group.length;\n        const frames = pointPool.allocateArray(groupLength * 4);// Zero allocations!\n\n        // Calculate display-object frame vertices\n        for (let i = 0; i < groupLength; i++)\n        {\n            const displayObject = group[i];\n\n            // Update worldTransform\n            if (!skipUpdate)\n            {\n                const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n                displayObject.updateTransform();\n                displayObject.disableTempParent(parent);\n            }\n\n            Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, frames, i * 4);\n        }\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .rotate(-rotation);\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = -Number.MAX_VALUE;\n        let maxY = -Number.MAX_VALUE;\n\n        // Unrotate all frame vertices, calculate minX, minY, maxX, maxY for innerBounds\n        for (let i = 0, j = frames.length; i < j; i++)\n        {\n            const point = frames[i];\n\n            matrix.apply(point, point);\n\n            const x = point.x;\n            const y = point.y;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        pointPool.releaseArray(frames);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.innerBounds.x = minX;\n        bounds.innerBounds.y = minY;\n        bounds.innerBounds.width = maxX - minX;\n        bounds.innerBounds.height = maxY - minY;\n        bounds.rotation = rotation;\n\n        matrix.applyInverse(bounds.center, tempPoint);\n        bounds.center.copyFrom(tempPoint);\n\n        return bounds;\n    }\n}\n"],"names":["DEFAULT_HANDLE_STYLE","color","outlineColor","outlineThickness","radius","shape","tempPoint","Point","tempDelta","TransformerHandle","Graphics","[object Object]","styleOpts","handler","commit","cursor","super","style","Object","assign","this","_style","onHandleDelta","onHandleCommit","lineStyle","beginFill","drawRect","drawCircle","endFill","_pointerDown","_pointerDragging","_pointerPosition","interactive","on","onPointerDown","onPointerMove","onPointerUp","value","e","stopPropagation","onDrag","onDragStart","onDragEnd","data","getLocalPosition","parent","lastPosition","currentPosition","x","y","copyFrom","_","tempMatrix","Matrix","createHorizontalSkew","angle","matrix","identity","c","Math","tan","createVerticalSkew","b","decomposeTransform","transform","rotation","pivot","a","d","skewX","atan2","skewY","set","skew","scale","sqrt","position","tx","ty","tempParentMatrix","multiplyTransform","displayObject","skipUpdate","enableTempParent","updateTransform","disableTempParent","worldTransform","parentTransform","IDENTITY","prepend","invert","tempTransform","Transform","tempCorners","tempBounds","OrientedBounds","tempRect","Rectangle","pointPool","ObjectPoolFactory","build","HANDLE_TO_CURSOR","topLeft","topCenter","topRight","middleLeft","middleRight","bottomLeft","bottomCenter","bottomRight","SCALE_HANDLES","SCALE_COMPONENTS","middleCenter","DEFAULT_WIREFRAME_STYLE","thickness","Transformer","Container","options","delta","translate","prependTransform","origin","bounds","groupBounds","destination","rOrigin","center","orgAngle","deltaAngle","rotate","updateGroupBounds","_skewX","_skewY","handle","xDir","yDir","innerBounds","dx","dy","uxvec","width","uyvec","dv","height","sx","sy","hsOrigin","vsOrigin","dst","sOrigin","oldSkew","newSkew","PI","transientGroupTilt","group","length","skewRadius","_skewTransform","undefined","skewTransform","wireframe","addChild","_wireframeStyle","wireframeStyle","HandleConstructor","handleConstructor","handleStyle","_handleStyle","rotatorHandles","rotator","rotateGroup","commitGroup","scaleHandles","reduce","handleKey","scaleGroup","skewHandles","skewHorizontal","skewGroup","skewVertical","handles","visible","renderer","draw","render","targets","clear","i","j","drawBounds","calculateOrientedBounds","calculateGroupOrientedBounds","drawHandles","drawPolygon","hull","cos","sin","pad","bx","by","moveTo","lineTo","handleName","getBounds","lastPointerPosition","currentPointerPosition","cx","cy","translateGroup","corners","index","localBounds","getLocalBounds","apply","updateLocalTransform","calculateTransformedCorners","min","max","groupLength","frames","allocateArray","minX","Number","MAX_VALUE","minY","maxX","maxY","point","releaseArray","applyInverse"],"mappings":"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"}