{"version":3,"file":"transformer.js","sources":["../src/TransformerHandle.ts","../src/utils/skewTransform.ts","../src/utils/decomposeTransform.ts","../src/utils/multiplyTransform.ts","../src/Transformer.ts"],"sourcesContent":["/// <reference path=\"./types.d.ts\" />\n\nimport { Graphics } from '@pixi/graphics';\nimport { Point } from '@pixi/math';\nimport { Renderer } from '@pixi/core';\n\nimport { InteractionEvent } from '@pixi/interaction';\nimport type { Handle } from './Transformer';\n\n/**\n * @see TransformerHandle#style\n */\nexport interface ITransformerHandleStyle\n{\n    /**\n     * Fill color of the handle\n     */\n    color: number;\n\n    /**\n     * Outline color of the handle\n     */\n    outlineColor: number;\n\n    /**\n     * Outline thickness around the handle\n     */\n    outlineThickness: number;\n\n    /**\n     * Radius (or size for non-circular handles) of the handle\n     */\n    radius: number;\n\n    /**\n     * {@link TransformerHandle} provides three types of handle shapes - 'circle', 'square', 'tooth'.\n     */\n    shape: string;\n}\n\n/**\n * The default transformer handle style.\n *\n * @ignore\n */\nconst DEFAULT_HANDLE_STYLE: ITransformerHandleStyle = {\n    color: 0xffffff,\n    outlineColor: 0x000000,\n    outlineThickness: 1,\n    radius: 8,\n    shape: 'tooth',\n};\n\n/**\n * The transfomer handle base implementation.\n */\nexport class TransformerHandle extends Graphics\n{\n    onHandleDelta: (pointerPosition: Point) => void;\n    onHandleCommit: () => void;\n\n    protected _handle: Handle;\n    protected _style: ITransformerHandleStyle;\n    protected _dirty: boolean;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /**\n     * @param {string} handle - the type of handle being drawn\n     * @param {object} styleOpts - styling options passed by the user\n     * @param {function} handler - handler for drag events, it receives the pointer position; used by {@code onDrag}.\n     * @param {function} commit - handler for drag-end events.\n     * @param {string}[cursor='move'] - a custom cursor to be applied on this handle\n     */\n    constructor(\n        handle: Handle,\n        styleOpts: Partial<ITransformerHandleStyle> = {},\n        handler: (pointerPosition: Point) => void,\n        commit: () => void,\n        cursor?: string)\n    {\n        super();\n\n        const style: ITransformerHandleStyle = Object.assign({}, DEFAULT_HANDLE_STYLE, styleOpts);\n\n        this._handle = handle;\n        this._style = style;\n        this.onHandleDelta = handler;\n        this.onHandleCommit = commit;\n\n        /**\n         * This flags whether this handle should be redrawn in the next frame due to style changes.\n         */\n        this._dirty = true;\n\n        // Pointer events\n        this.interactive = true;\n        this.cursor = cursor || 'move';\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('mousedown', this.onPointerDown, this);\n        this.on('mousemove', this.onPointerMove, this);\n        this.on('mouseup', this.onPointerUp, this);\n        this.on('mouseupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The currently applied handle style.\n     */\n    get style(): Partial<ITransformerHandleStyle>\n    {\n        return this._style;\n    }\n    set style(value: Partial<ITransformerHandleStyle>)\n    {\n        this._style = Object.assign({}, DEFAULT_HANDLE_STYLE, value);\n        this._dirty = true;\n    }\n\n    render(renderer: Renderer): void\n    {\n        if (this._dirty)\n        {\n            this.draw();\n\n            this._dirty = false;\n        }\n\n        super.render(renderer);\n    }\n\n    /**\n     * Redraws the handle's geometry. This is called on a `render` if {@code this._dirty} is true.\n     */\n    protected draw(): void\n    {\n        const handle = this._handle;\n        const style = this._style;\n\n        const radius = style.radius;\n\n        this.lineStyle(style.outlineThickness, style.outlineColor)\n            .beginFill(style.color);\n\n        if (style.shape === 'square')\n        {\n            this.drawRect(-radius / 2, -radius / 2, radius, radius);\n        }\n        else if (style.shape === 'tooth')\n        {\n            switch (handle)\n            {\n                case 'middleLeft':\n                    this.drawPolygon([\n                        -radius / 2, -radius / 2,\n                        -radius / 2, radius / 2,\n                        radius / 2, radius / 2,\n                        radius * 1.1, 0,\n                        radius / 2, -radius / 2,\n                    ]);\n                    break;\n                case 'topCenter':\n                    this.drawPolygon([\n                        -radius / 2, -radius / 2,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                        0, radius * 1.1,\n                        -radius / 2, radius / 2,\n                    ]);\n                    break;\n                case 'middleRight':\n                    this.drawPolygon([\n                        -radius / 2, radius / 2,\n                        -radius * 1.1, 0,\n                        -radius / 2, -radius / 2,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                    ]);\n                    break;\n                case 'bottomCenter':\n                    this.drawPolygon([\n                        0, -radius * 1.1,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                        -radius / 2, radius / 2,\n                        -radius / 2, -radius / 2,\n                    ]);\n                    break;\n                case 'rotator':\n                    this.drawCircle(0, 0, radius / Math.sqrt(2));\n                    break;\n                default:\n                    this.drawRect(-radius / 2, -radius / 2, radius, radius);\n                    break;\n            }\n        }\n        else\n        {\n            this.drawCircle(0, 0, radius);\n        }\n\n        this.endFill();\n    }\n\n    /**\n     * Handles the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Handles the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        if (this._pointerDragging)\n        {\n            this.onDrag(e);\n        }\n        else\n        {\n            this.onDragStart(e);\n        }\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Handles the `pointerup` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        if (this._pointerDragging)\n        {\n            this.onDragEnd(e);\n        }\n\n        this._pointerDown = false;\n    }\n\n    /**\n     * Called on the first `pointermove` when {@code this._pointerDown} is true. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onDragStart(e: InteractionEvent): void\n    {\n        this._pointerPosition.copyFrom(e.data.global);\n\n        this._pointerDragging = true;\n    }\n\n    /**\n     * Called on a `pointermove` when {@code this._pointerDown} & {@code this._pointerDragging}.\n     *\n     * @param e\n     */\n    protected onDrag(e: InteractionEvent): void\n    {\n        const currentPosition = e.data.global;\n\n        // Callback handles the rest!\n        if (this.onHandleDelta)\n        {\n            this.onHandleDelta(currentPosition);\n        }\n\n        this._pointerPosition.copyFrom(currentPosition);\n    }\n\n    /**\n     * Called on a `pointerup` or `pointerupoutside` & {@code this._pointerDragging} was true.\n     *\n     * @param _\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected onDragEnd(_: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n\n        if (this.onHandleCommit)\n        {\n            this.onHandleCommit();\n        }\n    }\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * @param angle\n * @returns a horizontal skew matrix\n */\nexport function createHorizontalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.c = Math.tan(angle);\n\n    return matrix;\n}\n\n/**\n * @param angle\n * @returns a vertical skew matrix\n */\nexport function createVerticalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.b = Math.tan(angle);\n\n    return matrix;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport type { Transform, Matrix } from '@pixi/math';\n\n/**\n * Decomposes the matrix into transform, while preserving rotation & the pivot.\n *\n * @ignore\n * @param transform\n * @param matrix\n * @param rotation\n * @param pivot\n */\nexport function decomposeTransform(\n    transform: Transform,\n    matrix: Matrix,\n    rotation?: number,\n    pivot = transform.pivot,\n): Transform\n{\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    rotation = rotation !== undefined && rotation !== null ? rotation : skewY;\n\n    // set pivot\n    transform.pivot.set(pivot.x, pivot.y);\n\n    // next set rotation, skew angles\n    transform.rotation = rotation;\n    transform.skew.x = rotation + skewX;\n    transform.skew.y = -rotation + skewY;\n\n    // next set scale\n    transform.scale.x = Math.sqrt((a * a) + (b * b));\n    transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n    // next set position\n    transform.position.x = matrix.tx + ((pivot.x * matrix.a) + (pivot.y * matrix.c));\n    transform.position.y = matrix.ty + ((pivot.x * matrix.b) + (pivot.y * matrix.d));\n\n    return transform;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\nimport { decomposeTransform } from './decomposeTransform';\n\nimport type { DisplayObject } from '@pixi/display';\n\nconst tempMatrix = new Matrix();\nconst tempParentMatrix = new Matrix();\n\n/**\n * Multiplies the transformation matrix {@code transform} to the display-object's transform.\n *\n * @param displayObject\n * @param transform\n * @param skipUpdate\n */\nexport function multiplyTransform(displayObject: DisplayObject, transform: Matrix, skipUpdate?: boolean): void\n{\n    if (!skipUpdate)\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n    }\n\n    const worldTransform = displayObject.worldTransform;\n    const parentTransform = displayObject.parent\n        ? tempParentMatrix.copyFrom(displayObject.parent.worldTransform)\n        : Matrix.IDENTITY;\n\n    tempMatrix.copyFrom(worldTransform);\n    tempMatrix.prepend(transform);\n    tempMatrix.prepend(parentTransform.invert());// gets new \"local\" transform\n\n    decomposeTransform(displayObject.transform, tempMatrix);\n}\n","/// <reference path=\"./types.d.ts\" />\n\nimport { Renderer } from '@pixi/core';\nimport { DisplayObject, Container } from '@pixi/display';\nimport { Point, Matrix, Transform, Rectangle } from '@pixi/math';\nimport { Graphics } from '@pixi/graphics';\nimport { AxisAlignedBounds, OrientedBounds } from '@pixi-essentials/bounds';\nimport { ObjectPoolFactory } from '@pixi-essentials/object-pool';\nimport { TransformerHandle } from './TransformerHandle';\nimport { createHorizontalSkew, createVerticalSkew } from './utils/skewTransform';\nimport { decomposeTransform } from './utils/decomposeTransform';\nimport { multiplyTransform } from './utils/multiplyTransform';\n\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { ITransformerHandleStyle } from './TransformerHandle';\n\n// Preallocated objects\nconst tempTransform = new Transform();\nconst tempCorners: [Point, Point, Point, Point] = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempBounds = new OrientedBounds();\nconst tempRect = new Rectangle();\nconst tempHull = [new Point(), new Point(), new Point(), new Point()];\nconst tempPointer = new Point();\n\n// Pool for allocating an arbitrary number of points\nconst pointPool = ObjectPoolFactory.build(Point as any);\n\n/**\n * The handles used for rotation.\n *\n * @internal\n * @ignore\n */\ntype RotateHandle = 'rotator';\n\n/**\n * The handles used for scaling.\n *\n * @internal\n * @ignore\n */\ntype ScaleHandle = 'topLeft' |\n    'topCenter' |\n    'topRight' |\n    'middleLeft' |\n    'middleCenter' |\n    'middleRight' |\n    'bottomLeft' |\n    'bottomCenter' |\n    'bottomRight';\n\n/**\n * The handles used for skewing\n *\n * @internal\n * @ignore\n */\ntype SkewHandle = 'skewHorizontal' | 'skewVertical';\n\n/**\n * All the handles provided by {@link Transformer}.\n *\n * @internal\n * @ignore\n */\nexport type Handle = RotateHandle | ScaleHandle | SkewHandle;\n\n/**\n * Specific cursors for each handle\n *\n * @internal\n * @ignore\n */\nconst HANDLE_TO_CURSOR: { [H in Handle]?: string } = {\n    topLeft: 'nw-resize',\n    topCenter: 'n-resize',\n    topRight: 'ne-resize',\n    middleLeft: 'w-resize',\n    middleRight: 'e-resize',\n    bottomLeft: 'sw-resize',\n    bottomCenter: 's-resize',\n    bottomRight: 'se-resize',\n};\n\n/**\n * An array of all {@link ScaleHandle} values.\n *\n * @internal\n * @ignore\n */\nconst SCALE_HANDLES: ScaleHandle[] = [\n    'topLeft',\n    'topCenter',\n    'topRight',\n    'middleLeft',\n    'middleCenter',\n    'middleRight',\n    'bottomLeft',\n    'bottomCenter',\n    'bottomRight',\n];\n\n/**\n * This maps each scaling handle to the directions in which the x, y components are outward. A value of\n * zero means that no scaling occurs along that component's axis.\n *\n * @internal\n * @ignore\n */\nconst SCALE_COMPONENTS: {\n    [H in ScaleHandle]: { x: (-1 | 0 | 1); y: (-1 | 0 | 1) };\n } = {\n     topLeft: { x: -1, y: -1 },\n     topCenter: { x: 0, y: -1 },\n     topRight: { x: 1, y: -1 },\n     middleLeft: { x: -1, y: 0 },\n     middleCenter: { x: 0, y: 0 },\n     middleRight: { x: 1, y: 0 },\n     bottomLeft: { x: -1, y: 1 },\n     bottomCenter: { x: 0, y: 1 },\n     bottomRight: { x: 1, y: 1 },\n };\n\n/**\n * All possible values of {@link Handle}.\n *\n * @ignore\n */\nconst HANDLES = [\n    ...SCALE_HANDLES,\n    'rotator',\n    'skewHorizontal',\n    'skewVertical',\n];\n\n/**\n * The default snap angles for rotation, in radians.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAPS = [\n    Math.PI / 4,\n    Math.PI / 2,\n    Math.PI * 3 / 4,\n    Math.PI,\n    -Math.PI / 4,\n    -Math.PI / 2,\n    -Math.PI * 3 / 4,\n    -Math.PI,\n];\n\n/**\n * The default snap tolerance, i.e. the maximum angle b/w the pointer & nearest snap ray for snapping.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * The default snap angles for skewing, in radians.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAPS = [\n    Math.PI / 4,\n    -Math.PI / 4,\n];\n\n/**\n * The default snap tolerance for skewing.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * @ignore\n */\nexport interface ITransformerStyle\n{\n    color: number;\n    thickness: number;\n}\n\n/**\n * The default wireframe style for {@link Transformer}.\n *\n * @ignore\n */\nconst DEFAULT_WIREFRAME_STYLE: ITransformerStyle = {\n    color: 0x000000,\n    thickness: 2,\n};\n\n/**\n * @ignore\n */\nexport interface ITransformerOptions\n{\n    centeredScaling: boolean;\n    enabledHandles?: Array<Handle>;\n    group: DisplayObject[];\n    handleConstructor: typeof DisplayObject;\n    handleStyle: Partial<ITransformerHandleStyle>;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    wireframeStyle: Partial<ITransformerStyle>;\n}\n\n/**\n * {@code Transformer} provides an interactive interface for editing the transforms in a group. It supports translating,\n * scaling, rotating, and skewing display-objects both through interaction and code.\n *\n * A transformer operates in world-space, and it is best to not to position, scale, rotate, or skew one. If you do so, the\n * wireframe itself will not distort (i.e. will adapt _against_ your transforms). However, the wireframe may become\n * thinner/thicker and the handles will scale & rotate. For example, setting `transformer.scale.set(2)` will make the handles\n * twice as big, but will not scale the wireframe (assuming the display-object group itself has not been\n * scaled up).\n *\n * NOTE: The transformer needs to capture all interaction events that would otherwise go to the display-objects in the\n * group. Hence, it must be placed after them in the scene graph.\n *\n * @fires ontransformchange\n */\nexport class Transformer extends Container\n{\n    public group: DisplayObject[];\n\n    public centeredScaling: boolean;\n    public projectionTransform: Matrix;\n    public rotationSnaps: number[];\n    public rotationSnapTolerance: number;\n    public skewRadius: number;\n    public skewSnaps: number[];\n    public skewSnapTolerance: number;\n    public translateEnabled: boolean;\n    public transientGroupTilt: boolean;\n\n    protected groupBounds: OrientedBounds;\n    protected handles: { [H in Handle]: TransformerHandle };\n    protected wireframe: Graphics;\n\n    protected _enabledHandles: Handle[];\n    protected _rotateEnabled: boolean;\n    protected _scaleEnabled: boolean;\n    protected _skewEnabled: boolean;\n    protected _skewX: number;\n    protected _skewY: number;\n    protected _handleStyle: Partial<ITransformerHandleStyle>;\n    protected _wireframeStyle: Partial<ITransformerStyle>;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /* eslint-disable max-len */\n    /**\n     * | Handle                | Type                     | Notes |\n     * | --------------------- | ------------------------ | ----- |\n     * | rotator               | Rotate                   | |\n     * | topLeft               | Scale                    | |\n     * | topCenter             | Scale                    | |\n     * | topRight              | Scale                    | |\n     * | middleLeft            | Scale                    | |\n     * | middleCenter          | Scale                    | This cannot be enabled!                                             |\n     * | middleRight           | Scale                    | |\n     * | bottomLeft            | Scale                    | |\n     * | bottomCenter          | Scale                    | |\n     * | bottomRight           | Scale                    | |\n     * | skewHorizontal        | Skew                     | Applies vertical shear. Handle segment is horizontal at skew.y = 0! |\n     * | skewVertical          | Skew                     | Applied horizontal shear. Handle segment is vertical at skew.x = 0! |\n     *\n     * @param {object}[options]\n     * @param {DisplayObject[]}[options.group] - the group of display-objects being transformed\n     * @param {boolean}[options.enabledHandles] - specifically define which handles are to be enabled\n     * @param {typeof TransformerHandle}[options.handleConstructor] - a custom transformer-handle class\n     * @param {object}[options.handleStyle] - styling options for the handle. These cannot be modified afterwards!\n     * @param {number}[options.handleStyle.color=0xffffff] - handle color\n     * @param {string}[options.handleStyle.outlineColor=0x000000] - color of the handle outline (stroke)\n     * @param {string}[options.handleStyle.outlineThickness=1] - thickness of the handle outline (stroke)\n     * @param {number}[options.handleStyle.radius=8] - dimensions of the handle\n     * @param {string}[options.handleStyle.shape='tooth'] - 'circle', 'tooth', or 'square'\n     * @param {boolean}[options.handleStyle.scaleInvariant] - whether the handles should not become bigger when the whole scene\n     *  is scaled up.\n     * @param {boolean}[options.rotateEnabled=true] - whether rotate handles are enabled\n     * @param {number[]}[options.rotationSnaps] - the rotation snap angles, in radians. By default, transformer will\n     *      snap for each 1/8th of a revolution.\n     * @param {number}[options.rotationSnapTolerance] - the snap tolerance for rotation in radians\n     * @param {boolean}[options.scaleEnabled=true] - whether scale handles are enabled\n     * @param {boolean}[options.skewEnabled=true] - whether skew handles are enabled\n     * @param {number}[options.skewRadius] - distance of skew handles from center of transformer box\n     *      (`skewTransform` should be enabled)\n     * @param {number[]}[options.skewSnaps] - the skew snap angles, in radians.\n     * @param {number}[options.skewSnapTolerance] - the skew snap tolerance angle.\n     * @param {boolean}[options.translateEnabled=true] - whether dragging the transformer should move the group\n     * @param {boolean}[options.transientGroupTilt=true] - whether the transformer should reset the wireframe's rotation\n     *      after a rotator handle is \"defocused\".\n     * @param {object}[options.wireframeStyle] - styling options for the wireframe.\n     * @param {number}[options.wireframeStyle.color] - color of the lines\n     * @param {number}[options.wireframeStyle.thickness] - thickness of the lines\n     */\n    constructor(options: Partial<ITransformerOptions> = {})\n    {\n    /* eslint-enable max-len */\n        super();\n\n        this.interactive = true;\n        this.cursor = 'move';\n\n        /**\n         * The group of display-objects under transformation.\n         */\n        this.group = options.group || [];\n\n        /**\n         * This will prevent the wireframe's center from shifting on scaling.\n         */\n        this.centeredScaling = !!options.centeredScaling;\n\n        /**\n         * This is used when the display-object group are rendered through a projection transformation (i.e. are disconnected\n         * from the transformer in the scene graph). The transformer project itself into their frame-of-reference using this\n         * transform.\n         *\n         * Specifically, the projection-transform converts points from the group's world space to the transformer's world\n         * space. If you are not applying a projection on the transformer itself, this means it is the group's\n         * world-to-screen transformation.\n         */\n        this.projectionTransform = new Matrix();\n\n        /**\n         * The angles at which rotation should snap.\n         */\n        this.rotationSnaps = options.rotationSnaps || DEFAULT_ROTATION_SNAPS;\n\n        /**\n         * The maximum angular difference for snapping rotation.\n         */\n        this.rotationSnapTolerance = options.rotationSnapTolerance !== undefined\n            ? options.rotationSnapTolerance\n            : DEFAULT_ROTATION_SNAP_TOLERANCE;\n\n        /**\n         * The distance of skewing handles from the group's center.\n         */\n        this.skewRadius = options.skewRadius || 64;\n\n        /**\n         * The angles at which both the horizontal & vertical skew handles should snap.\n         */\n        this.skewSnaps = options.skewSnaps || DEFAULT_SKEW_SNAPS;\n\n        /**\n         * The maximum angular difference for snapping skew handles.\n         */\n        this.skewSnapTolerance = options.skewSnapTolerance !== undefined\n            ? options.skewSnapTolerance\n            : DEFAULT_SKEW_SNAP_TOLERANCE;\n\n        this._rotateEnabled = options.rotateEnabled !== false;\n        this._scaleEnabled = options.scaleEnabled !== false;\n        this._skewEnabled = options.skewEnabled === true;\n\n        /**\n         * This will enable translation on dragging the transformer. By default, it is turned on.\n         *\n         * @default true\n         */\n        this.translateEnabled = options.translateEnabled !== false;\n\n        /**\n         * This will reset the rotation angle after the user finishes rotating a group with more than one display-object.\n         *\n         * @default true\n         */\n        this.transientGroupTilt = options.transientGroupTilt !== undefined ? options.transientGroupTilt : true;\n\n        /**\n         * Draws the bounding boxes\n         */\n        this.wireframe = this.addChild(new Graphics());\n\n        /**\n         * The horizontal skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewX = 0;\n\n        /**\n         * The vertical skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewY = 0;\n\n        /**\n         * The wireframe style applied on the transformer\n         */\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, options.wireframeStyle || {});\n\n        const HandleConstructor = options.handleConstructor || TransformerHandle;\n        const handleStyle = options.handleStyle || {};\n\n        this._handleStyle = handleStyle;\n\n        // Initialize transformer handles\n        const rotatorHandles = {\n            rotator: this.addChild(\n                new HandleConstructor(\n                    'rotator',\n                    handleStyle,\n                    (pointerPosition) =>\n                    {\n                        // The origin is the rotator handle's position, yes.\n                        this.rotateGroup('rotator', pointerPosition);\n                    },\n                    this.commitGroup,\n                )),\n        };\n        const scaleHandles = SCALE_HANDLES.reduce((scaleHandles, handleKey: ScaleHandle) =>\n        {\n            const handleDelta = (pointerPosition: Point): void =>\n            {\n                this.scaleGroup(handleKey as ScaleHandle, pointerPosition);\n            };\n\n            scaleHandles[handleKey] = new HandleConstructor(\n                handleKey,\n                handleStyle,\n                handleDelta,\n                this.commitGroup,\n                HANDLE_TO_CURSOR[handleKey]);\n            scaleHandles[handleKey].visible = this._scaleEnabled;\n            this.addChild(scaleHandles[handleKey]);\n\n            return scaleHandles;\n        }, {});\n        const skewHandles = {\n            skewHorizontal: this.addChild(\n                new HandleConstructor(\n                    'skewHorizontal',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewHorizontal', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n            skewVertical: this.addChild(\n                new HandleConstructor(\n                    'skewVertical',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewVertical', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n        };\n\n        /**\n         * Object mapping handle-names to the handle display-objects.\n         */\n        this.handles = Object.assign({}, rotatorHandles, scaleHandles, skewHandles) as { [H in Handle]: TransformerHandle };\n        this.handles.middleCenter.visible = false;\n        this.handles.skewHorizontal.visible = this._skewEnabled;\n        this.handles.skewVertical.visible = this._skewEnabled;\n\n        // Update groupBounds immediately. This is because mouse events can propagate before the next animation frame.\n        this.groupBounds = new OrientedBounds();\n        this.updateGroupBounds();\n\n        // Pointer events\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('pointerdown', this.onPointerDown, this);\n        this.on('pointermove', this.onPointerMove, this);\n        this.on('pointerup', this.onPointerUp, this);\n        this.on('pointerupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The list of enabled handles, if applied manually.\n     */\n    get enabledHandles(): Array<Handle>\n    {\n        return this._enabledHandles;\n    }\n    set enabledHandles(value: Array<Handle>)\n    {\n        if (!this._enabledHandles && !value)\n        {\n            return;\n        }\n\n        this._enabledHandles = value;\n\n        HANDLES.forEach((handleKey) => { this.handles[handleKey].visible = false; });\n\n        if (value)\n        {\n            value.forEach((handleKey) => { this.handles[handleKey].visible = true; });\n        }\n        else\n        {\n            this.handles.rotator.visible = this._rotateEnabled;\n            this.handles.skewHorizontal.visible = this._skewEnabled;\n            this.handles.skewVertical.visible = this._skewEnabled;\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter') return;\n\n                this.handles[handleKey].visible = this._scaleEnabled;\n            });\n        }\n    }\n\n    /**\n     * The currently applied handle style. If you have edited the transformer handles directly, this may be inaccurate.\n     */\n    get handleStyle(): Partial<ITransformerHandleStyle>\n    {\n        return this._handleStyle;\n    }\n    set handleStyle(value: Partial<ITransformerHandleStyle>)\n    {\n        const handles = this.handles;\n\n        for (const handleKey in handles)\n        {\n            (handles[handleKey] as TransformerHandle).style = value;\n        }\n\n        this._handleStyle = value;\n    }\n\n    /**\n     * This will enable the rotate handles.\n     */\n    get rotateEnabled(): boolean\n    {\n        return this._rotateEnabled;\n    }\n    set rotateEnabled(value: boolean)\n    {\n        if (!this._rotateEnabled !== value)\n        {\n            this._rotateEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.rotator.visible = value;\n        }\n    }\n\n    /**\n     * This will enable the scale handles.\n     */\n    get scaleEnabled(): boolean\n    {\n        return this._scaleEnabled;\n    }\n    set scaleEnabled(value: boolean)\n    {\n        if (!this._scaleEnabled !== value)\n        {\n            this._scaleEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter')\n                {\n                    return;\n                }\n\n                this.handles[handleKey].visible = value;\n            });\n        }\n    }\n\n    /**\n     * This will enable the skew handles.\n     */\n    get skewEnabled(): boolean\n    {\n        return this._skewEnabled;\n    }\n    set skewEnabled(value: boolean)\n    {\n        if (this._skewEnabled !== value)\n        {\n            this._skewEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.skewHorizontal.visible = value;\n            this.handles.skewVertical.visible = value;\n        }\n    }\n\n    /**\n     * The currently applied wireframe style.\n     */\n    get wireframeStyle(): Partial<ITransformerStyle>\n    {\n        return this._wireframeStyle;\n    }\n    set wireframeStyle(value: Partial<ITransformerStyle>)\n    {\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, value);\n    }\n\n    /**\n     * This will translate the group by {@code delta} in their world-space.\n     *\n     * NOTE: There is no handle that provides translation. The user drags the transformer directly.\n     *\n     * @param delta\n     */\n    translateGroup = (delta: Point): void =>\n    {\n        // Translation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(delta.x, delta.y);\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will rotate the group such that the handle will come to {@code pointerPosition}.\n     *\n     * @param handle - the rotator handle was dragged\n     * @param pointerPosition - the new pointer position, in screen space\n     */\n    rotateGroup = (handle: RotateHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n        const handlePosition = this.worldTransform.apply(this.handles[handle].position, tempPoint);\n\n        this.projectionTransform.applyInverse(handlePosition, handlePosition);\n        pointerPosition = this.projectionTransform.applyInverse(pointerPosition, tempPointer);\n\n        // Center of rotation - does not change in transformation\n        const rOrigin = bounds.center;\n\n        // Original tilt\n        const orgAngle = Math.atan2(handlePosition.y - rOrigin.y, handlePosition.x - rOrigin.x);\n        // Final tilt\n        const dstAngle = Math.atan2(pointerPosition.y - rOrigin.y, pointerPosition.x - rOrigin.x);\n        // The angle by which bounds should be rotated\n        let deltaAngle = dstAngle - orgAngle;\n\n        // Snap\n        let newRotation = this.groupBounds.rotation + deltaAngle;\n\n        newRotation = this.snapAngle(newRotation, this.rotationSnapTolerance, this.rotationSnaps);\n        deltaAngle = newRotation - this.groupBounds.rotation;\n\n        // Rotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-rOrigin.x, -rOrigin.y)\n            .rotate(deltaAngle)\n            .translate(rOrigin.x, rOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(newRotation);\n\n        // Rotation moves both skew.x & skew.y\n        this._skewX += deltaAngle;\n        this._skewY += deltaAngle;\n    };\n\n    /**\n     * This will scale the group such that the scale handle will come under {@code pointerPosition}.\n     *\n     * @param handle - the scaling handle that was dragged\n     * @param pointerPosition - the new pointer position, in screen space\n     */\n    scaleGroup = (handle: ScaleHandle, pointerPosition: Point): void =>\n    {\n        // Directions along x,y axes that will produce positive scaling\n        const xDir = SCALE_COMPONENTS[handle].x;\n        const yDir = SCALE_COMPONENTS[handle].y;\n\n        const bounds = this.groupBounds;\n        const angle = bounds.rotation;\n        const innerBounds = bounds.innerBounds;\n\n        // Position of handle in the group's world-space\n        const handlePosition = this.worldTransform.apply(this.handles[handle].position, tempPoint);\n\n        this.projectionTransform.applyInverse(handlePosition, handlePosition);\n        pointerPosition = this.projectionTransform.applyInverse(pointerPosition, tempPointer);\n\n        // Delta vector in world frame\n        const dx = pointerPosition.x - handlePosition.x;\n        const dy = pointerPosition.y - handlePosition.y;\n\n        // Unit vector along u-axis (horizontal axis after rotation) of bounds\n        const uxvec = (bounds.topRight.x - bounds.topLeft.x) / innerBounds.width;\n        const uyvec = (bounds.topRight.y - bounds.topLeft.y) / innerBounds.width;\n\n        // Unit vector along v-axis (vertical axis after rotation) of bounds\n        const vxvec = (bounds.bottomLeft.x - bounds.topLeft.x) / innerBounds.height;\n        const vyvec = (bounds.bottomLeft.y - bounds.topLeft.y) / innerBounds.height;\n\n        // Delta vector in rotated frame of bounds\n        const du = (dx * uxvec) + (dy * uyvec);\n        const dv = (dx * vxvec) + (dy * vyvec);\n\n        // Scaling factors along x,y axes\n        const sx = 1 + (du * xDir / innerBounds.width);\n        const sy = 1 + (dv * yDir / innerBounds.height);\n\n        const matrix = tempMatrix.identity();\n\n        if (xDir !== 0)\n        {\n            // Origin of horizontal scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const hsOrigin = !this.centeredScaling ? (xDir === 1 ? bounds.topLeft : bounds.topRight) : bounds.center;\n\n            matrix.translate(-hsOrigin.x, -hsOrigin.y)\n                .rotate(-angle)\n                .scale(sx, 1)\n                .rotate(angle)\n                .translate(hsOrigin.x, hsOrigin.y);\n        }\n\n        if (yDir !== 0)\n        {\n            // Origin of vertical scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const vsOrigin = !this.centeredScaling ? (yDir === 1 ? bounds.topLeft : bounds.bottomLeft) : bounds.center;\n\n            matrix.translate(-vsOrigin.x, -vsOrigin.y)\n                .rotate(-angle)\n                .scale(1, sy)\n                .rotate(angle)\n                .translate(vsOrigin.x, vsOrigin.y);\n        }\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will skew the group such that the skew handle would move to the {@code pointerPosition}.\n     *\n     * @param handle\n     * @param pointerPosition - pointer position, in screen space\n     */\n    skewGroup = (handle: SkewHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n\n        // Destination point\n        const dst = tempPoint.copyFrom(pointerPosition);\n\n        this.projectionTransform.applyInverse(dst, dst);\n\n        // Center of skew (same as center of rotation!)\n        const sOrigin = bounds.center;\n\n        // Skew matrix\n        const matrix = tempMatrix.identity()\n            .translate(-sOrigin.x, -sOrigin.y);\n        let rotation = this.groupBounds.rotation;\n\n        if (handle === 'skewHorizontal')\n        {\n            const oldSkew = this._skewX;\n\n            // Calculate new skew\n            this._skewX = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x);\n            this._skewX = this.snapAngle(this._skewX, this.skewSnapTolerance, this.skewSnaps);\n\n            // Skew by new skew.x\n            matrix.prepend(createVerticalSkew(-oldSkew));\n            matrix.prepend(createVerticalSkew(this._skewX));\n        }\n        else // skewVertical\n        {\n            const oldSkew = this._skewY;\n\n            // Calculate new skew\n            const newSkew = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x) - (Math.PI / 2);\n\n            this._skewY = newSkew;\n            this._skewY = this.snapAngle(this._skewY, this.skewSnapTolerance, this.skewSnaps);\n\n            // HINT: skewY is applied negatively b/c y-axis is flipped\n            matrix.prepend(createHorizontalSkew(oldSkew));\n            matrix.prepend(createHorizontalSkew(-this._skewY));\n\n            rotation -= this._skewY - oldSkew;\n        }\n\n        matrix.translate(sOrigin.x, sOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(rotation);\n    };\n\n    /**\n     * This is called after the user finishes dragging a handle. If {@link this.transientGroupTilt} is enabled, it will\n     * reset the rotation of this group (if more than one display-object is grouped).\n     */\n    commitGroup = (): void =>\n    {\n        if (this.transientGroupTilt !== false && this.group.length > 1)\n        {\n            this.updateGroupBounds(0);\n        }\n    };\n\n    /**\n     * This will update the transformer's geometry and render it to the canvas.\n     *\n     * @override\n     * @param renderer\n     */\n    render(renderer: Renderer): void\n    {\n        this.draw();\n\n        super.render(renderer);\n    }\n\n    /**\n     * Recalculates the transformer's geometry. This is called on each render.\n     */\n    protected draw(): void\n    {\n        const targets = this.group;\n        const { color, thickness } = this._wireframeStyle;\n\n        // Updates occur right here!\n        this.wireframe.clear()\n            .lineStyle(thickness, color);\n\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this.drawBounds(Transformer.calculateOrientedBounds(targets[i], tempBounds));\n        }\n\n        // groupBounds may change on each render-loop b/c of any ongoing animation\n        const groupBounds = targets.length !== 1\n            ? Transformer.calculateGroupOrientedBounds(targets, this.groupBounds.rotation, tempBounds, true)\n            : Transformer.calculateOrientedBounds(targets[0], tempBounds);// Auto-detect rotation\n\n        // Redraw skeleton and position handles\n        this.drawBounds(groupBounds);\n        this.drawHandles(groupBounds);\n\n        // Update cached groupBounds\n        this.groupBounds.copyFrom(groupBounds);\n    }\n\n    /**\n     * Draws the bounding box into {@code this.wireframe}.\n     *\n     * @param bounds\n     */\n    protected drawBounds(bounds: OrientedBounds | AxisAlignedBounds): void\n    {\n        const hull = tempHull;\n\n        // Bring hull into local-space\n        for (let i = 0; i < 4; i++)\n        {\n            this.toTransformerLocal(bounds.hull[i], hull[i]);\n        }\n\n        // Fill polygon with ultra-low alpha to capture pointer events.\n        this.wireframe\n            .beginFill(0xffffff, 1e-4)\n            .drawPolygon(hull)\n            .endFill();\n    }\n\n    /**\n     * Draw the handles and any remaining parts of the wireframe.\n     *\n     * @param groupBounds\n     */\n    protected drawHandles(groupBounds: OrientedBounds): void\n    {\n        const handles = this.handles;\n        const {\n            topLeft: worldTopLeft,\n            topRight: worldTopRight,\n            bottomLeft: worldBottomLeft,\n            bottomRight: worldBottomRight,\n            center: worldCenter,\n        } = groupBounds;\n\n        const [topLeft, topRight, bottomLeft, bottomRight] = tempHull;\n        const center = tempPoint;\n\n        this.toTransformerLocal(worldTopLeft, topLeft);\n        this.toTransformerLocal(worldTopRight, topRight);\n        this.toTransformerLocal(worldBottomLeft, bottomLeft);\n        this.toTransformerLocal(worldBottomRight, bottomRight);\n        this.toTransformerLocal(worldCenter, center);\n\n        if (this._rotateEnabled)\n        {\n            // Midpoint from topLeft to topRight\n            const bx = (topLeft.x + topRight.x) / 2;\n            const by = (topLeft.y + topRight.y) / 2;\n\n            // Vector perpendicular to <bx,by>.\n            let px = -(topLeft.y - topRight.y);\n            let py = (topLeft.x - topRight.x);\n\n            // Normalize <px,py> to 32 units.\n            const pl = Math.sqrt((px * px) + (py * py));\n\n            px *= 32 / pl;\n            py *= 32 / pl;\n\n            handles.rotator.position.x = bx + px;\n            handles.rotator.position.y = by + py;\n\n            this.wireframe.moveTo(bx, by)\n                .lineTo(handles.rotator.position.x, handles.rotator.position.y);\n        }\n\n        if (this._scaleEnabled)\n        {\n            // Scale handles\n            handles.topLeft.position.copyFrom(topLeft);\n            handles.topCenter.position.set((topLeft.x + topRight.x) / 2, (topLeft.y + topRight.y) / 2);\n            handles.topRight.position.copyFrom(topRight);\n            handles.middleLeft.position.set((topLeft.x + bottomLeft.x) / 2, (topLeft.y + bottomLeft.y) / 2);\n            handles.middleCenter.position.set((topLeft.x + bottomRight.x) / 2, (topLeft.y + bottomRight.y) / 2);\n            handles.middleRight.position.set((topRight.x + bottomRight.x) / 2, (topRight.y + bottomRight.y) / 2);\n            handles.bottomLeft.position.copyFrom(bottomLeft);\n            handles.bottomCenter.position.set((bottomLeft.x + bottomRight.x) / 2, (bottomLeft.y + bottomRight.y) / 2);\n            handles.bottomRight.position.copyFrom(bottomRight);\n        }\n\n        if (this._skewEnabled)\n        {\n            const cx = center.x;\n            const cy = center.y;\n\n            // Transform center into screen space\n            this.worldTransform.apply(center, center);\n\n            // Calculate skew handle positions in screen space, and then transform back into local-space. This ensures that\n            // the handles appear at skewRadius distance, regardless of the projection.\n            handles.skewHorizontal.position.set(\n                center.x + (Math.cos(this._skewX) * this.skewRadius),\n                center.y + (Math.sin(this._skewX) * this.skewRadius));\n            handles.skewVertical.position.set( // HINT: Slope = skew.y + Math.PI / 2\n                center.x + (-Math.sin(this._skewY) * this.skewRadius),\n                center.y + (Math.cos(this._skewY) * this.skewRadius));\n            this.worldTransform.applyInverse(handles.skewHorizontal.position, handles.skewHorizontal.position);\n            this.worldTransform.applyInverse(handles.skewVertical.position, handles.skewVertical.position);\n\n            // Restore center to local-space\n            center.set(cx, cy);\n\n            this.wireframe\n                .beginFill(this.wireframeStyle.color)\n                .drawCircle(center.x, center.y, this.wireframeStyle.thickness * 2)\n                .endFill();\n            this.wireframe\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewHorizontal.x, handles.skewHorizontal.y)\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewVertical.x, handles.skewVertical.y);\n        }\n\n        // Update transforms\n        for (const handleName in handles)\n        {\n            let rotation = this.groupBounds.rotation;\n\n            if (handleName === 'skewHorizontal')\n            {\n                rotation = this._skewX;\n            }\n            else if (handleName === 'skewVertical')\n            {\n                rotation = this._skewY;\n            }\n\n            const handle: TransformerHandle = handles[handleName];\n\n            handle.rotation = rotation;\n            handle.getBounds(false, tempRect);\n        }\n    }\n\n    /**\n     * Called on the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        const lastPointerPosition = this._pointerPosition;\n        const currentPointerPosition = tempPoint.copyFrom(e.data.global);\n\n        const cx = currentPointerPosition.x;\n        const cy = currentPointerPosition.y;\n\n        // Translate group by difference\n        if (this._pointerDragging && this.translateEnabled)\n        {\n            const [worldOrigin, worldDestination, worldDelta] = tempHull;\n\n            // HINT: The pointer has moved from lastPointerPosition to currentPointerPosition in the transformer's\n            // world space. However, we want to translate the display-object's in their world space; to do this,\n            // we project (0,0) and the delta into their world-space, and take the difference.\n            worldOrigin.set(0, 0);\n            worldDestination.set(\n                currentPointerPosition.x - lastPointerPosition.x,\n                currentPointerPosition.y - lastPointerPosition.y);\n            this.projectionTransform.applyInverse(worldOrigin, worldOrigin);\n            this.projectionTransform.applyInverse(worldDestination, worldDestination);\n\n            worldDelta.set(worldDestination.x - worldOrigin.x, worldDestination.y - worldOrigin.y);\n\n            this.translateGroup(worldDelta);\n        }\n\n        this._pointerPosition.x = cx;\n        this._pointerPosition.y = cy;\n        this._pointerDragging = true;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointerup` and `pointerupoutside` events. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n        this._pointerDown = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Applies the given transformation matrix {@code delta} to all the display-objects in the group.\n     *\n     * @param delta - transformation matrix\n     * @param skipUpdate - whether to skip updating the group-bounds after applying the transform\n     */\n    private prependTransform(delta: Matrix, skipUpdate = false): void\n    {\n        const group = this.group;\n\n        for (let i = 0, j = group.length; i < j; i++)\n        {\n            multiplyTransform(group[i], delta, false);\n        }\n\n        if (!skipUpdate)\n        {\n            this.updateGroupBounds();\n        }\n\n        this.emit('transformchange');\n    }\n\n    /**\n     * Recalculates {@code this.groupBounds} at the same angle.\n     *\n     * @param rotation - override the group's rotation\n     */\n    private updateGroupBounds(rotation: number = this.groupBounds.rotation): void\n    {\n        Transformer.calculateGroupOrientedBounds(this.group, rotation, this.groupBounds);\n    }\n\n    /**\n     * Snaps the given {@code angle} to one of the snapping angles, if possible.\n     *\n     * @param angle - the input angle\n     * @param snapTolerance - the maximum difference b/w the given angle & a snapping angle\n     * @param snaps - the snapping angles\n     * @returns the snapped angle\n     */\n    private snapAngle(angle: number, snapTolerance: number, snaps?: number[]): number\n    {\n        angle = angle % (Math.PI * 2);\n\n        if (!snaps || snaps.length === 1 || !snapTolerance)\n        {\n            return angle;\n        }\n\n        for (let i = 0, j = snaps.length; i < j; i++)\n        {\n            if (Math.abs(angle - snaps[i]) <= snapTolerance)\n            {\n                return snaps[i];\n            }\n        }\n\n        return angle;\n    }\n\n    /**\n     * Transforms {@code input} from the group's world space into the transformer's local space, and puts the result\n     * into {@code output}.\n     *\n     * @param input\n     * @param output\n     * @returns the output\n     */\n    private toTransformerLocal(input: Point, output: Point): Point\n    {\n        this.projectionTransform.apply(input, output);\n        this.worldTransform.applyInverse(output, output);\n\n        return output;\n    }\n\n    /**\n     * Calculates the positions of the four corners of the display-object. The quadrilateral formed by\n     * these points will be the tightest fit around it.\n     *\n     * @param displayObject - The display object whose corners are to be calculated\n     * @param transform - The transform applied on the display-object. By default, this is its world-transform\n     * @param corners - Optional array of four points to put the result into\n     * @param index - Optional index into \"corners\"\n     * @returns an array of four points holding the positions of the corners\n     */\n    static calculateTransformedCorners(\n        displayObject: DisplayObject,\n        transform: Matrix = displayObject.worldTransform,\n        corners?: Point[],\n        index = 0,\n    ): Point[]\n    {\n        const localBounds = displayObject.getLocalBounds();\n\n        // Don't modify transforms\n        displayObject.getBounds();\n\n        corners = corners || [new Point(), new Point(), new Point(), new Point()];\n        corners[index].set(localBounds.x, localBounds.y);\n        corners[index + 1].set(localBounds.x + localBounds.width, localBounds.y);\n        corners[index + 2].set(localBounds.x + localBounds.width, localBounds.y + localBounds.height);\n        corners[index + 3].set(localBounds.x, localBounds.y + localBounds.height);\n\n        transform.apply(corners[index], corners[index]);\n        transform.apply(corners[index + 1], corners[index + 1]);\n        transform.apply(corners[index + 2], corners[index + 2]);\n        transform.apply(corners[index + 3], corners[index + 3]);\n\n        return corners;\n    }\n\n    /**\n     * Calculates the oriented bounding box of the display-object. This would not bending with any skew\n     * applied on the display-object, i.e. it is guaranteed to be rectangular.\n     *\n     * @param displayObject\n     * @param bounds - the bounds instance to set\n     */\n    static calculateOrientedBounds(displayObject: DisplayObject, bounds?: OrientedBounds): OrientedBounds\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n\n        // Decompose displayObject.worldTransform to get its (world) rotation\n        decomposeTransform(tempTransform, displayObject.worldTransform);\n\n        tempTransform.updateLocalTransform();\n\n        const angle = tempTransform.rotation;\n        const corners = Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, tempCorners);\n\n        // Calculate centroid, which is our center of rotatation\n        const cx = (corners[0].x + corners[1].x + corners[2].x + corners[3].x) / 4;\n        const cy = (corners[0].y + corners[1].y + corners[2].y + corners[3].y) / 4;\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-cx, -cy)\n            .rotate(-tempTransform.rotation)\n            .translate(cx, cy);\n\n        // Calculate unrotated corners\n        matrix.apply(corners[0], corners[0]);\n        matrix.apply(corners[1], corners[1]);\n        matrix.apply(corners[2], corners[2]);\n        matrix.apply(corners[3], corners[3]);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.rotation = angle;\n        bounds.innerBounds.x = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        bounds.innerBounds.y = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        bounds.innerBounds.width = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x) - bounds.innerBounds.x;\n        bounds.innerBounds.height = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y) - bounds.innerBounds.y;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the oriented bounding box of a group of display-objects at a specific angle.\n     *\n     * @param group\n     * @param rotation\n     * @param bounds\n     * @param skipUpdate\n     */\n    static calculateGroupOrientedBounds(\n        group: DisplayObject[],\n        rotation: number,\n        bounds?: OrientedBounds,\n        skipUpdate = false,\n    ): OrientedBounds\n    {\n        const groupLength = group.length;\n        const frames = pointPool.allocateArray(groupLength * 4);// Zero allocations!\n\n        // Calculate display-object frame vertices\n        for (let i = 0; i < groupLength; i++)\n        {\n            const displayObject = group[i];\n\n            // Update worldTransform\n            if (!skipUpdate)\n            {\n                const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n                displayObject.updateTransform();\n                displayObject.disableTempParent(parent);\n            }\n\n            Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, frames, i * 4);\n        }\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .rotate(-rotation);\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = -Number.MAX_VALUE;\n        let maxY = -Number.MAX_VALUE;\n\n        // Unrotate all frame vertices, calculate minX, minY, maxX, maxY for innerBounds\n        for (let i = 0, j = frames.length; i < j; i++)\n        {\n            const point = frames[i];\n\n            matrix.apply(point, point);\n\n            const x = point.x;\n            const y = point.y;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        pointPool.releaseArray(frames);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.innerBounds.x = minX;\n        bounds.innerBounds.y = minY;\n        bounds.innerBounds.width = maxX - minX;\n        bounds.innerBounds.height = maxY - minY;\n        bounds.rotation = rotation;\n\n        matrix.applyInverse(bounds.center, tempPoint);\n        bounds.center.copyFrom(tempPoint);\n\n        return bounds;\n    }\n}\n\n/**\n * This is fired when the transformer modifies the transforms of display-objects.\n *\n * @event Transformer#transformchange\n */\n"],"names":["DEFAULT_HANDLE_STYLE","color","outlineColor","outlineThickness","radius","shape","TransformerHandle","Graphics","[object Object]","handle","styleOpts","handler","commit","cursor","super","style","Object","assign","this","_handle","_style","onHandleDelta","onHandleCommit","_dirty","interactive","_pointerDown","_pointerDragging","_pointerPosition","Point","on","onPointerDown","onPointerMove","onPointerUp","value","renderer","draw","render","lineStyle","beginFill","drawRect","drawPolygon","drawCircle","Math","sqrt","endFill","e","stopPropagation","onDrag","onDragStart","onDragEnd","copyFrom","data","global","currentPosition","_","tempMatrix","Matrix","createHorizontalSkew","angle","matrix","identity","c","tan","createVerticalSkew","b","decomposeTransform","transform","rotation","pivot","a","d","skewX","atan2","skewY","set","x","y","skew","scale","position","tx","ty","tempParentMatrix","multiplyTransform","displayObject","skipUpdate","parent","enableTempParent","updateTransform","disableTempParent","worldTransform","parentTransform","IDENTITY","prepend","invert","tempTransform","Transform","tempCorners","tempPoint","tempBounds","OrientedBounds","tempRect","Rectangle","tempHull","tempPointer","pointPool","ObjectPoolFactory","build","HANDLE_TO_CURSOR","topLeft","topCenter","topRight","middleLeft","middleRight","bottomLeft","bottomCenter","bottomRight","SCALE_HANDLES","SCALE_COMPONENTS","middleCenter","HANDLES","DEFAULT_ROTATION_SNAPS","PI","DEFAULT_ROTATION_SNAP_TOLERANCE","DEFAULT_SKEW_SNAPS","DEFAULT_SKEW_SNAP_TOLERANCE","DEFAULT_WIREFRAME_STYLE","thickness","Transformer","Container","options","delta","translate","prependTransform","pointerPosition","bounds","groupBounds","handlePosition","apply","handles","projectionTransform","applyInverse","rOrigin","center","orgAngle","deltaAngle","newRotation","snapAngle","rotationSnapTolerance","rotationSnaps","rotate","updateGroupBounds","_skewX","_skewY","xDir","yDir","innerBounds","dx","dy","uxvec","width","uyvec","dv","height","sx","sy","hsOrigin","centeredScaling","vsOrigin","dst","sOrigin","oldSkew","skewSnapTolerance","skewSnaps","newSkew","transientGroupTilt","group","length","undefined","skewRadius","_rotateEnabled","rotateEnabled","_scaleEnabled","scaleEnabled","_skewEnabled","skewEnabled","translateEnabled","wireframe","addChild","_wireframeStyle","wireframeStyle","HandleConstructor","handleConstructor","handleStyle","_handleStyle","rotatorHandles","rotator","rotateGroup","commitGroup","scaleHandles","reduce","handleKey","scaleGroup","visible","skewHandles","skewHorizontal","skewGroup","skewVertical","enabledHandles","_enabledHandles","forEach","targets","clear","i","j","drawBounds","calculateOrientedBounds","calculateGroupOrientedBounds","drawHandles","hull","toTransformerLocal","worldTopLeft","worldTopRight","worldBottomLeft","worldBottomRight","worldCenter","bx","by","px","py","pl","moveTo","lineTo","cx","cy","cos","sin","handleName","getBounds","lastPointerPosition","currentPointerPosition","worldOrigin","worldDestination","worldDelta","translateGroup","emit","snapTolerance","snaps","abs","input","output","corners","index","localBounds","getLocalBounds","updateLocalTransform","calculateTransformedCorners","min","max","groupLength","frames","allocateArray","minX","Number","MAX_VALUE","minY","maxX","maxY","point","releaseArray"],"mappings":"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"}