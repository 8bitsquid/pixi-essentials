{"version":3,"file":"transformer.js","sources":["../src/TransformerHandle.ts","../src/utils/skewTransform.ts","../src/utils/decomposeTransform.ts","../src/utils/multiplyTransform.ts","../src/Transformer.ts"],"sourcesContent":["/// <reference path=\"./types.d.ts\" />\n\nimport { Graphics } from '@pixi/graphics';\nimport { Point } from '@pixi/math';\nimport { Renderer } from '@pixi/core';\n\nimport { InteractionEvent } from '@pixi/interaction';\nimport type { Handle } from './Transformer';\n\n/**\n * @see TransformerHandle#style\n */\nexport interface ITransformerHandleStyle\n{\n    /**\n     * Fill color of the handle\n     */\n    color: number;\n\n    /**\n     * Outline color of the handle\n     */\n    outlineColor: number;\n\n    /**\n     * Outline thickness around the handle\n     */\n    outlineThickness: number;\n\n    /**\n     * Radius (or size for non-circular handles) of the handle\n     */\n    radius: number;\n\n    /**\n     * {@link TransformerHandle} provides three types of handle shapes - 'circle', 'square', 'tooth'.\n     */\n    shape: string;\n\n    /**\n     * This will prevent the handles from becoming larger when the whole scene is scaled up. For example,\n     * if you set `scale=2` on a `Transformer`, then its handles will not become 2x larger with this enabled.\n     */\n    scaleInvariant: boolean;\n}\n\n/**\n * The default transformer handle style.\n *\n * @ignore\n */\nconst DEFAULT_HANDLE_STYLE: ITransformerHandleStyle = {\n    color: 0xffffff,\n    outlineColor: 0x000000,\n    outlineThickness: 1,\n    radius: 8,\n    shape: 'tooth',\n    scaleInvariant: true,\n};\n\n// Preallocated objects\nconst tempPoint = new Point();\n\n/**\n * The transfomer handle base implementation.\n */\nexport class TransformerHandle extends Graphics\n{\n    onHandleDelta: (pointerPosition: Point) => void;\n    onHandleCommit: () => void;\n\n    protected _handle: Handle;\n    protected _style: ITransformerHandleStyle;\n    protected _dirty: boolean;\n    protected _drawTransform: {\n        scale2: { x: number; y: number };\n    };\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /**\n     * @param {string} handle - the type of handle being drawn\n     * @param {object} styleOpts - styling options passed by the user\n     * @param {function} handler - handler for drag events, it receives the pointer position; used by {@code onDrag}.\n     * @param {function} commit - handler for drag-end events.\n     * @param {string}[cursor='move'] - a custom cursor to be applied on this handle\n     */\n    constructor(\n        handle: Handle,\n        styleOpts: Partial<ITransformerHandleStyle> = {},\n        handler: (pointerPosition: Point) => void,\n        commit: () => void,\n        cursor?: string)\n    {\n        super();\n\n        const style: ITransformerHandleStyle = Object.assign({}, DEFAULT_HANDLE_STYLE, styleOpts);\n\n        this._handle = handle;\n        this._style = style;\n        this.onHandleDelta = handler;\n        this.onHandleCommit = commit;\n\n        /**\n         * This flags whether this handle should be redrawn in the next frame due to style changes.\n         */\n        this._dirty = true;\n\n        /**\n         * This tracks attributes of the world transform on each render. It is used to check whether redrawing is needed\n         * to maintain scale invariancy (if {@code style.scaleInvariant} is enabled).\n         */\n        this._drawTransform = {\n            scale2: {\n                x: 1,\n                y: 1,\n            },\n        };\n\n        // Pointer events\n        this.interactive = true;\n        this.cursor = cursor || 'move';\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('mousedown', this.onPointerDown, this);\n        this.on('mousemove', this.onPointerMove, this);\n        this.on('mouseup', this.onPointerUp, this);\n        this.on('mouseupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The currently applied handle style.\n     */\n    get style(): Partial<ITransformerHandleStyle>\n    {\n        return this._style;\n    }\n    set style(value: Partial<ITransformerHandleStyle>)\n    {\n        this._style = Object.assign({}, DEFAULT_HANDLE_STYLE, value);\n        this._dirty = true;\n    }\n\n    render(renderer: Renderer): void\n    {\n        let dirty = this._dirty;\n        let sx = 1;\n        let sy = 1;\n\n        if (this.style.scaleInvariant)\n        {\n            const worldTransform = this.worldTransform;\n            const drawTransform = this._drawTransform;\n\n            // Decompose world transform scale (squared)\n            sx = (worldTransform.a ** 2) + (worldTransform.b ** 2);\n            sy = (worldTransform.c ** 2) + (worldTransform.d ** 2);\n\n            dirty = dirty\n                || sx !== drawTransform.scale2.x\n                || sy !== drawTransform.scale2.y;\n        }\n\n        if (dirty)\n        {\n            this.draw();\n\n            this._dirty = false;\n            this._drawTransform.scale2.x = sx;\n            this._drawTransform.scale2.y = sy;\n        }\n\n        super.render(renderer);\n    }\n\n    /**\n     * Redraws the handle's geometry. This is called on a `render` if {@code this._dirty} is true.\n     */\n    protected draw(): void\n    {\n        const handle = this._handle;\n        const style = this._style;\n\n        // HINT: Radius is adjusted if scale-invariancy is enabled\n        const radius = style.radius / (this._style.scaleInvariant ? Math.sqrt(this._drawTransform.scale2.x) : 1);\n\n        this.lineStyle(style.outlineThickness, style.outlineColor)\n            .beginFill(style.color);\n\n        if (style.shape === 'square')\n        {\n            this.drawRect(-radius / 2, -radius / 2, radius, radius);\n        }\n        else if (style.shape === 'tooth')\n        {\n            switch (handle)\n            {\n                case 'middleLeft':\n                    this.drawPolygon([\n                        -radius / 2, -radius / 2,\n                        -radius / 2, radius / 2,\n                        radius / 2, radius / 2,\n                        radius * 1.1, 0,\n                        radius / 2, -radius / 2,\n                    ]);\n                    break;\n                case 'topCenter':\n                    this.drawPolygon([\n                        -radius / 2, -radius / 2,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                        0, radius * 1.1,\n                        -radius / 2, radius / 2,\n                    ]);\n                    break;\n                case 'middleRight':\n                    this.drawPolygon([\n                        -radius / 2, radius / 2,\n                        -radius * 1.1, 0,\n                        -radius / 2, -radius / 2,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                    ]);\n                    break;\n                case 'bottomCenter':\n                    this.drawPolygon([\n                        0, -radius * 1.1,\n                        radius / 2, -radius / 2,\n                        radius / 2, radius / 2,\n                        -radius / 2, radius / 2,\n                        -radius / 2, -radius / 2,\n                    ]);\n                    break;\n                case 'rotator':\n                    this.drawCircle(0, 0, radius / Math.sqrt(2));\n                    break;\n                default:\n                    this.drawRect(-radius / 2, -radius / 2, radius, radius);\n                    break;\n            }\n        }\n        else\n        {\n            this.drawCircle(0, 0, radius);\n        }\n\n        this.endFill();\n    }\n\n    /**\n     * Handles the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Handles the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        if (this._pointerDragging)\n        {\n            this.onDrag(e);\n        }\n        else\n        {\n            this.onDragStart(e);\n        }\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Handles the `pointerup` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        if (this._pointerDragging)\n        {\n            this.onDragEnd(e);\n        }\n\n        this._pointerDown = false;\n    }\n\n    /**\n     * Called on the first `pointermove` when {@code this._pointerDown} is true. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onDragStart(e: InteractionEvent): void\n    {\n        this._pointerPosition.copyFrom(e.data.global);\n\n        this._pointerDragging = true;\n    }\n\n    /**\n     * Called on a `pointermove` when {@code this._pointerDown} & {@code this._pointerDragging}.\n     *\n     * @param e\n     */\n    protected onDrag(e: InteractionEvent): void\n    {\n        const currentPosition = e.data.global;\n\n        // Callback handles the rest!\n        if (this.onHandleDelta)\n        {\n            this.onHandleDelta(currentPosition);\n        }\n\n        this._pointerPosition.copyFrom(currentPosition);\n    }\n\n    /**\n     * Called on a `pointerup` or `pointerupoutside` & {@code this._pointerDragging} was true.\n     *\n     * @param _\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected onDragEnd(_: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n\n        if (this.onHandleCommit)\n        {\n            this.onHandleCommit();\n        }\n    }\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * @param angle\n * @returns a horizontal skew matrix\n */\nexport function createHorizontalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.c = Math.tan(angle);\n\n    return matrix;\n}\n\n/**\n * @param angle\n * @returns a vertical skew matrix\n */\nexport function createVerticalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.b = Math.tan(angle);\n\n    return matrix;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport type { Transform, Matrix } from '@pixi/math';\n\n/**\n * Decomposes the matrix into transform, while preserving rotation & the pivot.\n *\n * @ignore\n * @param transform\n * @param matrix\n * @param rotation\n * @param pivot\n */\nexport function decomposeTransform(\n    transform: Transform,\n    matrix: Matrix,\n    rotation?: number,\n    pivot = transform.pivot,\n): Transform\n{\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    rotation = rotation !== undefined && rotation !== null ? rotation : skewY;\n\n    // set pivot\n    transform.pivot.set(pivot.x, pivot.y);\n\n    // next set rotation, skew angles\n    transform.rotation = rotation;\n    transform.skew.x = rotation + skewX;\n    transform.skew.y = -rotation + skewY;\n\n    // next set scale\n    transform.scale.x = Math.sqrt((a * a) + (b * b));\n    transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n    // next set position\n    transform.position.x = matrix.tx + ((pivot.x * matrix.a) + (pivot.y * matrix.c));\n    transform.position.y = matrix.ty + ((pivot.x * matrix.b) + (pivot.y * matrix.d));\n\n    return transform;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\nimport { decomposeTransform } from './decomposeTransform';\n\nimport type { DisplayObject } from '@pixi/display';\n\nconst tempMatrix = new Matrix();\nconst tempParentMatrix = new Matrix();\n\n/**\n * Multiplies the transformation matrix {@code transform} to the display-object's transform.\n *\n * @param displayObject\n * @param transform\n * @param skipUpdate\n */\nexport function multiplyTransform(displayObject: DisplayObject, transform: Matrix, skipUpdate?: boolean): void\n{\n    if (!skipUpdate)\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n    }\n\n    const worldTransform = displayObject.worldTransform;\n    const parentTransform = displayObject.parent\n        ? tempParentMatrix.copyFrom(displayObject.parent.worldTransform)\n        : Matrix.IDENTITY;\n\n    tempMatrix.copyFrom(worldTransform);\n    tempMatrix.prepend(transform);\n    tempMatrix.prepend(parentTransform.invert());// gets new \"local\" transform\n\n    decomposeTransform(displayObject.transform, tempMatrix);\n}\n","/// <reference path=\"./types.d.ts\" />\n\nimport { Renderer } from '@pixi/core';\nimport { DisplayObject, Container } from '@pixi/display';\nimport { Point, Matrix, Transform, Rectangle } from '@pixi/math';\nimport { Graphics } from '@pixi/graphics';\nimport { AxisAlignedBounds, OrientedBounds } from '@pixi-essentials/bounds';\nimport { ObjectPoolFactory } from '@pixi-essentials/object-pool';\nimport { TransformerHandle } from './TransformerHandle';\nimport { createHorizontalSkew, createVerticalSkew } from './utils/skewTransform';\nimport { decomposeTransform } from './utils/decomposeTransform';\nimport { multiplyTransform } from './utils/multiplyTransform';\n\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { ITransformerHandleStyle } from './TransformerHandle';\n\n// Preallocated objects\nconst tempTransform = new Transform();\nconst tempCorners: [Point, Point, Point, Point] = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempBounds = new OrientedBounds();\nconst tempRect = new Rectangle();\nconst tempHull = [new Point(), new Point(), new Point(), new Point()];\n\n// Pool for allocating an arbitrary number of points\nconst pointPool = ObjectPoolFactory.build(Point as any);\n\n/**\n * The handles used for rotation.\n *\n * @internal\n * @ignore\n */\ntype RotateHandle = 'rotator';\n\n/**\n * The handles used for scaling.\n *\n * @internal\n * @ignore\n */\ntype ScaleHandle = 'topLeft' |\n    'topCenter' |\n    'topRight' |\n    'middleLeft' |\n    'middleCenter' |\n    'middleRight' |\n    'bottomLeft' |\n    'bottomCenter' |\n    'bottomRight';\n\n/**\n * The handles used for skewing\n *\n * @internal\n * @ignore\n */\ntype SkewHandle = 'skewHorizontal' | 'skewVertical';\n\n/**\n * All the handles provided by {@link Transformer}.\n *\n * @internal\n * @ignore\n */\nexport type Handle = RotateHandle | ScaleHandle | SkewHandle;\n\n/**\n * Specific cursors for each handle\n *\n * @internal\n * @ignore\n */\nconst HANDLE_TO_CURSOR: { [H in Handle]?: string } = {\n    topLeft: 'nw-resize',\n    topCenter: 'n-resize',\n    topRight: 'ne-resize',\n    middleLeft: 'w-resize',\n    middleRight: 'e-resize',\n    bottomLeft: 'sw-resize',\n    bottomCenter: 's-resize',\n    bottomRight: 'se-resize',\n};\n\n/**\n * An array of all {@link ScaleHandle} values.\n *\n * @internal\n * @ignore\n */\nconst SCALE_HANDLES: ScaleHandle[] = [\n    'topLeft',\n    'topCenter',\n    'topRight',\n    'middleLeft',\n    'middleCenter',\n    'middleRight',\n    'bottomLeft',\n    'bottomCenter',\n    'bottomRight',\n];\n\n/**\n * This maps each scaling handle to the directions in which the x, y components are outward. A value of\n * zero means that no scaling occurs along that component's axis.\n *\n * @internal\n * @ignore\n */\nconst SCALE_COMPONENTS: {\n    [H in ScaleHandle]: { x: (-1 | 0 | 1); y: (-1 | 0 | 1) };\n } = {\n     topLeft: { x: -1, y: -1 },\n     topCenter: { x: 0, y: -1 },\n     topRight: { x: 1, y: -1 },\n     middleLeft: { x: -1, y: 0 },\n     middleCenter: { x: 0, y: 0 },\n     middleRight: { x: 1, y: 0 },\n     bottomLeft: { x: -1, y: 1 },\n     bottomCenter: { x: 0, y: 1 },\n     bottomRight: { x: 1, y: 1 },\n };\n\n/**\n * All possible values of {@link Handle}.\n *\n * @ignore\n */\nconst HANDLES = [\n    ...SCALE_HANDLES,\n    'rotator',\n    'skewHorizontal',\n    'skewVertical',\n];\n\n/**\n * The default snap angles for rotation, in radians.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAPS = [\n    Math.PI / 4,\n    Math.PI / 2,\n    Math.PI * 3 / 4,\n    Math.PI,\n    -Math.PI / 4,\n    -Math.PI / 2,\n    -Math.PI * 3 / 4,\n    -Math.PI,\n];\n\n/**\n * The default snap tolerance, i.e. the maximum angle b/w the pointer & nearest snap ray for snapping.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * The default snap angles for skewing, in radians.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAPS = [\n    Math.PI / 4,\n    -Math.PI / 4,\n];\n\n/**\n * The default snap tolerance for skewing.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * @ignore\n */\nexport interface ITransformerStyle\n{\n    color: number;\n    thickness: number;\n}\n\n/**\n * The default wireframe style for {@link Transformer}.\n *\n * @ignore\n */\nconst DEFAULT_WIREFRAME_STYLE: ITransformerStyle = {\n    color: 0x000000,\n    thickness: 2,\n};\n\n/**\n * @ignore\n */\nexport interface ITransformerOptions\n{\n    centeredScaling: boolean;\n    enabledHandles?: Array<Handle>;\n    group: DisplayObject[];\n    handleConstructor: typeof DisplayObject;\n    handleStyle: Partial<ITransformerHandleStyle>;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    wireframeStyle: Partial<ITransformerStyle>;\n}\n\n/**\n * {@code Transformer} provides an interactive interface for editing the transforms in a group. It supports translating,\n * scaling, rotating, and skewing display-objects both through interaction and code.\n *\n * NOTE: The transformer needs to capture all interaction events that would otherwise go to the display-objects in the\n * group. Hence, it must be placed after them in the scene graph.\n *\n * @fires ontransformchange\n */\nexport class Transformer extends Container\n{\n    public group: DisplayObject[];\n\n    public centeredScaling: boolean;\n    public rotationSnaps: number[];\n    public rotationSnapTolerance: number;\n    public skewRadius: number;\n    public skewSnaps: number[];\n    public skewSnapTolerance: number;\n    public translateEnabled: boolean;\n    public transientGroupTilt: boolean;\n\n    protected groupBounds: OrientedBounds;\n    protected handles: { [H in Handle]: TransformerHandle };\n    protected wireframe: Graphics;\n\n    protected _enabledHandles: Handle[];\n    protected _rotateEnabled: boolean;\n    protected _scaleEnabled: boolean;\n    protected _skewEnabled: boolean;\n    protected _skewX: number;\n    protected _skewY: number;\n    protected _handleStyle: Partial<ITransformerHandleStyle>;\n    protected _wireframeStyle: Partial<ITransformerStyle>;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /* eslint-disable max-len */\n    /**\n     * | Handle                | Type                     | Notes |\n     * | --------------------- | ------------------------ | ----- |\n     * | rotator               | Rotate                   | |\n     * | topLeft               | Scale                    | |\n     * | topCenter             | Scale                    | |\n     * | topRight              | Scale                    | |\n     * | middleLeft            | Scale                    | |\n     * | middleCenter          | Scale                    | This cannot be enabled!                                             |\n     * | middleRight           | Scale                    | |\n     * | bottomLeft            | Scale                    | |\n     * | bottomCenter          | Scale                    | |\n     * | bottomRight           | Scale                    | |\n     * | skewHorizontal        | Skew                     | Applies vertical shear. Handle segment is horizontal at skew.y = 0! |\n     * | skewVertical          | Skew                     | Applied horizontal shear. Handle segment is vertical at skew.x = 0! |\n     *\n     * @param {object}[options]\n     * @param {DisplayObject[]}[options.group] - the group of display-objects being transformed\n     * @param {boolean}[options.enabledHandles] - specifically define which handles are to be enabled\n     * @param {typeof TransformerHandle}[options.handleConstructor] - a custom transformer-handle class\n     * @param {object}[options.handleStyle] - styling options for the handle. These cannot be modified afterwards!\n     * @param {number}[options.handleStyle.color=0xffffff] - handle color\n     * @param {string}[options.handleStyle.outlineColor=0x000000] - color of the handle outline (stroke)\n     * @param {string}[options.handleStyle.outlineThickness=1] - thickness of the handle outline (stroke)\n     * @param {number}[options.handleStyle.radius=8] - dimensions of the handle\n     * @param {string}[options.handleStyle.shape='tooth'] - 'circle', 'tooth', or 'square'\n     * @param {boolean}[options.handleStyle.scaleInvariant] - whether the handles should not become bigger when the whole scene\n     *  is scaled up.\n     * @param {boolean}[options.rotateEnabled=true] - whether rotate handles are enabled\n     * @param {number[]}[options.rotationSnaps] - the rotation snap angles, in radians. By default, transformer will\n     *      snap for each 1/8th of a revolution.\n     * @param {number}[options.rotationSnapTolerance] - the snap tolerance for rotation in radians\n     * @param {boolean}[options.scaleEnabled=true] - whether scale handles are enabled\n     * @param {boolean}[options.skewEnabled=true] - whether skew handles are enabled\n     * @param {number}[options.skewRadius] - distance of skew handles from center of transformer box\n     *      (`skewTransform` should be enabled)\n     * @param {number[]}[options.skewSnaps] - the skew snap angles, in radians.\n     * @param {number}[options.skewSnapTolerance] - the skew snap tolerance angle.\n     * @param {boolean}[options.translateEnabled=true] - whether dragging the transformer should move the group\n     * @param {boolean}[options.transientGroupTilt=true] - whether the transformer should reset the wireframe's rotation\n     *      after a rotator handle is \"defocused\".\n     * @param {object}[options.wireframeStyle] - styling options for the wireframe.\n     * @param {number}[options.wireframeStyle.color] - color of the lines\n     * @param {number}[options.wireframeStyle.thickness] - thickness of the lines\n     */\n    constructor(options: Partial<ITransformerOptions> = {})\n    {\n    /* eslint-enable max-len */\n        super();\n\n        this.interactive = true;\n        this.cursor = 'move';\n\n        this.group = options.group || [];\n        this.centeredScaling = !!options.centeredScaling;\n        this.rotationSnaps = options.rotationSnaps || DEFAULT_ROTATION_SNAPS;\n        this.rotationSnapTolerance = options.rotationSnapTolerance !== undefined\n            ? options.rotationSnapTolerance\n            : DEFAULT_ROTATION_SNAP_TOLERANCE;\n        this.skewRadius = options.skewRadius || 64;\n        this.skewSnaps = options.skewSnaps || DEFAULT_SKEW_SNAPS;\n        this.skewSnapTolerance = options.skewSnapTolerance !== undefined\n            ? options.skewSnapTolerance\n            : DEFAULT_SKEW_SNAP_TOLERANCE;\n        this._rotateEnabled = options.rotateEnabled !== false;\n        this._scaleEnabled = options.scaleEnabled !== false;\n        this._skewEnabled = options.skewEnabled === true;\n        this.translateEnabled = options.translateEnabled !== false;\n        this.transientGroupTilt = options.transientGroupTilt !== undefined ? options.transientGroupTilt : true;\n\n        /**\n         * Draws the bounding boxes\n         */\n        this.wireframe = this.addChild(new Graphics());\n\n        /**\n         * The horizontal skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewX = 0;\n\n        /**\n         * The vertical skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewY = 0;\n\n        /**\n         * The wireframe style applied on the transformer\n         */\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, options.wireframeStyle || {});\n\n        const HandleConstructor = options.handleConstructor || TransformerHandle;\n        const handleStyle = options.handleStyle || {};\n\n        this._handleStyle = handleStyle;\n\n        // Initialize transformer handles\n        const rotatorHandles = {\n            rotator: this.addChild(\n                new HandleConstructor(\n                    'rotator',\n                    handleStyle,\n                    (pointerPosition) =>\n                    {\n                        // The origin is the rotator handle's position, yes.\n                        this.rotateGroup('rotator', pointerPosition);\n                    },\n                    this.commitGroup,\n                )),\n        };\n        const scaleHandles = SCALE_HANDLES.reduce((scaleHandles, handleKey: ScaleHandle) =>\n        {\n            const handleDelta = (pointerPosition: Point): void =>\n            {\n                this.scaleGroup(handleKey as ScaleHandle, pointerPosition);\n            };\n\n            scaleHandles[handleKey] = new HandleConstructor(\n                handleKey,\n                handleStyle,\n                handleDelta,\n                this.commitGroup,\n                HANDLE_TO_CURSOR[handleKey]);\n            scaleHandles[handleKey].visible = this._scaleEnabled;\n            this.addChild(scaleHandles[handleKey]);\n\n            return scaleHandles;\n        }, {});\n        const skewHandles = {\n            skewHorizontal: this.addChild(\n                new HandleConstructor(\n                    'skewHorizontal',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewHorizontal', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n            skewVertical: this.addChild(\n                new HandleConstructor(\n                    'skewVertical',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewVertical', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n        };\n\n        this.handles = Object.assign({}, rotatorHandles, scaleHandles, skewHandles) as { [H in Handle]: TransformerHandle };\n        this.handles.middleCenter.visible = false;\n        this.handles.skewHorizontal.visible = this._skewEnabled;\n        this.handles.skewVertical.visible = this._skewEnabled;\n\n        // Update groupBounds immediately. This is because mouse events can propagate before the next animation frame.\n        this.groupBounds = new OrientedBounds();\n        this.updateGroupBounds();\n\n        // Pointer events\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('pointerdown', this.onPointerDown, this);\n        this.on('pointermove', this.onPointerMove, this);\n        this.on('pointerup', this.onPointerUp, this);\n        this.on('pointerupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The list of enabled handles, if applied manually.\n     */\n    get enabledHandles(): Array<Handle>\n    {\n        return this._enabledHandles;\n    }\n    set enabledHandles(value: Array<Handle>)\n    {\n        if (!this._enabledHandles && !value)\n        {\n            return;\n        }\n\n        this._enabledHandles = value;\n\n        HANDLES.forEach((handleKey) => { this.handles[handleKey].visible = false; });\n\n        if (value)\n        {\n            value.forEach((handleKey) => { this.handles[handleKey].visible = true; });\n        }\n        else\n        {\n            this.handles.rotator.visible = this._rotateEnabled;\n            this.handles.skewHorizontal.visible = this._skewEnabled;\n            this.handles.skewVertical.visible = this._skewEnabled;\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter') return;\n\n                this.handles[handleKey].visible = this._scaleEnabled;\n            });\n        }\n    }\n\n    /**\n     * The currently applied handle style. If you have edited the transformer handles directly, this may be inaccurate.\n     */\n    get handleStyle(): Partial<ITransformerHandleStyle>\n    {\n        return this._handleStyle;\n    }\n    set handleStyle(value: Partial<ITransformerHandleStyle>)\n    {\n        const handles = this.handles;\n\n        for (const handleKey in handles)\n        {\n            (handles[handleKey] as TransformerHandle).style = value;\n        }\n\n        this._handleStyle = value;\n    }\n\n    /**\n     * This will enable the rotate handles.\n     */\n    get rotateEnabled(): boolean\n    {\n        return this._rotateEnabled;\n    }\n    set rotateEnabled(value: boolean)\n    {\n        if (!this._rotateEnabled !== value)\n        {\n            this._rotateEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.rotator.visible = value;\n        }\n    }\n\n    /**\n     * This will enable the scale handles.\n     */\n    get scaleEnabled(): boolean\n    {\n        return this._scaleEnabled;\n    }\n    set scaleEnabled(value: boolean)\n    {\n        if (!this._scaleEnabled !== value)\n        {\n            this._scaleEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter')\n                {\n                    return;\n                }\n\n                this.handles[handleKey].visible = value;\n            });\n        }\n    }\n\n    /**\n     * This will enable the skew handles.\n     */\n    get skewEnabled(): boolean\n    {\n        return this._skewEnabled;\n    }\n    set skewEnabled(value: boolean)\n    {\n        if (this._skewEnabled !== value)\n        {\n            this._skewEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.skewHorizontal.visible = value;\n            this.handles.skewVertical.visible = value;\n        }\n    }\n\n    /**\n     * The currently applied wireframe style.\n     */\n    get wireframeStyle(): Partial<ITransformerStyle>\n    {\n        return this._wireframeStyle;\n    }\n    set wireframeStyle(value: Partial<ITransformerStyle>)\n    {\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, value);\n    }\n\n    /**\n     * This will translate the group by {@code delta}.\n     *\n     * NOTE: There is no handle that provides translation. The user drags the transformer directly.\n     *\n     * @param delta\n     */\n    translateGroup = (delta: Point): void =>\n    {\n        // Translation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(delta.x, delta.y);\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will rotate the group such that the handle will come to {@code pointerPosition}.\n     *\n     * @param handle - the rotator handle was dragged\n     * @param pointerPosition - the new pointer position (after dragging)\n     */\n    rotateGroup = (handle: RotateHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n        const origin = this.worldTransform.apply(this.handles[handle].position, tempPoint);\n        const destination = pointerPosition;\n\n        // Center of rotation - does not change in transformation\n        const rOrigin = bounds.center;\n\n        // Original angle subtended by pointer\n        const orgAngle = Math.atan2(origin.y - rOrigin.y, origin.x - rOrigin.x);\n\n        // Final angle subtended by pointer\n        const dstAngle = Math.atan2(destination.y - rOrigin.y, destination.x - rOrigin.x);\n\n        // The angle by which bounds should be rotated\n        let deltaAngle = dstAngle - orgAngle;\n\n        // Snap\n        let newRotation = this.groupBounds.rotation + deltaAngle;\n\n        newRotation = this.snapAngle(newRotation, this.rotationSnapTolerance, this.rotationSnaps);\n        deltaAngle = newRotation - this.groupBounds.rotation;\n\n        // Rotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-rOrigin.x, -rOrigin.y)\n            .rotate(deltaAngle)\n            .translate(rOrigin.x, rOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(newRotation);\n\n        // Rotation moves both skew.x & skew.y\n        this._skewX += deltaAngle;\n        this._skewY += deltaAngle;\n    };\n\n    /**\n     * This will scale the group such that the scale handle will come under {@code pointerPosition}.\n     *\n     * @param handle - the scaling handle that was dragged\n     * @param pointerPosition - the new pointer position\n     */\n    scaleGroup = (handle: ScaleHandle, pointerPosition: Point): void =>\n    {\n        // Directions along x,y axes that will produce positive scaling\n        const xDir = SCALE_COMPONENTS[handle].x;\n        const yDir = SCALE_COMPONENTS[handle].y;\n\n        const bounds = this.groupBounds;\n        const angle = bounds.rotation;\n        const innerBounds = bounds.innerBounds;\n\n        // Position of handle in world-space\n        const handlePosition = this.worldTransform.apply(this.handles[handle].position, tempPoint);\n\n        // Delta vector in world frame\n        const dx = pointerPosition.x - handlePosition.x;\n        const dy = pointerPosition.y - handlePosition.y;\n\n        // Unit vector along u-axis (horizontal axis after rotation) of bounds\n        const uxvec = (bounds.topRight.x - bounds.topLeft.x) / innerBounds.width;\n        const uyvec = (bounds.topRight.y - bounds.topLeft.y) / innerBounds.width;\n\n        // Unit vector along v-axis (vertical axis after rotation) of bounds\n        const vxvec = (bounds.bottomLeft.x - bounds.topLeft.x) / innerBounds.height;\n        const vyvec = (bounds.bottomLeft.y - bounds.topLeft.y) / innerBounds.height;\n\n        // Delta vector in rotated frame of bounds\n        const du = (dx * uxvec) + (dy * uyvec);\n        const dv = (dx * vxvec) + (dy * vyvec);\n\n        // Scaling factors along x,y axes\n        const sx = 1 + (du * xDir / innerBounds.width);\n        const sy = 1 + (dv * yDir / innerBounds.height);\n\n        const matrix = tempMatrix.identity();\n\n        if (xDir !== 0)\n        {\n            // Origin of horizontal scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const hsOrigin = !this.centeredScaling ? (xDir === 1 ? bounds.topLeft : bounds.topRight) : bounds.center;\n\n            matrix.translate(-hsOrigin.x, -hsOrigin.y)\n                .rotate(-angle)\n                .scale(sx, 1)\n                .rotate(angle)\n                .translate(hsOrigin.x, hsOrigin.y);\n        }\n\n        if (yDir !== 0)\n        {\n            // Origin of vertical scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const vsOrigin = !this.centeredScaling ? (yDir === 1 ? bounds.topLeft : bounds.bottomLeft) : bounds.center;\n\n            matrix.translate(-vsOrigin.x, -vsOrigin.y)\n                .rotate(-angle)\n                .scale(1, sy)\n                .rotate(angle)\n                .translate(vsOrigin.x, vsOrigin.y);\n        }\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will skew the group such that the skew handle would move to the {@code pointerPosition}.\n     *\n     * @param handle\n     * @param pointerPosition\n     */\n    skewGroup = (handle: SkewHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n\n        // Destination point\n        const dst = tempPoint.copyFrom(pointerPosition);\n\n        // Center of skew (same as center of rotation!)\n        const sOrigin = bounds.center;\n\n        // Skew matrix\n        const matrix = tempMatrix.identity()\n            .translate(-sOrigin.x, -sOrigin.y);\n        let rotation = this.groupBounds.rotation;\n\n        if (handle === 'skewHorizontal')\n        {\n            const oldSkew = this._skewX;\n\n            // Calculate new skew\n            this._skewX = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x);\n            this._skewX = this.snapAngle(this._skewX, this.skewSnapTolerance, this.skewSnaps);\n\n            // Skew by new skew.x\n            matrix.prepend(createVerticalSkew(-oldSkew));\n            matrix.prepend(createVerticalSkew(this._skewX));\n        }\n        else // skewVertical\n        {\n            const oldSkew = this._skewY;\n\n            // Calculate new skew\n            const newSkew = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x) - (Math.PI / 2);\n\n            this._skewY = newSkew;\n            this._skewY = this.snapAngle(this._skewY, this.skewSnapTolerance, this.skewSnaps);\n\n            // HINT: skewY is applied negatively b/c y-axis is flipped\n            matrix.prepend(createHorizontalSkew(oldSkew));\n            matrix.prepend(createHorizontalSkew(-this._skewY));\n\n            rotation -= this._skewY - oldSkew;\n        }\n\n        matrix.translate(sOrigin.x, sOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(rotation);\n    };\n\n    /**\n     * This is called after the user finishes dragging a handle. If {@link this.transientGroupTilt} is enabled, it will\n     * reset the rotation of this group (if more than one display-object is grouped).\n     */\n    commitGroup = (): void =>\n    {\n        if (this.transientGroupTilt !== false && this.group.length > 1)\n        {\n            this.updateGroupBounds(0);\n        }\n    };\n\n    /**\n     * This will update the transformer's geometry and render it to the canvas.\n     *\n     * @override\n     * @param renderer\n     */\n    render(renderer: Renderer): void\n    {\n        this.draw();\n\n        super.render(renderer);\n    }\n\n    /**\n     * Recalculates the transformer's geometry. This is called on each render.\n     */\n    protected draw(): void\n    {\n        const targets = this.group;\n        const { color, thickness } = this._wireframeStyle;\n\n        // Updates occur right here!\n        this.wireframe.clear()\n            .lineStyle(thickness, color);\n\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this.drawBounds(Transformer.calculateOrientedBounds(targets[i], tempBounds));\n        }\n\n        // groupBounds may change on each render-loop b/c of any ongoing animation\n        const groupBounds = targets.length !== 1\n            ? Transformer.calculateGroupOrientedBounds(targets, this.groupBounds.rotation, tempBounds, true)\n            : Transformer.calculateOrientedBounds(targets[0], tempBounds);// Auto-detect rotation\n\n        // Redraw skeleton and position handles\n        this.drawBounds(groupBounds);\n        this.drawHandles(groupBounds);\n\n        // Update cached groupBounds\n        this.groupBounds.copyFrom(groupBounds);\n    }\n\n    /**\n     * Draws the bounding box into {@code this.wireframe}.\n     *\n     * @param bounds\n     */\n    protected drawBounds(bounds: OrientedBounds | AxisAlignedBounds): void\n    {\n        const worldTransform = this.worldTransform;\n        const hull = tempHull;\n\n        // Bring hull into local-space\n        for (let i = 0; i < 4; i++)\n        {\n            worldTransform.applyInverse(bounds.hull[i], hull[i]);\n        }\n\n        // Fill polygon with ultra-low alpha to capture pointer events.\n        this.wireframe\n            .beginFill(0xffffff, 1e-4)\n            .drawPolygon(hull)\n            .endFill();\n    }\n\n    /**\n     * Draw the handles and any remaining parts of the wireframe.\n     *\n     * @param groupBounds\n     */\n    protected drawHandles(groupBounds: OrientedBounds): void\n    {\n        const handles = this.handles;\n        const worldTransform = this.worldTransform;\n        const {\n            topLeft: worldTopLeft,\n            topRight: worldTopRight,\n            bottomLeft: worldBottomLeft,\n            bottomRight: worldBottomRight,\n            center: worldCenter,\n        } = groupBounds;\n\n        const [topLeft, topRight, bottomLeft, bottomRight] = tempHull;\n        const center = tempPoint;\n\n        worldTransform.applyInverse(worldBottomLeft, bottomLeft);\n        worldTransform.applyInverse(worldBottomRight, bottomRight);\n        worldTransform.applyInverse(worldCenter, center);\n\n        if (this._rotateEnabled)\n        {\n            groupBounds.innerBounds.pad(32);\n            worldTransform.applyInverse(groupBounds.topLeft, topLeft);\n            worldTransform.applyInverse(groupBounds.topRight, topRight);\n\n            handles.rotator.position.x = (topLeft.x + topRight.x) / 2;\n            handles.rotator.position.y = (topLeft.y + topRight.y) / 2;\n\n            groupBounds.innerBounds.pad(-32);\n            worldTransform.applyInverse(groupBounds.topLeft, topLeft);\n            worldTransform.applyInverse(groupBounds.topRight, topRight);\n\n            const bx = (topLeft.x + topRight.x) / 2;\n            const by = (topLeft.y + topRight.y) / 2;\n\n            this.wireframe.moveTo(bx, by)\n                .lineTo(handles.rotator.position.x, handles.rotator.position.y);\n        }\n        else\n        {\n            worldTransform.applyInverse(worldTopLeft, topLeft);\n            worldTransform.applyInverse(worldTopRight, topRight);\n        }\n\n        if (this._scaleEnabled)\n        {\n            // Scale handles\n            handles.topLeft.position.copyFrom(topLeft);\n            handles.topCenter.position.set((topLeft.x + topRight.x) / 2, (topLeft.y + topRight.y) / 2);\n            handles.topRight.position.copyFrom(topRight);\n            handles.middleLeft.position.set((topLeft.x + bottomLeft.x) / 2, (topLeft.y + bottomLeft.y) / 2);\n            handles.middleCenter.position.set((topLeft.x + bottomRight.x) / 2, (topLeft.y + bottomRight.y) / 2);\n            handles.middleRight.position.set((topRight.x + bottomRight.x) / 2, (topRight.y + bottomRight.y) / 2);\n            handles.bottomLeft.position.copyFrom(bottomLeft);\n            handles.bottomCenter.position.set((bottomLeft.x + bottomRight.x) / 2, (bottomLeft.y + bottomRight.y) / 2);\n            handles.bottomRight.position.copyFrom(bottomRight);\n        }\n\n        if (this._skewEnabled)\n        {\n            // Calculate skew handle positions in world-space, and then transform back into local-space.\n\n            handles.skewHorizontal.position.set(\n                worldCenter.x + (Math.cos(this._skewX) * this.skewRadius),\n                worldCenter.y + (Math.sin(this._skewX) * this.skewRadius));\n            handles.skewVertical.position.set( // HINT: Slope = skew.y + Math.PI / 2\n                worldCenter.x + (-Math.sin(this._skewY) * this.skewRadius),\n                worldCenter.y + (Math.cos(this._skewY) * this.skewRadius));\n\n            worldTransform.applyInverse(handles.skewHorizontal.position, handles.skewHorizontal.position);\n            worldTransform.applyInverse(handles.skewVertical.position, handles.skewVertical.position);\n\n            this.wireframe\n                .beginFill(this.wireframeStyle.color)\n                .drawCircle(center.x, center.y, this.wireframeStyle.thickness * 2)\n                .endFill();\n            this.wireframe\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewHorizontal.x, handles.skewHorizontal.y)\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewVertical.x, handles.skewVertical.y);\n        }\n\n        // Update transforms\n        for (const handleName in handles)\n        {\n            let rotation = this.groupBounds.rotation;\n\n            if (handleName === 'skewHorizontal')\n            {\n                rotation = this._skewX;\n            }\n            else if (handleName === 'skewVertical')\n            {\n                rotation = this._skewY;\n            }\n\n            const handle: TransformerHandle = handles[handleName];\n\n            handle.rotation = rotation;\n            handle.getBounds(false, tempRect);\n        }\n    }\n\n    /**\n     * Called on the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        const lastPointerPosition = this._pointerPosition;\n        const currentPointerPosition = tempPoint.copyFrom(e.data.global);\n\n        const cx = currentPointerPosition.x;\n        const cy = currentPointerPosition.y;\n\n        // Translate group by difference\n        if (this._pointerDragging && this.translateEnabled)\n        {\n            const delta = currentPointerPosition;\n\n            delta.x -= lastPointerPosition.x;\n            delta.y -= lastPointerPosition.y;\n\n            this.translateGroup(delta);\n        }\n\n        this._pointerPosition.x = cx;\n        this._pointerPosition.y = cy;\n        this._pointerDragging = true;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointerup` and `pointerupoutside` events. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n        this._pointerDown = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Applies the given transformation matrix {@code delta} to all the display-objects in the group.\n     *\n     * @param delta - transformation matrix\n     * @param skipUpdate - whether to skip updating the group-bounds after applying the transform\n     */\n    private prependTransform(delta: Matrix, skipUpdate = false): void\n    {\n        const group = this.group;\n\n        for (let i = 0, j = group.length; i < j; i++)\n        {\n            multiplyTransform(group[i], delta, false);\n        }\n\n        if (!skipUpdate)\n        {\n            this.updateGroupBounds();\n        }\n\n        this.emit('transformchange');\n    }\n\n    /**\n     * Recalculates {@code this.groupBounds} at the same angle.\n     *\n     * @param rotation - override the group's rotation\n     */\n    private updateGroupBounds(rotation: number = this.groupBounds.rotation): void\n    {\n        Transformer.calculateGroupOrientedBounds(this.group, rotation, this.groupBounds);\n    }\n\n    /**\n     * Snaps the given {@code angle} to one of the snapping angles, if possible.\n     *\n     * @param angle - the input angle\n     * @param snapTolerance - the maximum difference b/w the given angle & a snapping angle\n     * @param snaps - the snapping angles\n     * @returns the snapped angle\n     */\n    private snapAngle(angle: number, snapTolerance: number, snaps?: number[]): number\n    {\n        angle = angle % (Math.PI * 2);\n\n        if (!snaps || snaps.length === 1 || !snapTolerance)\n        {\n            return angle;\n        }\n\n        for (let i = 0, j = snaps.length; i < j; i++)\n        {\n            if (Math.abs(angle - snaps[i]) <= snapTolerance)\n            {\n                return snaps[i];\n            }\n        }\n\n        return angle;\n    }\n\n    /**\n     * Calculates the positions of the four corners of the display-object. The quadrilateral formed by\n     * these points will be the tightest fit around it.\n     *\n     * @param displayObject - The display object whose corners are to be calculated\n     * @param transform - The transform applied on the display-object. By default, this is its world-transform\n     * @param corners - Optional array of four points to put the result into\n     * @param index - Optional index into \"corners\"\n     */\n    static calculateTransformedCorners(\n        displayObject: DisplayObject,\n        transform: Matrix = displayObject.worldTransform,\n        corners?: Point[],\n        index = 0,\n    ): Point[]\n    {\n        const localBounds = displayObject.getLocalBounds();\n\n        // Don't modify transforms\n        displayObject.getBounds();\n\n        corners = corners || [new Point(), new Point(), new Point(), new Point()];\n        corners[index].set(localBounds.x, localBounds.y);\n        corners[index + 1].set(localBounds.x + localBounds.width, localBounds.y);\n        corners[index + 2].set(localBounds.x + localBounds.width, localBounds.y + localBounds.height);\n        corners[index + 3].set(localBounds.x, localBounds.y + localBounds.height);\n\n        transform.apply(corners[index], corners[index]);\n        transform.apply(corners[index + 1], corners[index + 1]);\n        transform.apply(corners[index + 2], corners[index + 2]);\n        transform.apply(corners[index + 3], corners[index + 3]);\n\n        return corners;\n    }\n\n    /**\n     * Calculates the oriented bounding box of the display-object. This would not bending with any skew\n     * applied on the display-object, i.e. it is guaranteed to be rectangular.\n     *\n     * @param displayObject\n     * @param bounds - the bounds instance to set\n     */\n    static calculateOrientedBounds(displayObject: DisplayObject, bounds?: OrientedBounds): OrientedBounds\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n\n        // Decompose displayObject.worldTransform to get its (world) rotation\n        decomposeTransform(tempTransform, displayObject.worldTransform);\n\n        tempTransform.updateLocalTransform();\n\n        const angle = tempTransform.rotation;\n        const corners = Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, tempCorners);\n\n        // Calculate centroid, which is our center of rotatation\n        const cx = (corners[0].x + corners[1].x + corners[2].x + corners[3].x) / 4;\n        const cy = (corners[0].y + corners[1].y + corners[2].y + corners[3].y) / 4;\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-cx, -cy)\n            .rotate(-tempTransform.rotation)\n            .translate(cx, cy);\n\n        // Calculate unrotated corners\n        matrix.apply(corners[0], corners[0]);\n        matrix.apply(corners[1], corners[1]);\n        matrix.apply(corners[2], corners[2]);\n        matrix.apply(corners[3], corners[3]);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.rotation = angle;\n        bounds.innerBounds.x = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        bounds.innerBounds.y = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        bounds.innerBounds.width = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x) - bounds.innerBounds.x;\n        bounds.innerBounds.height = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y) - bounds.innerBounds.y;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the oriented bounding box of a group of display-objects at a specific angle.\n     *\n     * @param group\n     * @param rotation\n     * @param bounds\n     * @param skipUpdate\n     */\n    static calculateGroupOrientedBounds(\n        group: DisplayObject[],\n        rotation: number,\n        bounds?: OrientedBounds,\n        skipUpdate = false,\n    ): OrientedBounds\n    {\n        const groupLength = group.length;\n        const frames = pointPool.allocateArray(groupLength * 4);// Zero allocations!\n\n        // Calculate display-object frame vertices\n        for (let i = 0; i < groupLength; i++)\n        {\n            const displayObject = group[i];\n\n            // Update worldTransform\n            if (!skipUpdate)\n            {\n                const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n                displayObject.updateTransform();\n                displayObject.disableTempParent(parent);\n            }\n\n            Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, frames, i * 4);\n        }\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .rotate(-rotation);\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = -Number.MAX_VALUE;\n        let maxY = -Number.MAX_VALUE;\n\n        // Unrotate all frame vertices, calculate minX, minY, maxX, maxY for innerBounds\n        for (let i = 0, j = frames.length; i < j; i++)\n        {\n            const point = frames[i];\n\n            matrix.apply(point, point);\n\n            const x = point.x;\n            const y = point.y;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        pointPool.releaseArray(frames);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.innerBounds.x = minX;\n        bounds.innerBounds.y = minY;\n        bounds.innerBounds.width = maxX - minX;\n        bounds.innerBounds.height = maxY - minY;\n        bounds.rotation = rotation;\n\n        matrix.applyInverse(bounds.center, tempPoint);\n        bounds.center.copyFrom(tempPoint);\n\n        return bounds;\n    }\n}\n\n/**\n * This is fired when the transformer modifies the transforms of display-objects.\n *\n * @event Transformer#transformchange\n */\n"],"names":["DEFAULT_HANDLE_STYLE","color","outlineColor","outlineThickness","radius","shape","scaleInvariant","Point","TransformerHandle","Graphics","[object Object]","handle","styleOpts","handler","commit","cursor","super","style","Object","assign","this","_handle","_style","onHandleDelta","onHandleCommit","_dirty","_drawTransform","scale2","x","y","interactive","_pointerDown","_pointerDragging","_pointerPosition","on","onPointerDown","onPointerMove","onPointerUp","value","renderer","dirty","sx","sy","worldTransform","drawTransform","Math","a","b","c","d","draw","render","sqrt","lineStyle","beginFill","drawRect","drawPolygon","drawCircle","endFill","e","stopPropagation","onDrag","onDragStart","onDragEnd","copyFrom","data","global","currentPosition","_","tempMatrix","Matrix","createHorizontalSkew","angle","matrix","identity","tan","createVerticalSkew","decomposeTransform","transform","rotation","pivot","skewX","atan2","skewY","set","skew","scale","position","tx","ty","tempParentMatrix","multiplyTransform","displayObject","skipUpdate","parent","enableTempParent","updateTransform","disableTempParent","parentTransform","IDENTITY","prepend","invert","tempTransform","Transform","tempCorners","tempPoint","tempBounds","OrientedBounds","tempRect","Rectangle","tempHull","pointPool","ObjectPoolFactory","build","HANDLE_TO_CURSOR","topLeft","topCenter","topRight","middleLeft","middleRight","bottomLeft","bottomCenter","bottomRight","SCALE_HANDLES","SCALE_COMPONENTS","middleCenter","HANDLES","DEFAULT_ROTATION_SNAPS","PI","DEFAULT_ROTATION_SNAP_TOLERANCE","DEFAULT_SKEW_SNAPS","DEFAULT_SKEW_SNAP_TOLERANCE","DEFAULT_WIREFRAME_STYLE","thickness","Transformer","Container","options","delta","translate","prependTransform","pointerPosition","bounds","groupBounds","origin","apply","handles","destination","rOrigin","center","orgAngle","deltaAngle","newRotation","snapAngle","rotationSnapTolerance","rotationSnaps","rotate","updateGroupBounds","_skewX","_skewY","xDir","yDir","innerBounds","handlePosition","dx","dy","uxvec","width","uyvec","dv","height","hsOrigin","centeredScaling","vsOrigin","dst","sOrigin","oldSkew","skewSnapTolerance","skewSnaps","newSkew","transientGroupTilt","group","length","undefined","skewRadius","_rotateEnabled","rotateEnabled","_scaleEnabled","scaleEnabled","_skewEnabled","skewEnabled","translateEnabled","wireframe","addChild","_wireframeStyle","wireframeStyle","HandleConstructor","handleConstructor","handleStyle","_handleStyle","rotatorHandles","rotator","rotateGroup","commitGroup","scaleHandles","reduce","handleKey","scaleGroup","visible","skewHandles","skewHorizontal","skewGroup","skewVertical","enabledHandles","_enabledHandles","forEach","targets","clear","i","j","drawBounds","calculateOrientedBounds","calculateGroupOrientedBounds","drawHandles","hull","applyInverse","worldTopLeft","worldTopRight","worldBottomLeft","worldBottomRight","worldCenter","pad","bx","by","moveTo","lineTo","cos","sin","handleName","getBounds","lastPointerPosition","currentPointerPosition","cx","cy","translateGroup","emit","snapTolerance","snaps","abs","corners","index","localBounds","getLocalBounds","updateLocalTransform","calculateTransformedCorners","min","max","groupLength","frames","allocateArray","minX","Number","MAX_VALUE","minY","maxX","maxY","point","releaseArray"],"mappings":"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"}