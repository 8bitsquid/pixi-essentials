{"version":3,"file":"transformer.js","sources":["../src/TransformerHandle.ts","../src/utils/skewTransform.ts","../src/utils/decomposeTransform.ts","../src/utils/multiplyTransform.ts","../src/Transformer.ts"],"sourcesContent":["/// <reference path=\"./types.d.ts\" />\n\nimport { Graphics } from '@pixi/graphics';\nimport { Point } from '@pixi/math';\nimport { Renderer } from '@pixi/core';\n\nimport { InteractionEvent } from '@pixi/interaction';\nimport type { Handle } from './Transformer';\n\n/**\n * @ignore\n */\nexport interface ITransformerHandleStyle\n{\n    color: number;\n    outlineColor: number;\n    outlineThickness: number;\n    radius: number;\n    shape: string;\n}\n\n/**\n * The default transformer handle style.\n *\n * @ignore\n */\nconst DEFAULT_HANDLE_STYLE = {\n    color: 0xffffff,\n    outlineColor: 0x000000,\n    outlineThickness: 1,\n    radius: 8,\n    shape: 'tooth',\n};\n\n// Preallocated objects\nconst tempPoint = new Point();\n\n/**\n * The transfomer handle base implementation.\n */\nexport class TransformerHandle extends Graphics\n{\n    onHandleDelta: (pointerPosition: Point) => void;\n    onHandleCommit: () => void;\n\n    protected _handle: Handle;\n    protected _style: ITransformerHandleStyle;\n    protected _dirty: boolean;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /**\n     * @param {string} handle - the type of handle being drawn\n     * @param {object} styleOpts - styling options passed by the user\n     * @param {function} handler - handler for drag events, it receives the pointer position; used by {@code onDrag}.\n     * @param {function} commit - handler for drag-end events.\n     * @param {string}[cursor='move'] - a custom cursor to be applied on this handle\n     */\n    constructor(\n        handle: Handle,\n        styleOpts: Partial<ITransformerHandleStyle> = {},\n        handler: (pointerPosition: Point) => void,\n        commit: () => void,\n        cursor?: string)\n    {\n        super();\n\n        const style: ITransformerHandleStyle = Object.assign({}, DEFAULT_HANDLE_STYLE, styleOpts);\n\n        this._handle = handle;\n        this._style = style;\n        this.onHandleDelta = handler;\n        this.onHandleCommit = commit;\n\n        // Redraw on next render()\n        this._dirty = true;\n\n        // Pointer events\n        this.interactive = true;\n        this.cursor = cursor || 'move';\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('mousedown', this.onPointerDown, this);\n        this.on('mousemove', this.onPointerMove, this);\n        this.on('mouseup', this.onPointerUp, this);\n        this.on('mouseupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The currently applied handle style.\n     */\n    get style(): Partial<ITransformerHandleStyle>\n    {\n        return this._style;\n    }\n    set style(value: Partial<ITransformerHandleStyle>)\n    {\n        this._style = Object.assign({}, DEFAULT_HANDLE_STYLE, value);\n        this._dirty = true;\n    }\n\n    render(renderer: Renderer): void\n    {\n        if (this._dirty)\n        {\n            this.draw();\n            this._dirty = false;\n        }\n\n        super.render(renderer);\n    }\n\n    /**\n     * Redraws the handle's geometry. This is called on a `render` if {@code this._dirty} is true.\n     */\n    protected draw(): void\n    {\n        const handle = this._handle;\n        const style = this._style;\n\n        this.lineStyle(style.outlineThickness, style.outlineColor)\n            .beginFill(style.color);\n\n        if (style.shape === 'square')\n        {\n            this.drawRect(-style.radius / 2, -style.radius / 2, style.radius, style.radius);\n        }\n        else if (style.shape === 'tooth')\n        {\n            switch (handle)\n            {\n                case 'middleLeft':\n                    this.drawPolygon([\n                        -style.radius / 2, -style.radius / 2,\n                        -style.radius / 2, style.radius / 2,\n                        style.radius / 2, style.radius / 2,\n                        style.radius * 1.1, 0,\n                        style.radius / 2, -style.radius / 2,\n                    ]);\n                    break;\n                case 'topCenter':\n                    this.drawPolygon([\n                        -style.radius / 2, -style.radius / 2,\n                        style.radius / 2, -style.radius / 2,\n                        style.radius / 2, style.radius / 2,\n                        0, style.radius * 1.1,\n                        -style.radius / 2, style.radius / 2,\n                    ]);\n                    break;\n                case 'middleRight':\n                    this.drawPolygon([\n                        -style.radius / 2, style.radius / 2,\n                        -style.radius * 1.1, 0,\n                        -style.radius / 2, -style.radius / 2,\n                        style.radius / 2, -style.radius / 2,\n                        style.radius / 2, style.radius / 2,\n                    ]);\n                    break;\n                case 'bottomCenter':\n                    this.drawPolygon([\n                        0, -style.radius * 1.1,\n                        style.radius / 2, -style.radius / 2,\n                        style.radius / 2, style.radius / 2,\n                        -style.radius / 2, style.radius / 2,\n                        -style.radius / 2, -style.radius / 2,\n                    ]);\n                    break;\n                case 'rotator':\n                    this.drawCircle(0, 0, style.radius / Math.sqrt(2));\n                    break;\n                default:\n                    this.drawRect(-style.radius / 2, -style.radius / 2, style.radius, style.radius);\n                    break;\n            }\n        }\n        else\n        {\n            this.drawCircle(0, 0, style.radius);\n        }\n\n        this.endFill();\n    }\n\n    /**\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        if (this._pointerDragging)\n        {\n            this.onDrag(e);\n        }\n        else\n        {\n            this.onDragStart(e);\n        }\n\n        e.stopPropagation();\n    }\n\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        if (this._pointerDragging)\n        {\n            this.onDragEnd(e);\n        }\n\n        this._pointerDown = false;\n    }\n\n    protected onDragStart(e: InteractionEvent): void\n    {\n        e.data.getLocalPosition(this.parent, this._pointerPosition);\n\n        this._pointerDragging = true;\n    }\n\n    protected onDrag(e: InteractionEvent): void\n    {\n        const currentPosition = e.data.getLocalPosition(this.parent, tempPoint);\n\n        // Callback handles the rest!\n        if (this.onHandleDelta)\n        {\n            this.onHandleDelta(currentPosition);\n        }\n\n        this._pointerPosition.copyFrom(currentPosition);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected onDragEnd(_: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n\n        if (this.onHandleCommit)\n        {\n            this.onHandleCommit();\n        }\n    }\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\n\nconst tempMatrix = new Matrix();\n\n/**\n * @param angle\n * @returns a horizontal skew matrix\n */\nexport function createHorizontalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.c = Math.tan(angle);\n\n    return matrix;\n}\n\n/**\n * @param angle\n * @returns a vertical skew matrix\n */\nexport function createVerticalSkew(angle: number): Matrix\n{\n    const matrix = tempMatrix.identity();\n\n    matrix.b = Math.tan(angle);\n\n    return matrix;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport type { Transform, Matrix } from '@pixi/math';\n\n/**\n * Decomposes the matrix into transform, while preserving rotation & the pivot.\n *\n * @ignore\n * @param transform\n * @param matrix\n * @param rotation\n * @param pivot\n */\nexport function decomposeTransform(\n    transform: Transform,\n    matrix: Matrix,\n    rotation?: number,\n    pivot = transform.pivot,\n): Transform\n{\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n\n    rotation = rotation !== undefined && rotation !== null ? rotation : skewY;\n\n    // set pivot\n    transform.pivot.set(pivot.x, pivot.y);\n\n    // next set rotation, skew angles\n    transform.rotation = rotation;\n    transform.skew.x = rotation + skewX;\n    transform.skew.y = -rotation + skewY;\n\n    // next set scale\n    transform.scale.x = Math.sqrt((a * a) + (b * b));\n    transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n    // next set position\n    transform.position.x = matrix.tx + ((pivot.x * matrix.a) + (pivot.y * matrix.c));\n    transform.position.y = matrix.ty + ((pivot.x * matrix.b) + (pivot.y * matrix.d));\n\n    return transform;\n}\n","/// <reference path=\"../types.d.ts\" />\n\nimport { Matrix } from '@pixi/math';\nimport { decomposeTransform } from './decomposeTransform';\n\nimport type { DisplayObject } from '@pixi/display';\n\nconst tempMatrix = new Matrix();\nconst tempParentMatrix = new Matrix();\n\n/**\n * Multiplies the transformation matrix {@code transform} to the display-object's transform.\n *\n * @param displayObject\n * @param transform\n * @param skipUpdate\n */\nexport function multiplyTransform(displayObject: DisplayObject, transform: Matrix, skipUpdate?: boolean): void\n{\n    if (!skipUpdate)\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n    }\n\n    const worldTransform = displayObject.worldTransform;\n    const parentTransform = displayObject.parent\n        ? tempParentMatrix.copyFrom(displayObject.parent.worldTransform)\n        : Matrix.IDENTITY;\n\n    tempMatrix.copyFrom(worldTransform);\n    tempMatrix.prepend(transform);\n    tempMatrix.prepend(parentTransform.invert());// gets new \"local\" transform\n\n    decomposeTransform(displayObject.transform, tempMatrix);\n}\n","/// <reference path=\"./types.d.ts\" />\n\nimport { Renderer } from '@pixi/core';\nimport { DisplayObject, Container } from '@pixi/display';\nimport { Point, Matrix, Transform, Rectangle } from '@pixi/math';\nimport { Graphics } from '@pixi/graphics';\nimport { AxisAlignedBounds, OrientedBounds } from '@pixi-essentials/bounds';\nimport { ObjectPoolFactory } from '@pixi-essentials/object-pool';\nimport { TransformerHandle } from './TransformerHandle';\nimport { createHorizontalSkew, createVerticalSkew } from './utils/skewTransform';\nimport { decomposeTransform } from './utils/decomposeTransform';\nimport { multiplyTransform } from './utils/multiplyTransform';\n\nimport type { InteractionEvent } from '@pixi/interaction';\nimport type { ITransformerHandleStyle } from './TransformerHandle';\n\n// Preallocated objects\nconst tempTransform = new Transform();\nconst tempCorners: [Point, Point, Point, Point] = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\nconst tempPoint = new Point();\nconst tempBounds = new OrientedBounds();\nconst tempRect = new Rectangle();\n\n// Pool for allocating an arbitrary number of points\nconst pointPool = ObjectPoolFactory.build(Point as any);\n\n/**\n * The handles used for rotation.\n *\n * @internal\n * @ignore\n */\ntype RotateHandle = 'rotator';\n\n/**\n * The handles used for scaling.\n *\n * @internal\n * @ignore\n */\ntype ScaleHandle = 'topLeft' |\n    'topCenter' |\n    'topRight' |\n    'middleLeft' |\n    'middleCenter' |\n    'middleRight' |\n    'bottomLeft' |\n    'bottomCenter' |\n    'bottomRight';\n\n/**\n * The handles used for skewing\n *\n * @internal\n * @ignore\n */\ntype SkewHandle = 'skewHorizontal' | 'skewVertical';\n\n/**\n * All the handles provided by {@link Transformer}.\n *\n * @internal\n * @ignore\n */\nexport type Handle = RotateHandle | ScaleHandle | SkewHandle;\n\n/**\n * Specific cursors for each handle\n *\n * @internal\n * @ignore\n */\nconst HANDLE_TO_CURSOR: { [H in Handle]?: string } = {\n    topLeft: 'nw-resize',\n    topCenter: 'n-resize',\n    topRight: 'ne-resize',\n    middleLeft: 'w-resize',\n    middleRight: 'e-resize',\n    bottomLeft: 'sw-resize',\n    bottomCenter: 's-resize',\n    bottomRight: 'se-resize',\n};\n\n/**\n * An array of all {@link ScaleHandle} values.\n *\n * @internal\n * @ignore\n */\nconst SCALE_HANDLES: ScaleHandle[] = [\n    'topLeft',\n    'topCenter',\n    'topRight',\n    'middleLeft',\n    'middleCenter',\n    'middleRight',\n    'bottomLeft',\n    'bottomCenter',\n    'bottomRight',\n];\n\n/**\n * This maps each scaling handle to the directions in which the x, y components are outward. A value of\n * zero means that no scaling occurs along that component's axis.\n *\n * @internal\n * @ignore\n */\nconst SCALE_COMPONENTS: {\n    [H in ScaleHandle]: { x: (-1 | 0 | 1); y: (-1 | 0 | 1) };\n } = {\n     topLeft: { x: -1, y: -1 },\n     topCenter: { x: 0, y: -1 },\n     topRight: { x: 1, y: -1 },\n     middleLeft: { x: -1, y: 0 },\n     middleCenter: { x: 0, y: 0 },\n     middleRight: { x: 1, y: 0 },\n     bottomLeft: { x: -1, y: 1 },\n     bottomCenter: { x: 0, y: 1 },\n     bottomRight: { x: 1, y: 1 },\n };\n\n/**\n * All possible values of {@link Handle}.\n *\n * @ignore\n */\nconst HANDLES = [\n    ...SCALE_HANDLES,\n    'rotator',\n    'skewHorizontal',\n    'skewVertical',\n];\n\n/**\n * The default snap angles for rotation, in radians.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAPS = [\n    Math.PI / 4,\n    Math.PI / 2,\n    Math.PI * 3 / 4,\n    Math.PI,\n    -Math.PI / 4,\n    -Math.PI / 2,\n    -Math.PI * 3 / 4,\n];\n\n/**\n * The default snap tolerance, i.e. the maximum angle b/w the pointer & nearest snap ray for snapping.\n *\n * @ignore\n */\nconst DEFAULT_ROTATION_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * The default snap angles for skewing, in radians.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAPS = [\n    Math.PI / 4,\n    -Math.PI / 4,\n];\n\n/**\n * The default snap tolerance for skewing.\n *\n * @ignore\n */\nconst DEFAULT_SKEW_SNAP_TOLERANCE = Math.PI / 90;\n\n/**\n * @ignore\n */\nexport interface ITransformerStyle\n{\n    color: number;\n    thickness: number;\n}\n\n/**\n * The default wireframe style for {@link Transformer}.\n *\n * @ignore\n */\nconst DEFAULT_WIREFRAME_STYLE: ITransformerStyle = {\n    color: 0x000000,\n    thickness: 2,\n};\n\n/**\n * @ignore\n */\nexport interface ITransformerOptions\n{\n    centeredScaling: boolean;\n    enabledHandles?: Array<Handle>;\n    group: DisplayObject[];\n    handleConstructor: typeof DisplayObject;\n    handleStyle: Partial<ITransformerHandleStyle>;\n    rotateEnabled?: boolean;\n    rotationSnaps?: number[];\n    rotationSnapTolerance?: number;\n    scaleEnabled?: boolean;\n    skewEnabled?: boolean;\n    skewRadius?: number;\n    skewSnaps?: number[];\n    skewSnapTolerance?: number;\n    translateEnabled?: boolean;\n    transientGroupTilt?: boolean;\n    wireframeStyle: Partial<ITransformerStyle>;\n}\n\n/**\n * {@code Transformer} provides an interactive interface for editing the transforms in a group. It supports translating,\n * scaling, rotating, and skewing display-objects both through interaction and code.\n *\n * NOTE: The transformer needs to capture all interaction events that would otherwise go to the display-objects in the\n * group. Hence, it must be placed after them in the scene graph.\n */\nexport class Transformer extends Container\n{\n    public group: DisplayObject[];\n\n    public centeredScaling: boolean;\n    public rotationSnaps: number[];\n    public rotationSnapTolerance: number;\n    public skewRadius: number;\n    public skewSnaps: number[];\n    public skewSnapTolerance: number;\n    public translateEnabled: boolean;\n    public transientGroupTilt: boolean;\n\n    protected groupBounds: OrientedBounds;\n    protected handles: { [H in Handle]: TransformerHandle };\n    protected wireframe: Graphics;\n\n    protected _enabledHandles: Handle[];\n    protected _rotateEnabled: boolean;\n    protected _scaleEnabled: boolean;\n    protected _skewEnabled: boolean;\n    protected _skewX: number;\n    protected _skewY: number;\n    protected _handleStyle: Partial<ITransformerHandleStyle>;\n    protected _wireframeStyle: Partial<ITransformerStyle>;\n\n    private _pointerDown: boolean;\n    private _pointerDragging: boolean;\n    private _pointerPosition: Point;\n\n    /* eslint-disable max-len */\n    /**\n     * | Handle                | Type                     | Notes |\n     * | --------------------- | ------------------------ | ----- |\n     * | rotator               | Rotate                   | |\n     * | topLeft               | Scale                    | |\n     * | topCenter             | Scale                    | |\n     * | topRight              | Scale                    | |\n     * | middleLeft            | Scale                    | |\n     * | middleCenter          | Scale                    | This cannot be enabled!                                             |\n     * | middleRight           | Scale                    | |\n     * | bottomLeft            | Scale                    | |\n     * | bottomCenter          | Scale                    | |\n     * | bottomRight           | Scale                    | |\n     * | skewHorizontal        | Skew                     | Applies vertical shear. Handle segment is horizontal at skew.y = 0! |\n     * | skewVertical          | Skew                     | Applied horizontal shear. Handle segment is vertical at skew.x = 0! |\n     *\n     * @param {object}[options]\n     * @param {DisplayObject[]}[options.group] - the group of display-objects being transformed\n     * @param {boolean}[options.enabledHandles] - specifically define which handles are to be enabled\n     * @param {typeof TransformerHandle}[options.handleConstructor] - a custom transformer-handle class\n     * @param {object}[options.handleStyle] - styling options for the handle. These cannot be modified afterwards!\n     * @param {number}[options.handleStyle.color] - handle color\n     * @param {string}[options.handleStyle.outlineColor] - color of the handle outline (stroke)\n     * @param {string}[options.handleStyle.outlineThickness] - thickness of the handle outline (stroke)\n     * @param {number}[options.handleStyle.radius] - dimensions of the handle\n     * @param {string}[options.handleStyle.shape] - 'circle' or 'square'\n     * @param {boolean}[options.rotateEnabled=true] - whether rotate handles are enabled\n     * @param {number[]}[options.rotationSnaps] - the rotation snap angles, in radians. By default, transformer will\n     *      snap for each 1/8th of a revolution.\n     * @param {number}[options.rotationSnapTolerance] - the snap tolerance for rotation in radians\n     * @param {boolean}[options.scaleEnabled=true] - whether scale handles are enabled\n     * @param {boolean}[options.skewEnabled=true] - whether skew handles are enabled\n     * @param {number}[options.skewRadius] - distance of skew handles from center of transformer box\n     *      (`skewTransform` should be enabled)\n     * @param {number[]}[options.skewSnaps] - the skew snap angles, in radians.\n     * @param {number}[options.skewSnapTolerance] - the skew snap tolerance angle.\n     * @param {boolean}[options.translateEnabled=true] - whether dragging the transformer should move the group\n     * @param {boolean}[options.transientGroupTilt=true] - whether the transformer should reset the wireframe's rotation\n     *      after a rotator handle is \"defocused\".\n     * @param {object}[options.wireframeStyle] - styling options for the wireframe.\n     * @param {number}[options.wireframeStyle.color] - color of the lines\n     * @param {number}[options.wireframeStyle.thickness] - thickness of the lines\n     */\n    constructor(options: Partial<ITransformerOptions> = {})\n    {\n    /* eslint-enable max-len */\n        super();\n\n        this.interactive = true;\n        this.cursor = 'move';\n\n        this.group = options.group || [];\n        this.centeredScaling = !!options.centeredScaling;\n        this.rotationSnaps = options.rotationSnaps || DEFAULT_ROTATION_SNAPS;\n        this.rotationSnapTolerance = options.rotationSnapTolerance !== undefined\n            ? options.rotationSnapTolerance\n            : DEFAULT_ROTATION_SNAP_TOLERANCE;\n        this.skewRadius = options.skewRadius || 64;\n        this.skewSnaps = options.skewSnaps || DEFAULT_SKEW_SNAPS;\n        this.skewSnapTolerance = options.skewSnapTolerance !== undefined\n            ? options.skewSnapTolerance\n            : DEFAULT_SKEW_SNAP_TOLERANCE;\n        this._rotateEnabled = options.rotateEnabled !== false;\n        this._scaleEnabled = options.scaleEnabled !== false;\n        this._skewEnabled = options.skewEnabled === true;\n        this.translateEnabled = options.translateEnabled !== false;\n        this.transientGroupTilt = options.transientGroupTilt !== undefined ? options.transientGroupTilt : true;\n\n        /**\n         * Draws the bounding boxes\n         */\n        this.wireframe = this.addChild(new Graphics());\n\n        /**\n         * The horizontal skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewX = 0;\n\n        /**\n         * The vertical skew value. Rotating the group by 𝜽 will also change this value by 𝜽.\n         */\n        this._skewY = 0;\n\n        /**\n         * The wireframe style applied on the transformer\n         */\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, options.wireframeStyle || {});\n\n        const HandleConstructor = options.handleConstructor || TransformerHandle;\n        const handleStyle = options.handleStyle || {};\n\n        this._handleStyle = handleStyle;\n\n        // Initialize transformer handles\n        const rotatorHandles = {\n            rotator: this.addChild(\n                new HandleConstructor(\n                    'rotator',\n                    handleStyle,\n                    (pointerPosition) =>\n                    {\n                        // The origin is the rotator handle's position, yes.\n                        this.rotateGroup('rotator', pointerPosition);\n                    },\n                    this.commitGroup,\n                )),\n        };\n        const scaleHandles = SCALE_HANDLES.reduce((scaleHandles, handleKey: ScaleHandle) =>\n        {\n            const handleDelta = (pointerPosition: Point): void =>\n            {\n                this.scaleGroup(handleKey as ScaleHandle, pointerPosition);\n            };\n\n            scaleHandles[handleKey] = new HandleConstructor(\n                handleKey,\n                handleStyle,\n                handleDelta,\n                this.commitGroup,\n                HANDLE_TO_CURSOR[handleKey]);\n            scaleHandles[handleKey].visible = this._scaleEnabled;\n            this.addChild(scaleHandles[handleKey]);\n\n            return scaleHandles;\n        }, {});\n        const skewHandles = {\n            skewHorizontal: this.addChild(\n                new HandleConstructor(\n                    'skewHorizontal',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewHorizontal', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n            skewVertical: this.addChild(\n                new HandleConstructor(\n                    'skewVertical',\n                    handleStyle,\n                    (pointerPosition: Point) => { this.skewGroup('skewVertical', pointerPosition); },\n                    this.commitGroup,\n                    'pointer',\n                )),\n        };\n\n        this.handles = Object.assign({}, rotatorHandles, scaleHandles, skewHandles) as { [H in Handle]: TransformerHandle };\n        this.handles.middleCenter.visible = false;\n        this.handles.skewHorizontal.visible = this._skewEnabled;\n        this.handles.skewVertical.visible = this._skewEnabled;\n\n        // Update groupBounds immediately. This is because mouse events can propagate before the next animation frame.\n        this.groupBounds = new OrientedBounds();\n        this.updateGroupBounds();\n\n        // Pointer events\n        this._pointerDown = false;\n        this._pointerDragging = false;\n        this._pointerPosition = new Point();\n        this.on('pointerdown', this.onPointerDown, this);\n        this.on('pointermove', this.onPointerMove, this);\n        this.on('pointerup', this.onPointerUp, this);\n        this.on('pointerupoutside', this.onPointerUp, this);\n    }\n\n    /**\n     * The list of enabled handles, if applied manually.\n     */\n    get enabledHandles(): Array<Handle>\n    {\n        return this._enabledHandles;\n    }\n    set enabledHandles(value: Array<Handle>)\n    {\n        if (!this._enabledHandles && !value)\n        {\n            return;\n        }\n\n        this._enabledHandles = value;\n\n        HANDLES.forEach((handleKey) => { this.handles[handleKey].visible = false; });\n\n        if (value)\n        {\n            value.forEach((handleKey) => { this.handles[handleKey].visible = true; });\n        }\n        else\n        {\n            this.handles.rotator.visible = this._rotateEnabled;\n            this.handles.skewHorizontal.visible = this._skewEnabled;\n            this.handles.skewVertical.visible = this._skewEnabled;\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter') return;\n\n                this.handles[handleKey].visible = this._scaleEnabled;\n            });\n        }\n    }\n\n    /**\n     * The currently applied handle style. If you have edited the transformer handles directly, this may be inaccurate.\n     */\n    get handleStyle(): Partial<ITransformerHandleStyle>\n    {\n        return this._handleStyle;\n    }\n    set handleStyle(value: Partial<ITransformerHandleStyle>)\n    {\n        const handles = this.handles;\n\n        for (const handleKey in handles)\n        {\n            (handles[handleKey] as TransformerHandle).style = value;\n        }\n\n        this._handleStyle = value;\n    }\n\n    /**\n     * This will enable the rotate handles.\n     */\n    get rotateEnabled(): boolean\n    {\n        return this._rotateEnabled;\n    }\n    set rotateEnabled(value: boolean)\n    {\n        if (!this._rotateEnabled !== value)\n        {\n            this._rotateEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.rotator.visible = value;\n        }\n    }\n\n    /**\n     * This will enable the scale handles.\n     */\n    get scaleEnabled(): boolean\n    {\n        return this._scaleEnabled;\n    }\n    set scaleEnabled(value: boolean)\n    {\n        if (!this._scaleEnabled !== value)\n        {\n            this._scaleEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            SCALE_HANDLES.forEach((handleKey) =>\n            {\n                if (handleKey === 'middleCenter')\n                {\n                    return;\n                }\n\n                this.handles[handleKey].visible = value;\n            });\n        }\n    }\n\n    /**\n     * This will enable the skew handles.\n     */\n    get skewEnabled(): boolean\n    {\n        return this._skewEnabled;\n    }\n    set skewEnabled(value: boolean)\n    {\n        if (this._skewEnabled !== value)\n        {\n            this._skewEnabled = value;\n\n            if (this._enabledHandles)\n            {\n                return;\n            }\n\n            this.handles.skewHorizontal.visible = value;\n            this.handles.skewVertical.visible = value;\n        }\n    }\n\n    /**\n     * The currently applied wireframe style.\n     */\n    get wireframeStyle(): Partial<ITransformerStyle>\n    {\n        return this._wireframeStyle;\n    }\n    set wireframeStyle(value: Partial<ITransformerStyle>)\n    {\n        this._wireframeStyle = Object.assign({}, DEFAULT_WIREFRAME_STYLE, value);\n    }\n\n    /**\n     * This will translate the group by {@code delta}.\n     *\n     * NOTE: There is no handle that provides translation. The user drags the transformer directly.\n     *\n     * @param delta\n     */\n    translateGroup = (delta: Point): void =>\n    {\n        // Translation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(delta.x, delta.y);\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will rotate the group such that the handle will come to {@code pointerPosition}.\n     *\n     * @param handle - the rotator handle was dragged\n     * @param pointerPosition - the new pointer position (after dragging)\n     */\n    rotateGroup = (handle: RotateHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n        const origin = this.handles[handle].position;\n        const destination = pointerPosition;\n\n        // Center of rotation - does not change in transformation\n        const rOrigin = bounds.center;\n\n        // Original angle subtended by pointer\n        const orgAngle = Math.atan2(origin.y - rOrigin.y, origin.x - rOrigin.x);\n\n        // Final angle subtended by pointer\n        const dstAngle = Math.atan2(destination.y - rOrigin.y, destination.x - rOrigin.x);\n\n        // The angle by which bounds should be rotated\n        let deltaAngle = dstAngle - orgAngle;\n\n        // Snap\n        let newRotation = this.groupBounds.rotation + deltaAngle;\n\n        newRotation = this.snapAngle(newRotation, this.rotationSnapTolerance, this.rotationSnaps);\n        deltaAngle = newRotation - this.groupBounds.rotation;\n\n        // Rotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-rOrigin.x, -rOrigin.y)\n            .rotate(deltaAngle)\n            .translate(rOrigin.x, rOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(newRotation);\n\n        // Rotation moves both skew.x & skew.y\n        this._skewX += deltaAngle;\n        this._skewY += deltaAngle;\n    };\n\n    /**\n     * This will scale the group such that the scale handle will come under {@code pointerPosition}.\n     *\n     * @param handle - the scaling handle that was dragged\n     * @param pointerPosition - the new pointer position\n     */\n    scaleGroup = (handle: ScaleHandle, pointerPosition: Point): void =>\n    {\n        // Directions along x,y axes that will produce positive scaling\n        const xDir = SCALE_COMPONENTS[handle].x;\n        const yDir = SCALE_COMPONENTS[handle].y;\n\n        const bounds = this.groupBounds;\n        const angle = bounds.rotation;\n        const innerBounds = bounds.innerBounds;\n\n        // Delta vector in world frame\n        const dx = pointerPosition.x - this.handles[handle].x;\n        const dy = pointerPosition.y - this.handles[handle].y;\n\n        // Unit vector along u-axis (horizontal axis after rotation) of bounds\n        const uxvec = (bounds.topRight.x - bounds.topLeft.x) / innerBounds.width;\n        const uyvec = (bounds.topRight.y - bounds.topLeft.y) / innerBounds.width;\n\n        // Unit vector along v-axis (vertical axis after rotation) of bounds\n        const vxvec = (bounds.bottomLeft.x - bounds.topLeft.x) / innerBounds.height;\n        const vyvec = (bounds.bottomLeft.y - bounds.topLeft.y) / innerBounds.height;\n\n        // Delta vector in rotated frame of bounds\n        const du = (dx * uxvec) + (dy * uyvec);\n        const dv = (dx * vxvec) + (dy * vyvec);\n\n        // Scaling factors along x,y axes\n        const sx = 1 + (du * xDir / innerBounds.width);\n        const sy = 1 + (dv * yDir / innerBounds.height);\n\n        const matrix = tempMatrix.identity();\n\n        if (xDir !== 0)\n        {\n            // Origin of horizontal scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const hsOrigin = !this.centeredScaling ? (xDir === 1 ? bounds.topLeft : bounds.topRight) : bounds.center;\n\n            matrix.translate(-hsOrigin.x, -hsOrigin.y)\n                .rotate(-angle)\n                .scale(sx, 1)\n                .rotate(angle)\n                .translate(hsOrigin.x, hsOrigin.y);\n        }\n\n        if (yDir !== 0)\n        {\n            // Origin of vertical scaling - a point which does not move after applying the transform\n            // eslint-disable-next-line no-nested-ternary\n            const vsOrigin = !this.centeredScaling ? (yDir === 1 ? bounds.topLeft : bounds.bottomLeft) : bounds.center;\n\n            matrix.translate(-vsOrigin.x, -vsOrigin.y)\n                .rotate(-angle)\n                .scale(1, sy)\n                .rotate(angle)\n                .translate(vsOrigin.x, vsOrigin.y);\n        }\n\n        this.prependTransform(matrix);\n    };\n\n    /**\n     * This will skew the group such that the skew handle would move to the {@code pointerPosition}.\n     *\n     * @param handle\n     * @param pointerPosition\n     */\n    skewGroup = (handle: SkewHandle, pointerPosition: Point): void =>\n    {\n        const bounds = this.groupBounds;\n\n        // Destination point\n        const dst = tempPoint.copyFrom(pointerPosition);\n\n        // Center of skew (same as center of rotation!)\n        const sOrigin = bounds.center;\n\n        // Skew matrix\n        const matrix = tempMatrix.identity()\n            .translate(-sOrigin.x, -sOrigin.y);\n        let rotation = this.groupBounds.rotation;\n\n        if (handle === 'skewHorizontal')\n        {\n            const oldSkew = this._skewX;\n\n            // Calculate new skew\n            this._skewX = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x);\n            this._skewX = this.snapAngle(this._skewX, this.skewSnapTolerance, this.skewSnaps);\n\n            // Skew by new skew.x\n            matrix.prepend(createVerticalSkew(-oldSkew));\n            matrix.prepend(createVerticalSkew(this._skewX));\n        }\n        else // skewVertical\n        {\n            const oldSkew = this._skewY;\n\n            // Calculate new skew\n            const newSkew = Math.atan2(dst.y - sOrigin.y, dst.x - sOrigin.x) - (Math.PI / 2);\n\n            this._skewY = newSkew;\n            this._skewY = this.snapAngle(this._skewY, this.skewSnapTolerance, this.skewSnaps);\n\n            // HINT: skewY is applied negatively b/c y-axis is flipped\n            matrix.prepend(createHorizontalSkew(oldSkew));\n            matrix.prepend(createHorizontalSkew(-this._skewY));\n\n            rotation -= this._skewY - oldSkew;\n        }\n\n        matrix.translate(sOrigin.x, sOrigin.y);\n\n        this.prependTransform(matrix, true);\n        this.updateGroupBounds(rotation);\n    };\n\n    /**\n     * This is called after the user finishes dragging a handle. If {@link this.transientGroupTilt} is enabled, it will\n     * reset the rotation of this group (if more than one display-object is grouped).\n     */\n    commitGroup = (): void =>\n    {\n        if (this.transientGroupTilt !== false && this.group.length > 1)\n        {\n            this.updateGroupBounds(0);\n        }\n    };\n\n    /**\n     * This will update the transformer's geometry and render it to the canvas.\n     *\n     * @override\n     * @param renderer\n     */\n    render(renderer: Renderer): void\n    {\n        this.draw();\n\n        super.render(renderer);\n    }\n\n    /**\n     * Recalculates the transformer's geometry. This is called on each render.\n     */\n    protected draw(): void\n    {\n        const targets = this.group;\n        const { color, thickness } = this._wireframeStyle;\n\n        // Updates occur right here!\n        this.wireframe.clear()\n            .lineStyle(thickness, color);\n\n        for (let i = 0, j = targets.length; i < j; i++)\n        {\n            this.drawBounds(Transformer.calculateOrientedBounds(targets[i], tempBounds));\n        }\n\n        // groupBounds may change on each render-loop b/c of any ongoing animation\n        const groupBounds = targets.length !== 1\n            ? Transformer.calculateGroupOrientedBounds(targets, this.groupBounds.rotation, tempBounds, true)\n            : Transformer.calculateOrientedBounds(targets[0], tempBounds);// Auto-detect rotation\n\n        // Redraw skeleton and position handles\n        this.drawBounds(groupBounds);\n        this.drawHandles(groupBounds);\n\n        // Update cached groupBounds\n        this.groupBounds.copyFrom(groupBounds);\n    }\n\n    /**\n     * Draws the bounding box into {@code this.skeleton}.\n     *\n     * @param bounds\n     */\n    protected drawBounds(bounds: OrientedBounds | AxisAlignedBounds): void\n    {\n        // Fill polygon with ultra-low alpha to capture pointer events.\n        this.wireframe\n            .beginFill(0xffffff, 1e-4)\n            .drawPolygon(bounds.hull)\n            .endFill();\n    }\n\n    /**\n     * Draw the handles and any remaining parts of the skeleton\n     *\n     * @param groupBounds\n     */\n    protected drawHandles(groupBounds: OrientedBounds): void\n    {\n        const handles = this.handles;\n\n        const { topLeft, topRight, bottomLeft, bottomRight, center } = groupBounds;\n\n        if (this._rotateEnabled)\n        {\n            groupBounds.innerBounds.pad(32);\n\n            handles.rotator.position.x = (groupBounds.topLeft.x + groupBounds.topRight.x) / 2;\n            handles.rotator.position.y = (groupBounds.topLeft.y + groupBounds.topRight.y) / 2;\n\n            groupBounds.innerBounds.pad(-32);\n\n            const bx = (groupBounds.topLeft.x + groupBounds.topRight.x) / 2;\n            const by = (groupBounds.topLeft.y + groupBounds.topRight.y) / 2;\n\n            this.wireframe.moveTo(bx, by)\n                .lineTo(handles.rotator.position.x, handles.rotator.position.y);\n        }\n\n        if (this._scaleEnabled)\n        {\n            // Scale handles\n            handles.topLeft.position.copyFrom(topLeft);\n            handles.topCenter.position.set((topLeft.x + topRight.x) / 2, (topLeft.y + topRight.y) / 2);\n            handles.topRight.position.copyFrom(topRight);\n            handles.middleLeft.position.set((topLeft.x + bottomLeft.x) / 2, (topLeft.y + bottomLeft.y) / 2);\n            handles.middleCenter.position.set((topLeft.x + bottomRight.x) / 2, (topLeft.y + bottomRight.y) / 2);\n            handles.middleRight.position.set((topRight.x + bottomRight.x) / 2, (topRight.y + bottomRight.y) / 2);\n            handles.bottomLeft.position.copyFrom(bottomLeft);\n            handles.bottomCenter.position.set((bottomLeft.x + bottomRight.x) / 2, (bottomLeft.y + bottomRight.y) / 2);\n            handles.bottomRight.position.copyFrom(bottomRight);\n        }\n\n        if (this._skewEnabled)\n        {\n            // Skew handles\n            handles.skewHorizontal.position.set(\n                center.x + (Math.cos(this._skewX) * this.skewRadius),\n                center.y + (Math.sin(this._skewX) * this.skewRadius));\n            // HINT: Slope = skew.y + Math.PI / 2\n            handles.skewVertical.position.set(\n                center.x + (-Math.sin(this._skewY) * this.skewRadius),\n                center.y + (Math.cos(this._skewY) * this.skewRadius));\n\n            this.wireframe\n                .beginFill(this.wireframeStyle.color)\n                .drawCircle(center.x, center.y, this.wireframeStyle.thickness * 2)\n                .endFill();\n            this.wireframe\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewHorizontal.x, handles.skewHorizontal.y)\n                .moveTo(center.x, center.y)\n                .lineTo(handles.skewVertical.x, handles.skewVertical.y);\n        }\n\n        // Update transforms\n        for (const handleName in handles)\n        {\n            let rotation = this.groupBounds.rotation;\n\n            if (handleName === 'skewHorizontal')\n            {\n                rotation = this._skewX;\n            }\n            else if (handleName === 'skewVertical')\n            {\n                rotation = this._skewY;\n            }\n\n            const handle: TransformerHandle = handles[handleName];\n\n            handle.rotation = rotation;\n            handle.getBounds(false, tempRect);\n        }\n    }\n\n    /**\n     * Called on the `pointerdown` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerDown(e: InteractionEvent): void\n    {\n        this._pointerDown = true;\n        this._pointerDragging = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointermove` event. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerMove(e: InteractionEvent): void\n    {\n        if (!this._pointerDown)\n        {\n            return;\n        }\n\n        const lastPointerPosition = this._pointerPosition;\n        const currentPointerPosition = e.data.getLocalPosition(this, tempPoint);\n\n        const cx = currentPointerPosition.x;\n        const cy = currentPointerPosition.y;\n\n        // Translate group by difference\n        if (this._pointerDragging && this.translateEnabled)\n        {\n            const delta = currentPointerPosition;\n\n            delta.x -= lastPointerPosition.x;\n            delta.y -= lastPointerPosition.y;\n\n            this.translateGroup(delta);\n        }\n\n        this._pointerPosition.x = cx;\n        this._pointerPosition.y = cy;\n        this._pointerDragging = true;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Called on the `pointerup` and `pointerupoutside` events. You must call the super implementation.\n     *\n     * @param e\n     */\n    protected onPointerUp(e: InteractionEvent): void\n    {\n        this._pointerDragging = false;\n        this._pointerDown = false;\n\n        e.stopPropagation();\n    }\n\n    /**\n     * Applies the given transformation matrix {@code delta} to all the display-objects in the group.\n     *\n     * @param delta - transformation matrix\n     * @param skipUpdate - whether to skip updating the group-bounds after applying the transform\n     */\n    private prependTransform(delta: Matrix, skipUpdate = false): void\n    {\n        const group = this.group;\n\n        for (let i = 0, j = group.length; i < j; i++)\n        {\n            multiplyTransform(group[i], delta, false);\n        }\n\n        if (!skipUpdate)\n        {\n            this.updateGroupBounds();\n        }\n    }\n\n    /**\n     * Recalculates {@code this.groupBounds} at the same angle.\n     *\n     * @param rotation - override the group's rotation\n     */\n    private updateGroupBounds(rotation: number = this.groupBounds.rotation): void\n    {\n        Transformer.calculateGroupOrientedBounds(this.group, rotation, this.groupBounds);\n    }\n\n    /**\n     * Snaps the given {@code angle} to one of the snapping angles, if possible.\n     *\n     * @param angle - the input angle\n     * @param snapTolerance - the maximum difference b/w the given angle & a snapping angle\n     * @param snaps - the snapping angles\n     * @returns the snapped angle\n     */\n    private snapAngle(angle: number, snapTolerance: number, snaps?: number[]): number\n    {\n        angle = angle % (Math.PI * 2);\n\n        if (!snaps || snaps.length === 1 || !snapTolerance)\n        {\n            return angle;\n        }\n\n        for (let i = 0, j = snaps.length; i < j; i++)\n        {\n            if (Math.abs(angle - snaps[i]) <= snapTolerance)\n            {\n                return snaps[i];\n            }\n        }\n\n        return angle;\n    }\n\n    /**\n     * Calculates the positions of the four corners of the display-object. The quadrilateral formed by\n     * these points will be the tightest fit around it.\n     *\n     * @param displayObject - The display object whose corners are to be calculated\n     * @param transform - The transform applied on the display-object. By default, this is its world-transform\n     * @param corners - Optional array of four points to put the result into\n     * @param index - Optional index into \"corners\"\n     */\n    static calculateTransformedCorners(\n        displayObject: DisplayObject,\n        transform: Matrix = displayObject.worldTransform,\n        corners?: Point[],\n        index = 0,\n    ): Point[]\n    {\n        const localBounds = displayObject.getLocalBounds();\n\n        // Don't modify transforms\n        displayObject.getBounds();\n\n        corners = corners || [new Point(), new Point(), new Point(), new Point()];\n        corners[index].set(localBounds.x, localBounds.y);\n        corners[index + 1].set(localBounds.x + localBounds.width, localBounds.y);\n        corners[index + 2].set(localBounds.x + localBounds.width, localBounds.y + localBounds.height);\n        corners[index + 3].set(localBounds.x, localBounds.y + localBounds.height);\n\n        transform.apply(corners[index], corners[index]);\n        transform.apply(corners[index + 1], corners[index + 1]);\n        transform.apply(corners[index + 2], corners[index + 2]);\n        transform.apply(corners[index + 3], corners[index + 3]);\n\n        return corners;\n    }\n\n    /**\n     * Calculates the oriented bounding box of the display-object. This would not bending with any skew\n     * applied on the display-object, i.e. it is guaranteed to be rectangular.\n     *\n     * @param displayObject\n     * @param bounds - the bounds instance to set\n     */\n    static calculateOrientedBounds(displayObject: DisplayObject, bounds?: OrientedBounds): OrientedBounds\n    {\n        const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n        displayObject.updateTransform();\n        displayObject.disableTempParent(parent);\n\n        // Decompose displayObject.worldTransform to get its (world) rotation\n        decomposeTransform(tempTransform, displayObject.worldTransform);\n\n        tempTransform.updateLocalTransform();\n\n        const angle = tempTransform.rotation;\n        const corners = Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, tempCorners);\n\n        // Calculate centroid, which is our center of rotatation\n        const cx = (corners[0].x + corners[1].x + corners[2].x + corners[3].x) / 4;\n        const cy = (corners[0].y + corners[1].y + corners[2].y + corners[3].y) / 4;\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .translate(-cx, -cy)\n            .rotate(-tempTransform.rotation)\n            .translate(cx, cy);\n\n        // Calculate unrotated corners\n        matrix.apply(corners[0], corners[0]);\n        matrix.apply(corners[1], corners[1]);\n        matrix.apply(corners[2], corners[2]);\n        matrix.apply(corners[3], corners[3]);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.rotation = angle;\n        bounds.innerBounds.x = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        bounds.innerBounds.y = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        bounds.innerBounds.width = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x) - bounds.innerBounds.x;\n        bounds.innerBounds.height = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y) - bounds.innerBounds.y;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the oriented bounding box of a group of display-objects at a specific angle.\n     *\n     * @param group\n     * @param rotation\n     * @param bounds\n     * @param skipUpdate\n     */\n    static calculateGroupOrientedBounds(\n        group: DisplayObject[],\n        rotation: number,\n        bounds?: OrientedBounds,\n        skipUpdate = false,\n    ): OrientedBounds\n    {\n        const groupLength = group.length;\n        const frames = pointPool.allocateArray(groupLength * 4);// Zero allocations!\n\n        // Calculate display-object frame vertices\n        for (let i = 0; i < groupLength; i++)\n        {\n            const displayObject = group[i];\n\n            // Update worldTransform\n            if (!skipUpdate)\n            {\n                const parent = !displayObject.parent ? displayObject.enableTempParent() : displayObject.parent;\n\n                displayObject.updateTransform();\n                displayObject.disableTempParent(parent);\n            }\n\n            Transformer.calculateTransformedCorners(displayObject, displayObject.worldTransform, frames, i * 4);\n        }\n\n        // Unrotation matrix\n        const matrix = tempMatrix\n            .identity()\n            .rotate(-rotation);\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = -Number.MAX_VALUE;\n        let maxY = -Number.MAX_VALUE;\n\n        // Unrotate all frame vertices, calculate minX, minY, maxX, maxY for innerBounds\n        for (let i = 0, j = frames.length; i < j; i++)\n        {\n            const point = frames[i];\n\n            matrix.apply(point, point);\n\n            const x = point.x;\n            const y = point.y;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        pointPool.releaseArray(frames);\n\n        bounds = bounds || new OrientedBounds();\n        bounds.innerBounds.x = minX;\n        bounds.innerBounds.y = minY;\n        bounds.innerBounds.width = maxX - minX;\n        bounds.innerBounds.height = maxY - minY;\n        bounds.rotation = rotation;\n\n        matrix.applyInverse(bounds.center, tempPoint);\n        bounds.center.copyFrom(tempPoint);\n\n        return bounds;\n    }\n}\n"],"names":["DEFAULT_HANDLE_STYLE","color","outlineColor","outlineThickness","radius","shape","tempPoint","Point","TransformerHandle","Graphics","[object Object]","handle","styleOpts","handler","commit","cursor","super","style","Object","assign","this","_handle","_style","onHandleDelta","onHandleCommit","_dirty","interactive","_pointerDown","_pointerDragging","_pointerPosition","on","onPointerDown","onPointerMove","onPointerUp","value","renderer","draw","render","lineStyle","beginFill","drawRect","drawPolygon","drawCircle","Math","sqrt","endFill","e","stopPropagation","onDrag","onDragStart","onDragEnd","data","getLocalPosition","parent","currentPosition","copyFrom","_","tempMatrix","Matrix","createHorizontalSkew","angle","matrix","identity","c","tan","createVerticalSkew","b","decomposeTransform","transform","rotation","pivot","a","d","skewX","atan2","skewY","set","x","y","skew","scale","position","tx","ty","tempParentMatrix","multiplyTransform","displayObject","skipUpdate","enableTempParent","updateTransform","disableTempParent","worldTransform","parentTransform","IDENTITY","prepend","invert","tempTransform","Transform","tempCorners","tempBounds","OrientedBounds","tempRect","Rectangle","pointPool","ObjectPoolFactory","build","HANDLE_TO_CURSOR","topLeft","topCenter","topRight","middleLeft","middleRight","bottomLeft","bottomCenter","bottomRight","SCALE_HANDLES","SCALE_COMPONENTS","middleCenter","HANDLES","DEFAULT_ROTATION_SNAPS","PI","DEFAULT_ROTATION_SNAP_TOLERANCE","DEFAULT_SKEW_SNAPS","DEFAULT_SKEW_SNAP_TOLERANCE","DEFAULT_WIREFRAME_STYLE","thickness","Transformer","Container","options","delta","translate","prependTransform","pointerPosition","bounds","groupBounds","origin","handles","destination","rOrigin","center","orgAngle","deltaAngle","newRotation","snapAngle","rotationSnapTolerance","rotationSnaps","rotate","updateGroupBounds","_skewX","_skewY","xDir","yDir","innerBounds","dx","dy","uxvec","width","uyvec","dv","height","sx","sy","hsOrigin","centeredScaling","vsOrigin","dst","sOrigin","oldSkew","skewSnapTolerance","skewSnaps","newSkew","transientGroupTilt","group","length","undefined","skewRadius","_rotateEnabled","rotateEnabled","_scaleEnabled","scaleEnabled","_skewEnabled","skewEnabled","translateEnabled","wireframe","addChild","_wireframeStyle","wireframeStyle","HandleConstructor","handleConstructor","handleStyle","_handleStyle","rotatorHandles","rotator","rotateGroup","commitGroup","scaleHandles","reduce","handleKey","scaleGroup","visible","skewHandles","skewHorizontal","skewGroup","skewVertical","enabledHandles","_enabledHandles","forEach","targets","clear","i","j","drawBounds","calculateOrientedBounds","calculateGroupOrientedBounds","drawHandles","hull","pad","bx","by","moveTo","lineTo","cos","sin","handleName","getBounds","lastPointerPosition","currentPointerPosition","cx","cy","translateGroup","snapTolerance","snaps","abs","corners","index","localBounds","getLocalBounds","apply","updateLocalTransform","calculateTransformedCorners","min","max","groupLength","frames","allocateArray","minX","Number","MAX_VALUE","minY","maxX","maxY","point","releaseArray","applyInverse"],"mappings":"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"}